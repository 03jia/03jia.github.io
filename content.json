{"meta":{"title":"Jia's Blog","subtitle":"","description":"","author":"Jia","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2023-06-19T08:20:40.000Z","updated":"2023-06-19T08:20:40.750Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-06-19T08:20:56.000Z","updated":"2023-06-19T08:20:56.388Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"Java基础","date":"2023-06-19T09:48:12.337Z","updated":"2023-06-19T07:11:50.886Z","comments":true,"path":"categories/Java/Java基础.html","permalink":"http://example.com/categories/Java/Java%E5%9F%BA%E7%A1%80.html","excerpt":"","text":"第一章&gt;&gt;&gt;基础语法1. Java基础知识图解 2. 关键字和保留字2.1 关键字(keyword)定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词） 特点：关键字中所有字母都为小写 官方地址： https://docs.orace.com/javase/tutoria/java/nutsandbots/_keywords.htm 2.2 保留字(reserved word) Java保留字：现有Java版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留字 3. 标识符(Identifier)标识符： Java 对各种变量、方法和类等要素命名时使用的字符序列称为标识符 技巧：凡是自己可以起名字的地方都叫标识符。 定义合法标识符规则： 由26个英文字母大小写，0-9 ，_或 $ 组成 数字不可以开头。 不可以使用关键字和保留字，但能包含关键字和保留字。 Java中严格区分大小写，长度无限制。 标识符不能包含空格 Java中的名称命名规范： 包名：多单词组成时所有字母都小写：xxxyyyzzz 类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz 变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个 单词首字母大写：xxxYyyZzz 常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ 4. 变量4.1 使用变量注意： Java中每个变量必须先声明，后使用 使用变量名来访问这块区域的数据 变量的作用域：其定义所在的一对{ }内 变量只有在其作用域内才有效 同一个作用域内，不能定义重名的变量 4.2 声明变量 语法：&lt;数据类型&gt; &lt;变量名称&gt; 例如：int var; 4.3 变量的赋值语法：&lt;变量名称&gt; &#x3D; &lt;值&gt; 例如：var &#x3D; 10; 4.4 声明和赋值变量语法： &lt;数据类型&gt; &lt;变量名&gt; &#x3D; &lt;初始化值&gt; 例如：int var &#x3D; 10; 4.5 补充：变量的分类-按声明的位置的不同在方法体外，类体内声明的变量称为成员变量。 在方法体内部声明的变量称为局部变量。 二者在初始化值方面的异同: 同：都有生命周期 异：局部变量除形参外，需显式初始化。 4.6 变量的分类——按数据类型 4.6.1 整数类型byte、short、int、long Java各整数类型有固定的表数范围和字段长度，不受具体OS的影响，以保证java程序的可移植性。 java的整型常量默认为 int 型，声明ong型常量须后加‘’或‘’ java程序中变量通常声明为int型，除非不足以表示较大的数，才使用ong 类型 占用存储空间 表示范围 byte 1字节&#x3D;8bit位 -128 ~ 127 short 2字节 -215 ~215-1 int（默认） 4字节 -231 ~ 231-1 (约21亿) ong 8字节 -263 ~ 263-1 4.6.2 浮点类型float、double 与整数类型类似，Java 浮点类型也有固定的表数范围和字段长度，不受具体操作系统的影响。 浮点型常量有两种表示形式： ​ 十进制数形式：如：5.12、512.0f、.512 (必须有小数点） ​ 科学计数法形式:如：5.12e2、512E2、100E-2 float:单精度，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求。 double:双精度，精度是float的两倍。通常采用此类型。 Java的浮点型常量默认为double型，声明float型常量，须后加 ‘f’ 或 ‘F’。 4.6.3 字符类型char char 型数据用来表示通常意义上“字符”(2字节) Java中的所有字符都使用Unicode编码，故一个字符可以存储一个字母，一个汉字，或其他书面语的一个字符。 字符型变量的三种表现形式： 字符常量是用单引号(‘ ’)括起来的单个字符。例如：char c1 &#x3D; ‘a’; char c2 &#x3D; ‘中’; char c3 &#x3D; ‘9’； ​ Java中还允许使用转义字符‘\\’来将其后的字符转变为特殊字符型常量。例 如：char c3 &#x3D; ‘\\n’; &#x2F;&#x2F; ‘\\n’表示换行符； ​ 直接使用 Unicode 值来表示字符型常量：‘\\uXXXX’。其中，XXXX代表一个 十六进制整数。如：\\u000a 表示 \\n。 char类型是可以进行运算的。因为它都对应有Unicode码。 4.6.4 布尔类型boolean boolean 类型用来判断逻辑条件，一般用于程序流程控制： ​ if条件控制语句； ​ while循环控制语句； ​ do-while循环控制语句； ​ for循环控制语句; boolean类型数据只允许取值true和false，无nu。 ​ 不可以使用0或非 0 的整数替代false和true，这点和C语言不同。 4.7 基本数据转换 自动类型转换：容量小的类型自动转换为容量大的数据类型。数据类型按容量大小排序为： 特别的：当byte、char、short三种类型的变量做运算时，结果为int型 有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算。 byte,short,char之间不会相互转换，他们三者在计算时首先转换为int类型。 boolean类型不能与其它数据类型运算。 当把任何基本数据类型的值和字符串(String)进行连接运算时(+)，基本数据类型的值将自动转化为字符串(String)类型。 4.8 字符串类型String String不是基本数据类型，属于引用数据类型 使用方式与基本数据类型一致。例如：String str &#x3D; “abcd”; 一个字符串可以串接另一个字符串，也可以直接串接其他类型的数据。 例如： str &#x3D; str + “xyz” ; ​ int n &#x3D; 100; ​ str &#x3D; str + n； 1234567String str1 = 4; //判断对错：noString str2 = 3.5f + “”; //判断str2对错：yesSystem.out.printn(str2); //输出：”3.5”System.out .printn(3+4+“Heo!”); //输出：7Heo!System.out.printn(“Heo!”+3+4); //输出：Heo!34System.out.printn(‘a’+1+“Heo!”); //输出：98Heo!System.out.printn(“Heo”+‘a’+1); //输出：Heoa1 4.9 强制类型转换自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符：()，但可能造成精度降低或溢出,格外要注意。 通常，字符串不能直接转换为基本类型，但通过基本类型对应的包装类则可以实现把字符串转换成基本类型。 例如： 1String a = “43”; int i = Integer.parseInt(a) boolean类型不可以转换为其它的数据类型。 123456789101112判断是否能通过编译1） short s = 5; s = s-2;2） byte b = 3; //判断：no b = b + 4; //判断：no b = (byte)(b+4); //判断：yes3） char c = ‘a’; int i = 5; float d = .314F; double resut = c+i+d; //判断：yes4） byte b = 5; short s = 3; short t = s + b; //判断：no 5. 进制所有数字在计算机底层都以二进制形式存在。 对于整数，有四种表示方式： 二进制**(binary)：0,1 ，满2进1.以0b或0B**开头。 十进制**(decimal)**：0-9 ，满10进1。 八进制**(octal)：0-7 ，满8进1. 以数字0**开头表示。 十六进制**(hex)：0-9及A-F，满16进1. 以0x或0X**开头表示。此处的A-F不区分大小写。 如：0x21AF +1&#x3D; 0X21B0 5.1 二进制二进制的整数有如下三种形式： 原码：直接将一个数值换成二进制数。最高位是符号位 负数的反码：是对原码按位取反，只是最高位（符号位）确定为1。 负数的补码：其反码加1。 计算机以二进制补码的形式保存所有的整数。 正数的原码、反码、补码都相同（三码合一) 负数的补码是其反码+1 5.2 进制的基本转换 十进制 二进制互转 二进制转成十进制 乘以2的幂数 十进制转成二进制 除以2取余数 二进制 八进制互转（8&#x3D;2^3） 二进制 十六进制互转（8&#x3D;2^4） 十进制 八进制互转 十进制 十六进制互转 6. 运算符运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。 算术运算符 赋值运算符 比较运算符（关系运算符） 逻辑运算符 位运算符 三元运算符 6.1 算术运算符 运算符 运算 范例 结果 + 正号 +3 3 - 负号 b&#x3D;4; -b -4 + 加 5+5 10 - 减 6-4 2 * 乘 3*4 12 &#x2F; 除(取整) 5&#x2F;5 1 % 取模(取余) 7%5 2 ++ ++ 自增（前）：先运算后取值 自增（后）：先取值后运算 a&#x3D;2;b&#x3D;++a; a&#x3D;2;b&#x3D;a++; a&#x3D;3;b&#x3D;3 a&#x3D;3;b&#x3D;2 - - - - 自减（前）：先运算后取值 自减（后）：先取值后运算 a&#x3D;2;b&#x3D;- -a a&#x3D;2;b&#x3D;a- - a&#x3D;1;b&#x3D;1 a&#x3D;1;b&#x3D;2 + 字符串连接 “Hell”+”o” &gt;“Hello &#x2F;&#x2F;(前)++ :先自增1，后运算 &#x2F;&#x2F;(后)++ :先运算，后自增1 &#x2F;&#x2F;(前)– :先自减1，后运算 &#x2F;&#x2F;(后)– :先运算，后自减1 连接符：+ 只能使用在String与其他类型变量之间使用 注意： 12345//整数型相除，如果除不尽就会截断，只保留整数部分，所以结果是1，然后转换成浮点型就变成1.0float a = 10 / 9System.out.println(a) //输出：1.0System.out.println(10.0 / 9.0) //输出：1.1111112 在Java中，整数相除除不尽的时候会取整，即向下取整。这是因为Java中整数类型的除法是基于整数的除法（也称为截断除法）实现的。整数的除法是指两个整数相除时，结果只保留整数部分，而舍去小数部分，即将小数部分向零取整。因此，如果两个整数相除结果不能整除，那么余数会被舍去，结果就会变成0。 6.2 赋值运算符符号：&#x3D; 当“&#x3D;”两侧数据类型不一致时，可以使用自动类型转换或使用强制 类型转换原则进行处理。 支持连续赋值。 扩展赋值运算符： +&#x3D;, -&#x3D;, *&#x3D;, &#x2F;&#x3D;, %&#x3D; &#x2F;&#x2F;开发中，如果希望变量实现+2的操作，有几种方法？(前提：int num &#x3D; 10;)&#x2F;&#x2F;方式一：num &#x3D; num + 2;&#x2F;&#x2F;方式二：num +&#x3D; 2; (推荐) &#x2F;&#x2F;开发中，如果希望变量实现+1的操作，有几种方法？(前提：int num &#x3D; 10;)&#x2F;&#x2F;方式一：num &#x3D; num + 1;&#x2F;&#x2F;方式二：num +&#x3D; 1;&#x2F;&#x2F;方式三：num++; (推荐) 运算的结果不会改变本身变量的数据类型 6.3 比较运算符比较运算符的结果都是boolean型，也就是要么是true，要么是false。 比较运算符“**&#x3D;&#x3D;”不能误写成“&#x3D;”** 。 特别说明： 比较运算符的结果是boolean类型 &gt; &lt; &gt;&#x3D; &lt;&#x3D;：只能使用在数值类型的数据之间 &#x3D;&#x3D; 和 !&#x3D;：不仅可以使用在数值类型数据之间，还可以使用在其它应用类型变量之间 6.4 逻辑运算符 &amp;—逻辑与 | —逻辑或 ！—逻辑非 &amp;&amp; —短路与（推荐) || —短路或（推荐） ^ —逻辑异或 a b a&amp;b a&amp;&amp;b a|b a||b !a a^b true true true true true true false false true false false false true true false true false true false false true true true true false false false false false false true false “&amp;”和“&amp;&amp;”的区别： 相同点1：运算结果都相同 相同点2：当符号左边是true时，二者都会执行符号右边的运算 不同点：当符号左边是false时，&amp; 继续执行符号右边的运算，&amp;&amp; 不再执行符号右边的运算 “|”和“||”的区别 相同点1：运算结果都相同 相同点2：当符号左边是false时，二者都会执行符号右边的运算 不同点：当符号左边是true时，| 继续执行符号右边的运算，|| 不再执行符号右边的运算 异或( ^ )与或( | )的不同之处是：当左右都为true时，结果为false。 理解：异或，追求的是“异”! 逻辑运算符操作的都是boolean类型的变量，而且结果也都是boolean类型 6.5 位运算符 &lt;&lt; 空位补0，被移除的高位丢弃，空缺位补0。 &gt;&gt; 被移位的二进制最高位是0，右移后，空缺位补0； 最高位是1，空缺位补1。 &gt;&gt;&gt; 被移位二进制最高位无论是0或者是1，空缺位都用0补。 &amp; 二进制位进行&amp;运算，只有1&amp;1时结果是1，否则是0; | 二进制位进行 | 运算，只有0 | 0时结果是0，否则是1; ^ 相同二进制位进行 ^ 运算，结果是0；1^1&#x3D;0 , 0^0&#x3D;0 不相同二进制位 ^ 运算结果是1。1^0&#x3D;1 , 0^1&#x3D;1 ~ 正数取反，各二进制码按补码各位取反 负数取反，各二进制码按补码各位取反 特别说明： 位运算符操作都是整型数据 &lt;&lt;：在一定范围内，每向左移1位，相当于 *2 &gt;&gt;：在一定范围内，每向右移1位，相当于 &#x2F;2 6.6 三元运算符格式: (条件表达式)?表达式1：表达式2； ？如果为true，运算后的结果是表达式1；为false，运算后的结果是表达式2 表达式1和表达式2为同种类型 三元运算符与if-else的联系与区别： 三元运算符可简化if-else语句 三元运算符要求必须返回一个结果。 if后的代码块可有多个语句 运算符的优先级 特别注意： 结构：(条件表达式)? 表达式1 : 表达式2 说明：① 条件表达式的结果为boolean类型② 根据条件表达式真或假，决定执行表达式1，还是表达式2. 如果表达式为true，则执行表达式1。 如果表达式为false，则执行表达式2。③ 表达式1 和表达式2要求是一致的。④ 三元运算符可以嵌套使用 凡是可以使用三元运算符的地方，都可以改写为if-else反之，不成立。 如果程序既可以使用三元运算符，又可以使用if-else结构，那么优先选择三元运算符。 7. 程序流程控制顺序结构 程序从上到下逐行地执行，中间没有任何判断和跳转。 分支结构 根据条件，选择性地执行某段代码。 有if…else和switch-case两种分支语句。 循环结构 根据循环条件，重复性的执行某段代码。 有while、do…while、for三种循环语句。 注：JDK1.5提供了foreach循环，方便的遍历集合、数组元素。 7.1 顺序结构 7.2 分支结构if和switch语句很像，具体什么场景下，应用哪个语句呢？ 如果判断的具体数值不多，而且符合byte、short 、char、int、String、枚举等几 种类型。虽然两个语句都可以使用，建议使用swtich语句。因为效率稍高。 其他情况：对区间判断，对结果为boolean类型判断，使用if，if的使用范围更广。 也就是说，使用switch-case的，都可以改写为if-else。反之不成立。 7.2.1 if-else结构分支结构：if-else使用说明 条件表达式必须是布尔表达式（关系表达式或逻辑表达式）、布尔变量 语句块只有一条执行语句时，一对{}可以省略，但建议保留 if-else语句结构，根据需要可以嵌套使用 当if-else结构是“多选一”时，最后的else是可选的，根据需要可以省略 当多个条件是“互斥”关系时，条件判断语句及执行语句间顺序无所谓 当多个条件是“包含”关系时，“小上大下 &#x2F; 子上父下” if语句的三种格式： 123if(条件表达式)&#123;执行代码块；&#125; 123456if(条件表达式)&#123;执行代码块1;&#125;else&#123;执行代码块2;&#125; 12345678910if(条件表达式1)&#123;执行代码块1;&#125;else if (条件表达式2)&#123;执行代码块2;&#125;……else&#123;执行代码块n;&#125; 说明： else 结构是可选的。 针对于条件表达式： 如果多个条件表达式之间是“互斥”关系(或没有交集的关系),哪个判断和执行语句声明在上面还是下面，无所谓。 如果多个条件表达式之间有交集的关系，需要根据实际情况，考虑清楚应该将哪个结构声明在上面。 如果多个条件表达式之间有包含的关系，通常情况下，需要将范围小的声明在范围大的上面。否则，范围小的就没机会执行了。 if-else结构是可以相互嵌套的。 如果if-else结构中的执行语句只有一行时，对应的一对{}可以省略的。但是，不建议大家省略。 7.2.2 switch-case结构switch语句有关规则： switch(表达式)中表达式的值必须是下述几种类型之一：byte，short， char，int，枚举 (jdk 5.0)，String (jdk **7.0)**； case子句中的值必须是常量，不能是变量名或不确定的表达式值； 同一个switch语句，所有case子句中的常量值互不相同； break语句用来在执行完一个case分支后使程序跳出switch语句块；如果没有break，程序会顺序执行到switch结尾 default子句是可任选的。同时，位置也是灵活的。当没有匹配的case时， 执行default 123456789101112131415switch(表达式)&#123; case 常量1: 语句1; // break; case 常量2: 语句2; // break;… …case 常量N: 语句N; // break;default: 语句; // break;&#125; 例如： 1234567891011121314151617pubic cass SwitchTest &#123; pubic static void main(String args[]) &#123; int i = 1; switch (i) &#123; case 0: System.out.printn(&quot;zero&quot;); break; case 1: System.out.printn(&quot;one&quot;); break; default: System.out.printn(&quot;default&quot;); break; &#125; &#125;&#125; 说明：① 根据switch表达式中的值，依次匹配各个case中的常量。一旦匹配成功，则进入相应case结构中，调用其执行语句。当调用完执行语句以后，则仍然继续向下执行其他case结构中的执行语句，直到遇到break关键字或此switch-case结构末尾结束为止。 ② break,可以使用在switch-case结构中，表示一旦执行到此关键字，就跳出switch-case结构 ③ switch结构中的表达式，只能是如下的6种数据类型之一：byte 、short、char、int、枚举类型(JDK5.0新增)、String类型(JDK7.0新增) ④ case 之后只能声明常量。不能声明范围。 ⑤ break关键字是可选的。 ⑥ default:相当于if-else结构中的else。default结构是可选的，而且位置是灵活的。 ⑦ 如果switch-case结构中的多个case的执行语句相同，则可以考虑进行合并。 如果前面满足条件的case语句中没有加break语句，仍然会执行后面的case语句中的代码，直到执行完所有的case语句才跳出switch-case结构。case语句中加了break时，一旦常量匹配到case语句，则跳出switch-case结构。 7.2.3拓展：Scanner类如何从键盘获取不同类型的变量：需要使用Scanner类 具体实现步骤：1.导包：import java.util.Scanner; 2.Scanner的实例化:Scanner scan = new Scanner(System.in); 3.调用Scanner类的相关方法（next() &#x2F; nextXxx()），来获取指定类型的变量 ​ nextDouble()，nextInt()，nextByte()，nextShort()，next()。 ​ 对于char型的获取，Scanner没有提供相关的方法。只能获取一个字符串 例如： 123456789101112131415161718192021222324252627282930313233341.导包import java.util.Scanner;class ScannerTest&#123; public static void main(String[] args)&#123; //2.Scanner的实例化 Scanner scan = new Scanner(System.in); //3.调用Scanner类的相关方法 System.out.println(&quot;请输入你的姓名：&quot;); String name = scan.next(); System.out.println(name); System.out.println(&quot;请输入你的芳龄：&quot;); int age = scan.nextInt(); System.out.println(age); System.out.println(&quot;请输入你的体重：&quot;); double weight = scan.nextDouble(); System.out.println(weight); System.out.println(&quot;你是否相中我了呢？(true/false)&quot;); boolean isLove = scan.nextBoolean(); System.out.println(isLove); //char型的获取，Scanner没有提供相关的方法。只能获取一个字符串 System.out.println(&quot;请输入你的性别：(男/女)&quot;); String gender = scan.next();//&quot;男&quot; //获取索引为0位置上的字符 char genderChar = gender.charAt(0); System.out.println(genderChar); &#125;&#125; 注意：需要根据相应的方法，来输入指定类型的值。如果输入的数据类型与要求的类型不匹配时，会报异常：InputMisMatchException 导致程序终止 7.3 循环结构循环结构 在某些条件满足的情况下，反复执行特定代码的功能 循环语句分类 for 循环 while 循环 do-while 循环 循环语句的四个组成部分 初始化部分(init_statement) 循环条件部分(test_exp) 循环体部分(body_statement) 迭代部分(alter_statement) 拓展： （无限循环）不在循环条件部分限制次数的结构：for(;;) 或 while(true) 结束循环有几种方式？ 方式一：循环条件部分返回false 方式二：在循环体中，执行break 7.3.1 for循环 语法格式 12345for(①初始化部分; ②循环条件部分; ④迭代部分)｛③循环体部分;｝ 例如： 123456789pubic cass Foroop &#123; pubic static void main(String args[]) &#123; int resut = 0; for (int i = 1; i &lt;= 100; i++) &#123; resut += i; &#125; System.out.printn(&quot;resut=&quot; + resut); &#125;&#125; 执行过程： ①-②-③-④-②-③-④-②-③-④-…..-② 说明： ②循环条件部分为boolean类型表达式，当值为false时，退出循环 ①初始化部分可以声明多个变量，但必须是同一个类型，用逗号分隔 ④可以有多个变量更新，用逗号分隔 易错： 12345int num = 1; for(System.out.print(&#x27;a&#x27;);num&lt;=3;System.out.print(&#x27;c&#x27;),num++)&#123; System.out.print(&#x27;b&#x27;);&#125;//输出结果：abcbcbc 7.3.2 while循环语法格式 12345①初始化部分while(②循环条件部分)｛ ③循环体部分; ④迭代部分;&#125; 例如： 123456789101112pubic cass whieoop &#123; pubic static void main(String args[]) &#123; int resut = 0; int i = 1; while (i &lt;= 100) &#123; resut += i; i++; &#125; System.out.printn(&quot;resut=&quot; + resut); &#125;&#125; 执行过程： ①**-②-③-④-②-③-④-②-③-④-…-**② 说明： 注意不要忘记声明④迭代部分。否则，循环将不能结束，变成死循环。 for循环和while循环可以相互转换 区别：for循环和while循环的初始化条件部分的作用范围不同。 7.3.3 do-while循环语法格式 12345①初始化部分;do&#123; ③循环体部分 ④迭代部分&#125;while(②循环条件部分); 例如： 123456789pubic cass Dowhieoop &#123; pubic static void main(String args[]) &#123; int resut = 0, i = 1; do &#123; resut += i; i++; &#125; while (i &lt;= 100); System.out.printn(&quot;resut=&quot; + resut);&#125; 执行过程： ①**-③-④-②-③-④-②-③-④-…②（与其他两个相比一开始多了“-③-**④”） 说明： do-while循环至少执行一次循环体。 while和for使用的比较多，do-while使用的比较少 7.4 嵌套循环（多重循环） 将一个循环放在另一个循环体内，就形成了嵌套循环。 其中，for ,while ,do…while均可以作为外层循环或内层循环。 实质上，嵌套循环就是把内层循环当成外层循环的循环体。当只有内层循环的 循环条件为false时，才会完全跳出内层循环，才可结束外层的当次循环，开 始下一次的循环。 设外层循环次数为m次，内层为n次，则内层循环体实际上需要执行m*n次。 技巧：外层循环控制行数，内层循环控制列数 7.5 关键字的使用7.5.1 break语句 break语句用于终止某个语句块的执行 123&#123; …… break;……&#125; break语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是 哪一层语句块 12345678abe1: &#123; …… abe2: &#123; ……abe3: &#123; …… break abe2; …… &#125; &#125; &#125; 例如： 12345678910pubic cass BreakTest&#123; pubic static void main(String args[])&#123; for(int i = 0; i&lt;10; i++)&#123; if(i==3) break; System.out.printn(&quot; i =&quot; + i); &#125; System.out.printn(&quot;Game Over!&quot;); &#125;&#125; 7.5.2 continue语句 continue只能使用在循环结构中 continue语句用于跳过其所在循环语句块的一次执行，继续下一次循环 continue语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环 12345678910pubic cass ContinueTest &#123; pubic static void main(String args[])&#123; for (int i = 0; i &lt; 100; i++) &#123; if (i%10==0) continue; System.out.printn(i); &#125; &#125;&#125; 特别说明： break只能用于switch语句和循环语句中。 continue 只能用于循环语句中。 二者功能类似，但continue是终止本次循环，break是终止本层循环。 break、continue之后不能有其他的语句，因为程序永远不会执行其后的语句。 标号语句必须紧接在循环的头部。标号语句不能用在非循环语句的前面。 第二章&gt;&gt;&gt;数组1. 数组的概述数组(Array)，是多个相同类型数据按一定顺序排列的集合，并使用一个名字命名，并通过编号的方式 对这些数据进行统一管理。 数组变量（引用类型）中要么存的是地址值，要么是数组元素默认初始值 数组的常见概念 数组名 下标(或索引) 元素 数组的长度 数组本身是引用数据类型，而数组中的元素可以是任何数据类型，包括 基本数据类型和引用数据类型。 创建数组对象会在内存中开辟一整块连续的空间，而数组名中引用的是 这块连续空间的首地址。 数组的长度一旦确定，就不能修改。 我们可以直接通过下标(或索引)的方式调用指定位置的元素，速度很快。 数组的分类： 按照维度：一维数组、二维数组、三维数组、… 按照元素的数据类型分：基本数据类型元素的数组、引用数据类型元素的数组（即对象数组） 2. 一维数组的使用一维数组的声明方式： type var[] 或 type[] var； 例如： 1234567int a[];int[] a1;double b[];String[] c; //引用类型变量数组 Java语言中声明数组时不能指定其长度(数组中元素的数) 易错写法：在[ ]中指定了长度的就不能后面加{ }了。 例如： int a[5]; //非法 定义并用运算符new为之分配空间后，才可以引用数组中的每个元素； 数组元素的引用方式：数组名[数组元素下标] 数组元素下标可以是整型常量或整型表达式。如a[3] , b[i] , c[6*i];}}} 数组元素下标从0开始；长度为n的数组合法下标取值范围: 0 —&gt;n-1；如int a[]&#x3D;new int[3]; 可引用的数组元素为a[0]、a[1]、a[2] 每个数组都有一个属性length指明它的长度，例如：a.length 指明数组a的长度(元素个数)。数组一旦初始化，其长度是不可变的。 2.1 初始化方法动态初始化：数组声明且为数组元素分配空间与赋值的操作分开进行 123456789101112// 标准写法① int[] arr = new int[3]; //指定长度为3arr[0] = 3;arr[1] = 9;arr[2] = 8;// 其他写法② String names[];names = new String[3]; //指定长度为3names[0] = “钱学森”;names[1] = “邓稼先”;names[2] = “袁隆平”; 静态初始化：在定义数组的同时就为数组元素分配空间并赋值。 12345678910// 标准写法① int arr[] = new int[]&#123; 3, 9, 8&#125;;// 如下都是其他写法② int[] arr = &#123;3,9,8&#125;;// 由于前面已经声明了String了，所以后面的new String[]可以省略，但是如果是动态写法的先声明然后换行赋值的，就不能省略③ String names[] = &#123;“李四光”,“茅以升”,“华罗庚”&#125; 12345678// 错误的写法：int[] arr1 = new int[];int[5] arr2 = new int[5];int[] arr3 = new int[3]&#123;1,2,3&#125;;// 其他正确的写法：int[] arr4 = &#123;1,2,3,4,5&#125;;//类型推断 数组是引用类型，它的元素相当于类的成员变量，因此数组一经分配空间，其中的每个元素也被按照成员变量同样的方式被隐式初始化，会有一个默认初始值。 123456public class Test &#123; public static void main(String argv[])&#123; int a[]= new int[5]; System.out.println(a[3]); //a[3]的默认值为0 &#125;&#125; 对于基本数据类型而言，默认初始化值各有不同 对于引用数据类型而言，默认初始化值为**null(**注意与0不同！) 2.2 内存简化结构 3. 二维数组对于二维数组的理解，我们可以看成是一维数组array1又作为另一个一维数组array2的元素而存在。其实，从数组底层的运行机制来看，其实没有多维数组。 3.1 初始化方法格式1（动态初始化）：int[][] arr = new int[3][2]; 定义了名称为arr的二维数组 二维数组中有3个一维数组 每一个一维数组中有2个元素 一维数组的名称分别为arr[0], arr[1], arr[2] 给第一个一维数组1脚标位赋值为78写法是：arr[0][1] &#x3D; 78; 格式2（动态初始化）：int[][] arr = new int[3][]; 二维数组中有3个一维数组。 每个一维数组都是默认初始化值null (注意：区别于格式1) 可以对这个三个一维数组分别进行初始化 arr[0] &#x3D; new int[3]; arr[1] &#x3D; new int[1]; arr[2] &#x3D; new int[2]; 注： int[][]arr &#x3D; new int[][3]; &#x2F;&#x2F;非法 格式3（静态初始化）：int[][] arr = new int[][]&#123;&#123;3,8,2&#125;,&#123;2,7&#125;,&#123;9,0,1,6&#125;&#125;; 定义一个名称为arr的二维数组，二维数组中有三个一维数组 每一个一维数组中具体元素也都已初始化 第一个一维数组 arr[0] &#x3D; {3,8,2}; 第二个一维数组 arr[1] &#x3D; {2,7}; 第三个一维数组 arr[2] &#x3D; {9,0,1,6}; 第三个一维数组的长度表示方式：arr[2].length; 12345678// 错误写法String[][] arr4 = new String[][4];String[4][3] arr5 = new String[][];int[][] arr6 = new int[4][3]&#123;&#123;1,2,3&#125;,&#123;4,5&#125;,&#123;6,7,8&#125;&#125;;// 其他正确的写法int[] arr4[] = new int[][]&#123;&#123;1,2,3&#125;,&#123;4,5,9,10&#125;,&#123;6,7,8&#125;&#125;;int[] arr5[] = &#123;&#123;1,2,3&#125;,&#123;4,5&#125;,&#123;6,7,8&#125;&#125;; 3.2 内存解析 总结： 规定：二维数组分为外层数组的元素，内层数组的元素 int[][] arr = new int[4][3]; 外层元素：arr[0], arr[1]等 内层元素：arr[0][0], arr[1][2]等 数组元素的默认初始化值 ： 针对于初始化方式一： int[][] arr = new int[4][3]; 外层元素的初始化值为：地址值 内层元素的初始化值为：与一维数组初始化情况相同 针对于初始化方式二： int[][] arr = new int[4][]; 外层元素的初始化值为：null 内层元素的初始化值为：不能调用，否则报错。 4. 数组中涉及到的常见算法 数组元素的赋值(杨辉三角、回形数等) 数值型数组中元素的最大值、最小值、平均数、总和等 数组的复制、反转、查找(线性查找、二分法查找) （复制是创建新的数组，反转是在它本身中进行操作） （*）数组元素的排序算法 4.1 复制操作赋值array2变量等于array1，不能称作数组的复制 array1和array2地址值相同，都指向堆空间的唯一的一个数组实体 数组的复制 4.2 查找（或搜索）① 线性查找 ② 二分法查找：所查找的数组要是有序的 4.3 排序算法衡量排序算法的优劣： 时间复杂度：分析关键字的比较次数和记录的移动次数 空间复杂度：分析排序算法中需要多少辅助内存 稳定性：若两个记录A和B的关键字值相等，但排序后A、B的先后次序保 持不变，则称这种排序算法是稳定的。 排序算法分类：内部排序和外部排序 内部排序： 整个排序过程不需要借助于外部存储器（如磁盘等），所有排 序操作都在内存中完成。 外部排序： 参与排序的数据非常多，数据量非常大，计算机无法把整个排 序过程放在内存中完成，必须借助于外部存储器（如磁盘）。外部排序最 常见的是多路归并排序。可以认为外部排序是由多次内部排序组成。 十大内部排序算法： （选择排序） 直接选择排序 堆排序 （交换排序） 冒泡排序 快速排序 （插入排序） 直接插入排序 折半插入排序 Shell排序 归并排序 桶式排序 基数排列 算法的五大特征 说明：满足确定性的算法也称为：确定性算法。现在人们也关注更广泛的概念，例如 考虑各种非确定性的算法，如并行算法、概率算法等。另外，人们也关注并不要求终 止的计算描述，这种描述有时被称为过程（procedure）。 4.3.1 冒泡排序介绍： 冒泡排序的原理非常简单，它重复地走访过要排序的数列，一次比较两个元 素，如果他们的顺序错误就把他们交换过来。 排序思想： 比较相邻的元素。如果第一个比第二个大（升序），就交换他们两个。 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步 做完后，最后的元素会是最大的数。 针对所有的元素重复以上的步骤，除了最后一个。 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要 比较为止。 4.3.2 快速排序介绍： 快速排序通常明显比同为O(nlogn)的其他算法更快，因此常被采用，而且快 排采用了分治法的思想，所以在很多笔试面试中能经常看到快排的影子。可见， 掌握快排的重要性。 快速排序（Quick Sort）由图灵奖获得者Tony Hoare发明，被列为20世纪十 大 算法之一，是迄今为止所有内排序算法中速度最快的一种。冒泡排序的升级版， 交换排序的一种。快速排序的时间复杂度为O(nlog(n))。 排序思想： 从数列中挑出一个元素，称为”基准”（pivot）， 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值 大的摆在基准的后面（相同的数可以到任一边）。在这个分区结束之后， 该基准就处于数列的中间位置。这个称为分区（partition）操作。 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数 列排序。 递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好 了。虽然一直递归下去，但是这个算法总会结束，因为在每次的迭 （iteration）中，它至少会把一个元素摆到它最后的位置去。 各种内部排序方法性能比较： 从平均时间而言：快速排序最佳。但在最坏情况下时间性能不如堆排序和归 并排序。 从算法简单性看：由于直接选择排序、直接插入排序和冒泡排序的算法比较 简单，将其认为是简单算法。对于Shell排序、堆排序、快速排序和归并排序 算法，其算法比较复杂，认为是复杂排序。 从稳定性看：直接插入排序、冒泡排序和归并排序时稳定的；而直接选择排 序、快速排序、 Shell排序和堆排序是不稳定排序 从待排序的记录数n的大小看，n较小时，宜采用简单排序；而n较大时宜采 用改进排序。 排列算法的选择： 若n较小(如n≤50)，可采用直接插入或直接选择排序。 当记录规模较小时，直接插入排序较好；否则因为直接选择移动的记录数少于直接插入，应选直接选择排序为宜。 若文件初始状态基本有序(指正序)，则应选用直接插入、冒泡或随机的快速排序为宜； 若n较大，则应采用时间复杂度为O(nlgn)的排序方法：快速排序、堆排序或 归并排序。 5. Arrays工具类的使用java.util.Arrays类即为操作数组的工具类，包含了用来操作数组（比如排序和搜索）的各种方法。 1 boolean equals(int[] a,int[] b) 判断两个数组是否相等。 2 String toString(int[] a) 输出数组信息。 3 void fill(int[] a,int val) 将指定值填充到数组之中。 4 void sort(int[] a) 对数组进行排序。 5 int binarySearch(int[] a,int key) 对排序后的数组进行二分法检索指定的值。 6. 数组使用中的常见异常数组脚标越界异常**(ArrayIndexOutOfBoundsException)** 访问到了数组中的不存在的脚标时发生。 123int[] arr = new int[2]; System.out.println(arr[2]); System.out.println(arr[-1]); 空指针异常**(NullPointerException)** arr引用没有指向实体，却在操作实体中的元素时。 12345678910111213141516int[] arr = null;System.out.println(arr[0]);//情况一：int[] arr1 = new int[]&#123;1,2,3&#125;;arr1 = null;System.out.println(arr1[0]); //情况二：int[][] arr2 = new int[4][];System.out.println(arr2[0][0]); //情况三：String[] arr3 = new String[]&#123;&quot;AA&quot;,&quot;BB&quot;,&quot;CC&quot;&#125;;arr3[0] = null;System.out.println(arr3[0].toString()); 第三章&gt;&gt;&gt;面向对象基础学习面向对象内容的三条主线 Java类及类的成员 面向对象的三大特征 其它关键字 面向对象的思想概述 程序员从面向过程的执行者转化成了面向对象的指挥者 面向对象分析方法分析问题的思路和步骤： 根据问题需要，选择问题所针对的现实世界中的实体。 从实体中寻找解决问题相关的属性和功能，这些属性和功能就形成了概念世界中的类。 把抽象的实体用计算机语言进行描述，形成计算机世界中类的定义。即借助某种程序 语言，把类构造成计算机能够识别和处理的数据结构。 将类实例化成计算机世界中的对象。对象是计算机世界中解决问题的最终工具。 面向对象的三大特征 封装 (Encapsulation) 继承 (Inheritance) 多态 (Polymorphism) 1. 面向过程与面向对象面向过程(POP) 与 面向对象(OOP) 二者都是一种思想，面向对象是相对于面向过程而言的。 面向过程，强调的是功能行为，以函数为最小单位，考虑怎么做。 面向对象，将功能封装进对 象，强调具备了功能的对象，以类&#x2F;对象为最小单位，考虑谁来做。 面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则，如抽象、分类、继承、聚合、多态等。 例子（人把大象装进冰箱）： 2. 类和对象 Java语言的基本元素：类和对象 **类(Class)和对象(Object)**是面向对象的核心概念。 类是对一类事物的描述，是抽象的、概念上的定义 对象是实际存在的该类事物的每个个体，因而也称为实例(instance)。 Java类及类的成员 属 性：对应类中的成员变量 Field &#x3D; 属性 &#x3D; 成员变量 &#x3D; 域、字段 行 为：对应类中的成员方法 Method &#x3D; (成员)方法 &#x3D; 函数 类的语法格式 1234567891011121314修饰符 class 类名 &#123;属性声明;方法声明;&#125;说明：修饰符public：类可以被任意访问 类的正文要用&#123; &#125;括起来 举例：public class Person&#123; private int age ; //声明私有变量 age public void showAge(int i) &#123; //声明方法showAge( ) age = i; &#125;&#125; 创建Java自定义类的步骤： 定义类（考虑修饰符、类名） 编写类的属性（考虑修饰符、属性类型、属性名、初始化值） 编写类的方法（考虑修饰符、返回值类型、方法名、形参等） 3. 对象的创建和使用类和对象的使用（面向对象思想落地的实现）： 创建类，设计类的成员 创建类的对象 通过“对象.属性”或“对象.方法”调用对象的结构 创建类的对象 &#x3D; 类的实例化 &#x3D; 实例化类 创建对象语法： 类名 对象名 = new 类名(); 使用 对象名.对象成员 的方式访问对象成员（属性和方法） 说明： 如果创建了一个类的多个对象，对于类中定义的属性，每个对 象都拥有各自的一套 副本，且互不干扰。 类的访问机制： 在一个类中的访问机制：类中的方法可以直接访问类中的成员变量。 （例外：static方法访问非static，编译不通过。） 在不同类中的访问机制：先创建要访问类的对象，再用对象访问类中 定义 的成员。 3.1 内存解析 堆（Heap），此内存区域的唯一目的 就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在 Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配。 通常所说的栈（Stack），是指虚拟机栈。虚拟机栈用于存储局部变量等。 局部变量表存放了编译期可知长度的 各种基本数据类型（boolean、byte、 char 、 short 、 int 、 float 、 long 、 double）、对象引用（reference类型， 它不等同于对象本身，是对象在堆内 存的首地址）。方法执行完，自动释放。 方法区（Method Area），用于存储已被虚拟机加载的类信息、常量、静态 变量、即时编译器编译后的代码等数 据。 4. 属性(field)语法格式： 修饰符 数据类型 属性名 = 初始化值; 变量的分类：成员变量与局部变量 在方法体外，类体内声明的变量称为成员变量。 在方法体内部声明的变量称为局部变量。 4.1 局部变量和属性二者在初始化值方面的异同: 同：都有生命周期 异：局部变量除形参外，均需显式初始化。 成员变量 局部变量 声明的位置 直接声明在类中 方法形参或内部、代码块内、构造器内等 修饰符 private、public、static、final等 不能用权限修饰符修饰，可以用final修饰 初始化值 有默认初始化值 没有默认初始化值，必须显式赋值，方可使用 内存加载位置 堆空间 或 静态域内 栈空间 成员变量和局部变量的内存位置 说明：方法中声明的变量、形参是生成在栈空间里面的，类中的属性（成员变量）是生成在堆空间里面！！！ 对象属性的默认初始化赋值 当一个对象被创建时，会对其中各种类型的成员变量自动进行初始化赋值。除了 基本数据类型之外的变量类型都是引用类型，如上面的Person及前面讲过的数 组。 属性 总结： 属性（成员变量） vs 局部变量 相同点： 定义变量的格式：数据类型 变量名 &#x3D; 变量值 先声明，后使用 变量都有其对应的作用域 不同点： 在类中声明的位置的不同 属性： 直接定义在类的一对{}内 局部变量： 声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量 关于权限修饰符的不同 属性： 可以在声明属性时，指明其权限，使用权限修饰符。 常用的权限修饰符：private、public、缺省、protected —&gt;封装性 目前，大家声明属性时，都使用缺省就可以了。 局部变量： 不可以使用权限修饰符。 默认初始化值的情况： 属性： 类的属性，根据其类型，都有默认初始化值。 整型（byte、short、int、long）：0 浮点型（float、double）：0.0 字符型（char）：0 （或’\\u0000’） 布尔型（boolean）：false 引用数据类型（类、数组、接口）：null 局部变量： 没有默认初始化值。 意味着，我们在调用局部变量之前，一定要显式赋值。 特别地：形参在调用时，我们赋值即可。 在内存中加载的位置： 属性： 加载到堆空间中 （非static） 局部变量： 加载到栈空间 说明： 修饰符 常用的权限修饰符有：private、缺省、protected、public 其他修饰符：static、final (暂不考虑) 数据类型 任何基本数据类型(如int、boolean) 或 任何引用数据类型。 属性名 属于标识符，符合命名规则和规范即可。 1234public class Person&#123; private int age; //声明private变量 age public String name = “Lila”; //声明public变量 name&#125; 5. 方法（method）什么是方法(method、函数)： 方法是类或对象行为特征的抽象，用来完成某个功能操作。在某些语言中 也称为函数或过程。 将功能封装为方法的目的是，可以实现代码重用，简化代码 Java里的方法不能独立存在，所有的方法必须定义在类里。 123456789public class Person&#123; private int age; public int getAge() &#123; //声明方法getAge() return age; &#125; public void setAge(int i) &#123; //声明方法setAge age = i; //将参数i的值赋给类的成员变量age &#125;&#125; 关于权限修饰符：默认方法的权限修饰符先都使用public Java规定的4种权限修饰符：private、public、缺省、protected 5.1 方法的声明格式1234修饰符 返回值类型 方法名（参数类型 形参1, 参数类型 形参2,…）｛ 方法体程序代码 return 返回值;&#125; 修饰符：public,缺省,private, protected等 返回值类型： 没有返回值：void。 有返回值，声明出返回值的类型。与方法体中“return 返回值”搭配使用方 法名：属于标识符，命名时遵循标识符命名规则和规范，“见名知意” 形参 列表：可以包含零个，一个或多个参数。多个参数时，中间用“**,**”隔开 返回 值。方法在执行完毕后返还给调用它的程序的数据。 return关键字的使用： 使用范围：使用在方法体中 作用： ① 结束方法 ② 针对于有返回值类型的方法，使用”return 数据”方法返回所要的数据。 注意点：return关键字后面不可以声明执行语句。 方法的调用 方法通过方法名被调用，且只有被调用才会执行。 方法调用的过程分析 注 意： 方法被调用一次，就会执行一次 没有具体返回值的情况，返回值类型用关键字void表示，那么方法体中可 以不必使用return语句。如果使用，仅用来结束方法。 定义方法时，方法的结果应该返回给调用者，交由调用者处理。 方法中只能调用方法或属性，不可以在方法内部定义方法。 5.2 匿名方法匿名对象的使用 理解：我们创建的对象，没有显式的赋给一个变量名。即为匿名对象 特征：匿名对象只能调用一次。 1234567891011121314151617181920212223242526272829303132333435363738394041424344public class InstanceTest &#123; public static void main(String[] args) &#123; Phone p = new Phone(); // 匿名对象// new Phone().sendEmail();// new Phone().playGame(); new Phone().price = 1999; new Phone().showPrice();//0.0 PhoneMall mall = new PhoneMall();// mall.show(p); --&gt; 不使用匿名对象 // 匿名对象的使用 mall.show(new Phone()); &#125;&#125;class PhoneMall&#123; public void show(Phone phone)&#123; phone.sendEmail(); phone.playGame(); &#125; &#125;class Phone&#123; double price; //价格 public void sendEmail()&#123; System.out.println(&quot;发送邮件&quot;); &#125; public void playGame()&#123; System.out.println(&quot;玩游戏&quot;); &#125; public void showPrice()&#123; System.out.println(&quot;手机价格为：&quot; + price); &#125; 6 再谈方法6.1 方法的重载(overload)重载的概念 在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数 类型不同即可。 重载的特点 与返回值类型无关，只看参数列表，且参数列表必须不同。(参数个数或参数类型)。调用时，根据方法参数列表的不同来区别。 重载示例 123456//返回两个整数的和int add(int x,int y)&#123;return x+y;&#125;//返回三个整数的和int add(int x,int y,int z)&#123;return x+y+z;&#125;//返回两个小数的和double add(double x,double y)&#123;return x+y;&#125; 1234567891011public class PrintStream &#123; public static void print(int i) &#123;……&#125; public static void print(float f) &#123;……&#125; public static void print(String s) &#123;……&#125; public static void main(String[] args) &#123; print(3); print(1.2f); print(&quot;hello!&quot;); &#125;&#125; 方法的重载 总结： 方法的重载（overload） 定义： 在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。 “两同一不同”:同一个类、相同方法名 参数列表不同：参数个数不同，参数类型不同 举例： Arrays类中重载的sort() / binarySearch() 判断是否重载： 严格按照方法重载的定义来判断 跟方法的权限修饰符、返回值类型、形参变量名、方法体都没有关系！ 在通过对象调用方法时，如何确定某一个指定的方法： 方法名 —&gt; 参数列表 6.2 可变个数的参数JavaSE 5.0 中提供了**Varargs(variable number of arguments)**机制，允许直接定义能和多个实参相匹配的形参。从而，可以用一种更简单的方式，来传递个数可 变的实参。 说明： 声明格式：方法名(参数的类型名 …参数名) 可变参数：方法参数部分指定类型的参数个数是可变多个：0个，1个或多个 可变个数形参的方法与同名的方法之间，彼此构成重载 可变参数方法的使用与方法参数部分使用数组是一致的， 形参可以传入一个数组，也可以多个值分别传入 方法的参数部分有可变形参，需要放在形参声明的最后 public void show(int i, String ...strs)&#123;&#125; 在一个方法的形参位置，最多只能声明一个可变个数形参 6.3 方法参数的值传递机制方法，必须由其所在类或对象调用才有意义。若方法含有参数： 形参：方法声明时的参数 实参：方法调用时实际传给形参的参数值 Java的实参值如何传入方法呢？ Java里方法的参数传递方式只有一种：值传递。 即将实际参数值的副本 （复制品）传入方法内，而参数本身不受影响。 形参是基本数据类型：将实参基本数据类型变量的“数据值”传递给形参 形参是引用数据类型：将实参引用数据类型变量的“地址值”传递给形参 方法参数的值传递机制 总结： 关于变量的赋值： 如果变量是基本数据类型，此时赋值的是变量所保存的数据值。 如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值。 1234567//基本数据类型int m = 10;int n = m; System.out.println(&quot;m = &quot; + m + &quot;, n = &quot; + n);// m = 10, n = 10n = 20;System.out.println(&quot;m = &quot; + m + &quot;, n = &quot; + n);// m = 10, n = 20 1234567891011//引用数据类型Person o1 = new Person();p1.personId = 1001;Person p2 = p1;//赋值以后，o1和o2的地址值相同，都指向了堆空间中同一个对象实体。// p1.personId = p2.personId = 1001System.out.println(&quot;o1.personId = &quot; + p1.personId + &quot;,p2.personId = &quot; +p2.personId);p2.personId = 1002;// p1.personId = p2.personId = 1002System.out.println(&quot;p1.personId = &quot; + p1.personId + &quot;,p2.personId = &quot; +p2.personId); 方法的形参的传递机制：值传递 形参：方法定义时，声明的小括号内的参数 实参：方法调用时，实际传递给形参的数据 值传递机制： 如果参数是基本数据类型，此时实参赋给形参的是实参真实存储的数据值。 如果参数是引用数据类型，此时实参赋给形参的是实参存储数据的地址值。 12345678910111213141516171819202122//基本数据类型--无法实现public class ValueTransferTest1 &#123; public static void main(String[] args) &#123; int m = 10; int n = 20; System.out.println(&quot;m = &quot; + m + &quot;, n = &quot; + n); ValueTransferTest1 test = new ValueTransferTest1(); test.swap(m, n); //m = 10, n = 20 --&gt; 因为swap中的形参m，n，执行完之后就出栈了（销毁了），所以下列的变量m， n是main方法里面的m，n System.out.println(&quot;m = &quot; + m + &quot;, n = &quot; + n); &#125; //交换两个变量的值的操作 public void swap(int m,int n)&#123; int temp = m ; m = n; n = temp; &#125;&#125; 说明： 局部变量（方法中声明的变量、形参）是生成在栈空间里面的，基本数据类型变量存储的是数据值，引用类型存储的是地址值。 成员变量（类中的属性）是生成在堆空间里面，new出来的类对象和引用类型对象等存储的是地址值和一些相关的属性值。 方法里面声明的变量的“先进后出”的特性： 即栈空间中的变量先加载出来，然后堆空间new出来的对象再加载出来，根据地址值对应，执行完之后，方法中声明的变量在方法执行完之后就先出栈了，紧接着如果堆空间中new出来的对象的地址值没有与栈空间中的变量对应的地址值来指向，然后堆中的的此结构便也被当作垃圾被回收。 6.4 递归(recursion)方法 递归方法：一个方法体内调用它自身。 方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执 行无须循环控制。 递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。 例：汉诺塔、斐波那契数列、阶乘、快速排列 7. 封装与隐藏我们程序设计追求“高内聚，低耦合”。 高内聚 ：类的内部数据操作细节自己完成，不允许外部干涉； 低耦合 ：仅对外暴露少量的方法用于使用。 隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露 的暴露出来。这就是封装性的设计思想。 7.1 信息的封装和隐藏Java中通过将类的结构声明为私有的(private)，再提供公共的（public）方法：**getXxx()和setXxx()**实现对该属性的操作，以实现下述目的： 隐藏一个类中不需要对外提供的实现细节； 使用者只能通过事先定制好的方法来访问数据，可以方便地加入控制逻辑， 限制对属性的不合理操作； 便于修改，增强代码的可维护性； 7.2 四种权限修饰符Java权限修饰符public、protected、(缺省)、private置于类的成员定义前，用来限定对象对该类成员的访问权限。 修饰符 类内部 同一个包 不同包的子类 同一个工程 private Yes (缺省) Yes Yes protected Yes Yes Yes public Yes Yes Yes Yes 对于class的权限修饰只可以用public和default(缺省)。 public类可以在任意地方被访问。 default类只可以被同一个包内部的类访问。 封装性 总结： 封装的（private）私有属性和私有方法只能在类里面调用，不能在类以外的域调用。 一、问题的引入： 当我们创建一个类的对象以后，我们可以通过”对象.属性”的方式，对对象的属 性进行赋值。这里，赋值操作要受到属性的数据类型和存储范围的制约。除此 之外，没有其他制约条件。但是，在实际问题中，我们往往需要给属性赋值 加入额外的限制条件。这个条件就不能在属性声明时体现，我们只能通过方法 进行限制条件的添加。（比如：setlegs()） 同时，我们需要避免用户再使用”对象.属性”的方式对属性进行赋值。则需要将属性声明为私有的(private). –&gt;此时，针对于属性就体现了封装性。 二、封装性的体现： 我们将类的属性xxx私有化(private),同时，提供公共的(public)方法来获取(getXxx)和设置(setXxx)此属性的值（封装性体现的其中一种） 拓展：封装性的体现：① 不对外暴露的私有属性 ② 不对外暴露的私有的方法 ③ 单例模式 … 三、封装性的体现，需要权限修饰符来配合。 Java规定的4种权限（从小到大排列）：private、缺省、protected 、public 4种权限可以用来修饰类及类的内部结构：属性、方法、构造器、内部类 具体的，4种权限都可以用来修饰类的内部结构：属性、方法、构造器、内部类 修饰类的话，只能使用：缺省、public Java提供了4种权限修饰符来修饰类及类的内部结构，体现类及类的内部结构在被调用时的可见性的大小。 8. 构造器构造器的特征 它具有与类相同的名称 它不声明返回值类型。（与声明为void不同） 不能被static、final、synchronized、abstract、native修饰，不能有 return语句返回值 构造器的作用：创建对象；给对象进行初始化 如：Order o = new Order(); Person p = new Person(“Peter”,15); 如同我们规定每个“人”一出生就必须先洗澡，我们就可以在“人”的 构造器中加入完成“洗澡”的程序代码，于是每个“人”一出生就会自 动完成“洗澡”，程序就不必再在每个人刚出生时一个一个地告诉他们 要“洗澡”了。 语法格式： 1234567891011121314151617181920修饰符 类名 (参数列表) &#123;初始化语句；&#125;// 例如：public class Animal &#123; private int legs; // 构造器 public Animal() &#123; legs = 4; &#125; public void setegs(int i) &#123; legs = i; &#125; public int getegs() &#123; return legs; &#125;&#125;// 说明：// 创建Animal类的实例：Animal a = new Animal();// 调用构造器，将legs初始化为4。 根据参数不同，构造器可以分为如下两类： 隐式无参构造器（系统默认提供） 显式定义一个或多个构造器（无参、有参） 注 意： Java语言中，每个类都至少有一个构造器 默认构造器的修饰符与所属类的修饰符一致 一旦显式定义了构造器，则系统不再提供默认构造器 一个类可以创建多个重载的构造器 父类的构造器不可被子类继承 构造器 总结： 一、构造器的作用： 创建对象 初始化对象的信息 二、说明： 如果没有显式的定义类的构造器的话，则系统默认提供一个空参的构造器 定义构造器的格式：权限修饰符 类名(形参列表)&#123;&#125; 一个类中定义的多个构造器，彼此构成重载 一旦我们显式的定义了类的构造器之后，系统就不再提供默认的空参构造器 一个类中，至少会有一个构造器。 8.1 构造器的重载 构造器一般用来创建对象的同时初始化对象。 123456class Person&#123; String name; int age; public Person(String n , int a)&#123;name=n;age=a;&#125;&#125; 构造器重载使得对象的创建更加灵活，方便创建各种不同的对象。 构造器重载举例： 12345public class Person&#123; public Person(String name, int age, Date d)&#123;this(name,age);…&#125; public Person(String name, int age) &#123;…&#125; public Person(String name, Date d) &#123;…&#125; public Person()&#123;…&#125; 构造器重载，参数列表必须不同 8.2 属性赋值过程截止到目前，我们讲到了很多位置都可以对类的属性赋值。现总结这几个位 置，并指明赋值的先后顺序。 赋值的位置： ① 默认初始化 ② 显式初始化 ③ 构造器中初始化 ④ 通过“对象.属性“或“对象.方法”的方式赋值 赋值的先后顺序： ① - ② - ③ - ④ 8.3 拓展：JavaBeanJavaBean是一种Java语言写成的可重用组件。 所谓javaBean，是指符合如下标准的Java类： 类是公共的 有一个无参的公共的构造器 有属性，且有对应的get、set方法 用户可以使用JavaBean将功能、处理、值、数据库访问和其他任何可以 用Java代码创造的对象进行打包，并且其他的开发者可以通过内部的JSP 页面、Servet、其他JavaBean、appet程序或者应用来使用这些对象。用 户可以认为JavaBean提供了一种随时随地的复制和粘贴的功能，而不用关 心任何改变。 代码示例： 123456789101112131415161718public class JavaBean &#123; private String name; // 属性一般定义为private private int age; public JavaBean() &#123; &#125; public int getAge() &#123; return age; &#125; public void setAge(int a) &#123; age = a; &#125; public String getName() &#123; return name; &#125; public void setName(String n) &#123; name = n; &#125;&#125; 8.4 拓展：UM类图 9. this的使用在Java中，this关键字比较难理解，它的作用和其词义很接近。 它在方法内部使用，即这个方法所属对象的引用； 它在构造器内部使用，表示该构造器正在初始化的对象。 this 可以调用类的属性、方法和构造器 什么时候使用this关键字呢？ 当在方法内需要用到调用该方法的对象时，就用this。 具体的：我们可以用this来区分属性和局部变量。 比如：this.name &#x3D; name; 使用this调用属性、方法、构造器 1234567891011121314151617181920212223242526272829class Person&#123; // 定义Person类 private String name ; private int age ; // 调用构造器 public Person()&#123; //无参构造器 System.out.println(&quot;新对象实例化&quot;) ; &#125; public Person(String name)&#123; this(); // 调用本类中的无参构造器 this.name = name ; &#125; public Person(String name,int age)&#123; this(name) ; // 调用有一个参数的构造器 this.age = age; &#125; public Person(String name,int age)&#123; this.name = name ; this.age = age ; &#125; // 调用方法 public void getInfo()&#123; System.out.println(&quot;姓名：&quot; + name) ; this.speak(); &#125; public void speak()&#123; System.out.println(“年龄：” + this.age); &#125;&#125; 在任意方法或构造器内，如果使用当前类的成员变量或成员方法可以在其 前面添加this， 增强程序的阅读性。不过，通常我们都习惯省略this。 当形参与成员变量同名时， 如果在方法内或构造器内需要使用成员变量， 必须添加this来表明该变量是类的成员变量 使用this访问属性和方法时， 如果在本类中未找到，会从父类中查找 this可以作为一个类中构造器相互调用的特殊格式 this关键字 总结： this关键字的使用： this可以用来修饰、调用：属性、方法、构造器 this修饰属性和方法： this理解为：当前对象 或 当前正在创建的对象 ① 在类的方法中，我们可以使用”this.属性”或”this.方法”的方式，调用当前 对象属性或方法。但是，通常情况下，我们都选择省略”this.”。特殊情况 下，如果方法的形参和类的属性同名时，我们必须显式的使用”this.变量”的 方式，表明此变量是属性，而非形参。 ② 在类的构造器中，我们可以使用”this.属性”或”this.方法”的方式，调用当 前正在创建的对象属性或方法。但是，通常情况下，我们都选择省 略”this.”。特殊情况下，如果构造器的形参和类的属性同名时，我们必须显 式的使用”this.变量”的方式，表明此变量是属性，而非形参。 this调用构造器 ① 我们在类的构造器中，可以显式的使用”this(形参列表)”方式，调用本类中指定的其他构造器 ② 构造器中不能通过”this(形参列表)”方式调用自己 ③ 如果一个类中有n个构造器，则最多有 n - 1构造器中使用了”this(形参列表)” ④ 规定：”this(形参列表)”必须声明在当前构造器的首行 ⑤ 构造器内部，最多只能声明一个”this(形参列表)”，用来调用其他的构造器（反证法：如果声明了两个，那么其中一个就不在首行，所以不成立） 10. packag关键字package语句作为Java源文件的第一条语句，指明该文件中定义的类所在的包。(若缺省该语句，则指定为无名包)。它的格式为： package 顶层包名.子包名 ; 包对应于文件系统的目录，package语句中，用 “**.” 来指明包(目录)**的层次； 包通常用小写单词标识。通常使用所在公司域名的倒置：com.atguigu.xxx 举例： 12345678pack1\\pack2\\PackageTest.javapackage pack1.pack2; //指定类PackageTest属于包pack1.pack2public class PackageTest&#123; public void display()&#123; System.out.println(&quot;in method display()&quot;); &#125;&#125; package关键字 总结： 为了更好的实现项目中类的管理，提供包的概念 使用package声明类或接口所属的包，声明在源文件的首行 包，属于标识符，遵循标识符的命名规则、规范(xxxyyyzzz)、“见名知意” 每”.”一次，就代表一层文件目录。 补充： 同一个包下，不能命名同名的接口、类。 不同的包下，可以命名同名的接口、类。 10.1 拓展：MVC设计模式 10.2 JDK中主要的包的介绍 11. import关键字为使用定义在不同包中的Java类，需用import语句来引入指定包层次下所需要的类或全部类(.*)。import语句告诉编译器到哪里去寻找类。 语法格式： import 包名. 类名; 举例： 123456import pack1.pack2.Test; public class PackTest&#123; //import pack1.pack2.*;表示引入pack1.pack2包中的所有结构 public static void main(String args[])&#123; Test t = new Test(); //Test类在pack1.pack2包中定义 t.display(); &#125;&#125; 注意： 在源文件中使用import显式的导入指定包下的类或接口 声明在包的声明和类的声明之间。 如果需要导入多个类或接口，那么就并列显式多个import语句即可 举例：可以使用java.util.*的方式，一次性导入util包下所有的类或接口。 如果导入的类或接口是java.lang包下的，或者是当前包下的，则可以省略此import语句。 如果在代码中使用不同包下的同名的类。那么就需要使用类的全类名的方式指明调用的 是哪个类。 如果已经导入java.a包下的类。那么如果需要使用a包的子包下的类的话，仍然需要导入。 import static组合的使用：调用指定类或接口下的静态的属性或方法 第四章&gt;&gt;&gt;面向对象进阶1. 继承性(inheritance) 为什么要有继承？ 多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中， 那么多个类无需再定义这些属性和行为，只要继承那个类即可。 此处的多个类称为**子类(派生类)，单独的这个类称为父类(基类 或超类)**。可以理解为:“子类 is a 父类” 子类、派生类、subclass 父类、超类、基类、superclass 类继承语法规则: class Subclass extends Superclass&#123; &#125; 作用： 继承的出现减少了代码冗余，提高了代码的复用性。 继承的出现，更有利于功能的扩展。 继承的出现让类与类之间产生了关系，提供了多态的前提。 不要仅为了获取其他类中某个功能而去继承 子类继承了父类，就继承了父类的方法和属性。 在子类中，可以使用父类中定义的方法和属性，也可以创建新的数据和 方法。 在Java 中，继承的关键字用的是“extends”，即子类不是父类的子集， 而是对父类的“扩展”。 关于继承的规则： 子类不能直接访问父类中私有的(private)的成员变量和方法。 Java只支持单继承和多层继承，不允许多重继承 一个子类只能有一个父类 一个父类可以派生出多个子类 12class SubDemo extends Demo&#123; &#125;//okclass SubDemo extends Demo1,Demo2...//error 继承性 总结: 体现：一旦子类A继承父类B以后，子类A中就获取了父类B中声明的所有的属性和方法。特别的，父类中声明为private的属性或方法，子类继承父类以后，仍然认为获取了父类中私有的结构。只有因为封装性的影响，使得子类不能直接调用父类的结构而已。 子类继承父类以后，还可以声明自己特有的属性或方法：实现功能的拓展。子类和父类的关系，不同于子集和集合的关系。 Java中关于继承性的规定： 一个类可以被多个子类继承。 Java中类的单继承性：一个类只能有一个父类 子父类是相对的概念。 子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类 子类继承父类以后，就获取了直接父类以及所有间接父类中声明的属性和方法 如果我们没有显式的声明一个类的父类的话，则此类继承于java.lang.Object类 所有的java类（除java.lang.Object类之外）都直接或间接的继承于java.lang.Object类 意味着，所有的java类具有java.lang.Object类声明的功能。 2. 方法的重写(override&#x2F;overwrite)定义：在子类中可以根据需要对从父类中继承来的方法进行改造，也称为方法的重置、覆盖。在程序执行时，子类的方法将覆盖父类的方法。 要求： 子类重写的方法必须和父类被重写的方法具有相同的方法名称、参数列表 子类重写的方法的返回值类型不能大于父类被重写的方法的返回值类型 子类重写的方法使用的访问权限不能小于父类被重写的方法的访问权限 子类不能重写父类中声明为private权限的方法 子类方法抛出的异常不能大于父类被重写方法的异常 注意： 子类与父类中同名同参数的方法必须同时声明为非static的(即为重写)，或者同时声明为static的（不是重写）。因为static方法是属于类的，子类无法覆盖父类的方法。 方法的重写 总结： 一、 重写：子类继承父类以后，可以对父类中同名同参数的方法，进行覆盖操作 二、应用：重写以后，当创建子类对象以后，通过子类对象调用子父类中的同名同参数的方法时，实际执行的是子类重写父类的方法。 三、重写的规定： 方法的声明： 123权限修饰符 返回值类型 方法名(形参列表) throws 异常的类型&#123; //方法体&#125; 约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法 ① 子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同 ② 子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符 特殊情况：子类不能重写父类中声明为private权限的方法 ③ 返回值类型： 父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void 父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类 父类被重写的方法的返回值类型是基本数据类型(比如：double)，则子类重写的方法的返回值类型必须是相同的基本数据类型(必须也是double) ④ 子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型（具体放到异常处理时候讲） 子类和父类中的同名同参数的方法要么都声明为非static的（考虑重写），要么都声明为static的（不叫做重写）。 四、建议直接从父类中复制方法的声明然后再粘贴到子类中，或者在子类中输入方法名，然后调用快捷键补全 3. 四种访问权限修饰符 4. super 关键字在Java类中使用super来调用父类中的指定操作： super可用于访问父类中定义的属性 super可用于调用父类中定义的成员方法 super可用于在子类构造器中调用父类的构造器 注意： 尤其当子父类出现同名成员时，可以用super表明调用的是父类中的成员 super的追溯不仅限于直接父类 super和this的用法相像，this代表本类对象的引用，super代表父类的内存 空间的标识 4.1 调用父类构造器 子类中所有的构造器默认都会访问父类中空参数的构造器 当父类中没有空参数的构造器时，子类的构造器必须通过**this(参数列表)或者super(参数列表)**语句指定调用本类或者父类中相应的 构造器。同时，只能”二选一”，且必须放在构造器的首行 如果子类构造器中既未显式调用父类或本类的构造器，且父类中又没有无参的构造器，则编译出错 4.2 this和super的区别 No. 区别点 this super 1 访问属性 访问本类中的属性，如果本类没有此属性则从父类中继续查找 直接访问父类中的属性 2 调用方法 访问本类中的方法，如果本类没有此方法则从父类中继续查找 直接访问父类中的方法 3 调用构造器 调用本类构造器，必须放在构造器的首行 调用父类构造器，必须放在子类构造器的首行 this是先从本类中查找有没有相应的结构，如果没有则去父类中查找 super直接到父类中找相应的结构 如果对象调用类的结构时的前面省略了”this.”或者”super.”的时候，则默认现在本来中查找相应的结构名，如果没有找到，再去父类中查找。 super() 总结： 一、super理解为：父类的 二、super可以用来调用：属性、方法、构造器 三、super的使用：调用属性和方法 我们可以在子类的方法或构造器中。通过使用”super.属性”或”super.方法”的方式，显式的调用父类中声明的属性或方法。但是，通常情况下，我们习惯省略”super.” 特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用”super.属性”的方式，表明调用的是父类中声明的属性。 特殊情况：当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用”super.方法”的方式，表明调用的是父类中被重写的方法。 四、super调用构造器 我们可以在子类的构造器中显式的使用”super(形参列表)”的方式，调用父类中声明的指定的构造器 “super(形参列表)”的使用，必须声明在子类构造器的首行！ 我们在类的构造器中，针对于”this(形参列表)”或”super(形参列表)”只能二选一，不能同时出现 在构造器的首行，没有显式的声明”this(形参列表)”或”super(形参列表)”，则默认调用的是父类中空参的构造器：super() 在类的多个构造器中，至少有一个类的构造器中使用了”super(形参列表)”，调用父类中的构造器 情境： 如果一个父类中没有提供空参构造器，那么子类在声明空参构造器的时候会报错。因为一个类中如果没有声明构造器的话，那么会自动提供一个空参构造器，而如果在父类中只声明了含参构造器，而没有声明空参构造器时，则就不会默认再提供空参构造器了，所以此时子类中声明空参构造器的时候，由于首行默认是super()来调用父类的构造器，而此时父类没有空参构造器，则会报错。 解决方法：在父类中声明一个空参构造器，或者在子类中提供含参构造器 5. 子类对象实例化过程 继承性 总结： 从结果上来看：（继承性） 子类继承父类以后，就获取了父类中声明的属性或方法。 创建子类的对象，在堆空间中，就会加载所有父类中声明的属性。 从过程上来看： 当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，… 直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所有的父类的结构，所以才可以看到内存中有 父类中的结构，子类对象才可以考虑进行调用。 明确：虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象。 6. 多态性作用：可以减少方法的重载 多态性，是面向对象中最重要的概念，在Java中的体现：对象的多态性：父类的引用指向子类的对象 抽象类、接口使用肯定体现了多态性（抽象类、接口不能实例化） Java引用变量有两个类型：编译时类型和运行时类型。编译时类型由声明 该变量时使用的类型决定，运行时类型由实际赋给该变量的对象决定。 简称：编译时，看左边；运行时，看右边。 若编译时类型和运行时类型不一致，就出现了对象的多态性(Polymorphism) 多态情况下 “看左边”：看的是父类的引用（父类中不具备子类特有的方法） “看右边”：看的是子类的对象（实际运行的是子类重写父类的方法） 对象的多态 —在Java中,子类的对象可以替代父类的对象使用 一个变量只能有一种确定的数据类型 一个引用类型变量可能指向(引用)多种不同类型的对象 12345Person p = new Student();Object o = new Person();//Object类型的变量o，指向Person类型的对象o = new Student(); //Object类型的变量o，指向Student类型的对象 子类可看做是特殊的父类，所以父类类型的引用可以指向子类的对象：向上转型(upcasting)。 一个引用类型变量如果声明为父类的类型，但实际引用的是子类 对象，那么该变量就不能再访问子类中添加的属性和方法 12345Student m = new Student();m.school = “pku”; //合法,Student类有school成员变量 Person e = new Student();e.school = “pku”; //非法,Person类没有school成员变量 属性是在编译时确定的，编译时e为Person类型，没有school成员变量，因而编译错误。 不能调用子类所特有的方法、属性，因为编译时，e是Person类型 6.1 虚拟方法虚拟方法调用**(Virtual** Method Invocation) 正常的方法调用 1234Person e = new Person();e.getInfo();Student e = new Student(); e.getInfo(); 虚拟方法调用(多态情况下) 子类中定义了与父类同名同参数的方法，在多态情况下，将此时父类的方法称为虚拟方法，父 类根据赋给它的不同子类对象，动态调用属于子类的该方法。这样的方法调用在编译期是无法 确定的。 123Person e = new Student();e.getInfo(); //调用Student类的getInfo()方法 编译时类型和运行时类型 编译时e为Person类型，而方法的调用是在运行时确定的，所以调用的是Student类的getInfo()方法。——动态绑定 6.2 对象类型转换(Casting)对象类型转换的目的：由于一开始是左边是父类的引用，子类的对象（new），则转换成左右边都是子类的引用和对象（new），这样就具备了子类的一些结构（属性、方法等）。 12Person p = new Man();Man m = (Man)p; 如何实现向下转型： 使用强转符：**()** 问题引出：如何才能调用子类特有的属性和方法？ 12345678910//Person的子类有Man和Woman，Man类中定义了earnMoney方法，Woman中定义了goShoppoing方法//向下转型：使用强制类型转换符。Person p = new Man();Man m = (Man)p;m.earnMoney();//使用强转时，可能出现ClassCastException的异常。Woman w = (Woman)p;w.goShopping(); 1234567891011121314151617//问题一：编译时通过，运行时不通过//举例一：Person p = new Woman();Man m = (Man)p;//举例二：Person p = new Person();Man m = (Man)p;//问题二：编译通过，运行时也通过Object obj = new Woman();Person p = (Person)obj; //问题三：编译不通过，无关系类型之间不能进行强转① Man m = new Woman(); ② String str = new Date(); ③ Object o = new Date(); String str = (String)o; 基本数据类型的Casting： 自动类型转换：小的数据类型可以自动转换成大的数据类型 如long g&#x3D;20; double d&#x3D;12.0f 强制类型转换：可以把大的数据类型强制转换(casting)成小的数据类型 如 float f&#x3D;(float)12.0; int a&#x3D;(int)1200 对Java对象的强制类型转换称为造型 从子类到父类的类型转换可以自动进行 从父类到子类的类型转换必须通过造型**(强制类型转换)**实现 无继承关系的引用类型间的转换是非法的 在造型前可以使用instanceof操作符测试一个对象的类型 123456789101112131415161718public class ConversionTest &#123; public static void main(String[] args) &#123; //基本数据类型转化 double d = 13.4; long = (long) d; System.out.println(); int in = 5; // boolean b = (boolean)in; //对象类型转交换 Object obj = &quot;hello&quot;; String objStr = (String) obj; System.out.println(objStr); Object objPri = new Integer(5); // 所以下面代码运行时引发CassCastException异常 String str = (String) objPri; &#125;&#125; 6.3 instanceof 操作符x instanceof A：检验x是否为类A的对象，返回值为boolean型。 要求x所属的类与类A必须是子类和父类的关系，否则编译错误。 如果x属于类A的子类B，x instanceof A值也为true。 123456789public class Person extends Object &#123;…&#125;public class Student extends Person &#123;…&#125; public class Graduate extends Person &#123;…&#125;-------------------------------------------------------------------public void method(Person e) &#123; if (e instanceof Person)&#123;&#125;// 处理Person类及其子类对象 if (e instanceof Student)&#123;&#125;//处理Student类及其子类对象 if (e instanceof Graduate)&#123;&#125;//处理Graduate类及其子类对象&#125; instanceof关键字 小结： a instanceof A:判断对象a是否是类A的实例。如果是，返回true；如果不是，返回false。 使用情境：为了避免在向下转型时出现ClassCastException的异常，我们在向下转型之前，先进行instanceof的判断，一旦返回true，就进行向下转型。如果返回false，不进行向下转型。 如果 a instanceof A返回true,则 a instanceof B也返回true。其中，类B是类A的父类。 多态性 总结： 多态作用： 提高了代码的通用性，常称作接口重用 前提： 需要存在继承或者实现关系 有方法的重写 成员方法： 编译时：要查看引用变量所声明的类中是否有所调用的方法。 运行时：调用实际new的对象所属的类中的重写方法。 成员变量： 不具备多态性，只看引用变量所声明的类。 有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的。但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法，子类特有的属性和方法不能调用。 一、理解多态性：可以理解为一个事物的多种形态。 二、何为多态性： ​ 对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用） 三、多态的使用：虚拟方法调用 ​ 有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。（编译，看左边；运行，看右边。） 四、多态性的使用前提： ① 类的继承关系 ② 方法的重写 五、对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边） 若子类重写了父类方法，就意味着子类里定义的方法彻底覆盖了父类里的同名方法，系统将不可能把父类里的方法转移到子类中。（编译看左边，运行看右边） 对于实例变量则不存在这样的现象，即使子类里定义了与父类完全相同的实例变量，这个实例变量依然不可能覆盖父类中定义的实例变量。（编译运行都看左边） 7. Object类的使用Object类是所有Java类的根父类 如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类 123456789101112public class Person &#123; ...&#125;//等价于：public class Person extends Object &#123; ...&#125;method(Object obj)&#123; ...&#125; //可以接收任何类作为其参数 method(new Person()); Object类中的主要结构 NO. 方法名称 类型 描述 1 public Object() 构造 构造器 2 public boolean equals(Object obj) 普通 对象比较 3 public int hashCode() 普通 取得Hash码 4 public String toString() 普通 对象打印时调用 7.1 “&#x3D;&#x3D;” 操作符用“&#x3D;&#x3D;”进行比较时，符号两边的数据类型必须兼容(可自动转换的基本数据类型除外)，否则编译出错 ① 基本类型比较值:只要两个变量的值相等，即为true。 1int a=5; if(a==6)&#123;…&#125; ② 引用类型比较引用(是否指向同一个对象即地址值是否相等)：只有指向同一个对象时，&#x3D;&#x3D;才返回true。 1234Person p1=new Person(); Person p2=new Person();if (p1==p2)&#123;…&#125;java 7.2 equals方法 equals()：所有类都继承了Object，也就获得了**equals()**方法。还可以重写。 只能比较引用类型，其作用与“&#x3D;&#x3D;”相同**,**比较是否指向同一个对象。 格式:obj1.equals(obj2) 特例：当用equals() 方法进行比较时， 对类Fie 、String 、Date 及包装类（Wrapper class）来说，是比较类型及内容而不考虑引用的是否是同一个对象； （原因：在这些类中重写了Object类的equals()方法。） 12345String s1 = &quot;BB&quot;;String s2 = &quot;BB&quot;;System.out.println(s1 == s2);//trueSystem.out.println(s1.equals(s2));//trueSystem.out.println(s1.equals(new String(&quot;BB&quot;)));//true 当自定义使用**equals()**时，可以重写。用于比较两个对象的“内容”是否都相等 重写equals()方法的原则 对称性： 如果x.equals(y)返回是“ true ”， 那么y.equals(x) 也应该返回是 “true”。 自反性：x.equals(x)必须返回是“true”。 传递性：如果x.equals(y)返回是“true”，而且y.equals(z)返回是“true”， 那么z.equals(x)也应该返回是“true”。 一致性：如果x.equals(y)返回是“true”，只要x和y内容一直不变，不管你 重复x.equals(y)多少次，返回都是“true”。 任何情况下，x.equals(nu)，永远返回是“false”； x.equals(和x不同类型的对象)永远返回是“false”。 &#x3D;&#x3D;和equals()的区别 &#x3D;&#x3D; 既可以比较基本类型也可以比较引用类型。对于基本类型就是比较值，对于引用类型 就是比较内存地址 equals的话，它是属于java.lang.Object类里面的方法，如果该方法没有被重写过默认也 是**&#x3D;&#x3D;;我们可以看到String等类的equals方法是被重写过的，而且String类在日常开发中 用的比较多，久而久之，形成了equals**是比较值的错误观点。 具体要看自定义类里有没有重写Object的equals方法来判断。 通常情况下，重写equals方法，会比较类中的相应属性是否都相等。 &#x3D;&#x3D; 和 equals() 总结： 一、 &#x3D;&#x3D; 的使用： &#x3D;&#x3D; ：运算符 可以使用在基本数据类型变量和引用数据类型变量中 ① 如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等。（不一定类型要相同） ② 如果比较的是引用数据类型变量：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体 补充： &#x3D;&#x3D; 符号使用时，必须保证符号左右两边的变量类型一致。 二、equals()方法的使用： 是一个方法，而非运算符 只能适用于引用数据类型 Object类中equals()的定义： 说明：Object类中定义的equals()和&#x3D;&#x3D;的作用是相同的：比较两个对象的地址 值是否相同.即两个引用是否指向同一个对象实体 123public boolean equals(Object obj) &#123; return (this == obj);&#125; 像String、Date、File、包装类等都重写了Object类中的equals()方法。重写以后，比较的不是两个引用的地址是否相同，而是比较两个对象的”实体内容”是否相同。 通常情况下，我们自定义的类如果使用equals()的话，也通常是比较两个对象的”实体内容”是否相同。那么，我们就需要对Object类中的equals()进行重写。重写的原则：比较两个对象的实体内容是否相同. 7.3 toString()方法① toString()方法在Object类中定义，其返回值是String类型，返回类名和它 的引用地址。 ② 在进行String与其它类型数据的连接操作时，自动调用toString()方法 12345Date now=new Date();System.out.println(“now=”+now); 相当于System.out.println(“now=”+now.toString()); ③ 可以根据需要在用户自定义类型中重写toString()方法 如String 类重写了toString()方法，返回字符串的值。 123s1=“hello”;System.out.println(s1);//相当于System.out.println(s1.toString()); ④ 基本类型数据转换为String类型时，调用了对应包装类的toString()方法 1int a=10; System.out.println(“a=”+a); ToString()方法总结： 当我们输出一个对象的引用时，实际上就是调用当前对象的toString() Object类中toString()的定义： 123public String toString() &#123; return getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());&#125; 像String、Date、File、包装类等都重写了Object类中的toString()方法。使得在调用对象的toString()时，返回”实体内容”信息 1234567Customer cust1 = new Customer(&quot;Tom&quot;,21);System.out.println(cust1.toString());//(包的路径）.Customer@15db9742System.out.println(cust1);//(包的路径）.Customer@15db9742String str = new String(&quot;MM&quot;);System.out.println(str);//MMSystem.out.println(str.toString())//MM 自定义类也可以重写toString()方法，当调用此方法时，返回对象的”实体内容” 8. 包装类(Wrapper)的使用 针对八种基本数据类型定义相应的引用类型—包装类（封装类） 有了类的特点，就可以调用类中的方法，Java才是真正的面向对象 8.1 基本类型&lt;—&gt;包装类JDK5.0 新特性：自动装箱和自动拆箱 JDK5.0之后，支持自动装箱，自动拆箱。但类型必须匹配。 ① 基本数据类型包装成包装类的实例 —&gt; 装箱 通过包装类的构造器实现： 12int i = 500; Integer t = new Integer(i); 还可以通过字符串参数构造包装类对象： 123Float f = new Float(“4.56”);Long = new Long(“asdf”); //NumberFormatException ② 获得包装类对象中包装的基本类型变量 —&gt; 拆箱 调用包装类的.xxxValue()方法： 1boolean b = Obj.booleanValue(); 举例： 一、基本数据类型—&gt;包装类 ① JDK5.0之前：调用包装类的构造器（较少用） 1234567891011121314151617181920212223242526272829303132333435//针对int和Integer① int num1 = 10;Integer in1 = new Integer(num1);--&gt;//Integer(int value) System.out.println(in1);//10 ② Integer in2 = new Integer(&quot;123&quot;);--&gt;//Integer(String s)System.out.println(in2);//123 ③ Integer in3 = new Integer(&quot;123abc&quot;);System.out.println(in3);//报异常 NumberFormatException//针对float和FloatFloat f1 = new Float(12.3f);Float f2 = new Float(&quot;12.3&quot;);System.out.println(f1);//12.3System.out.println(f2);//12.3//针对boolean和Boolean① Boolean b1 = new Boolean(true);--&gt;//Boolean(boolean value)②Boolean b2 = new Boolean(&quot;TrUe&quot;);--&gt;//Boolean(String s),构造器里面还调用了一个方法可以实现忽略字符串的大小写System.out.println(b2);//true③ 特别的：下列不会像其他基本数据类型一样报异常，而是返回falseBoolean b3 = new Boolean(&quot;true123&quot;);System.out.println(b3);//false④ 特别的：Order order = new Order();System.out.println(order.isMale);//false（isMale还没赋过值，所以默认false）System.out.println(order.isFemale);//null（isMale还没实例化对象，所以默认null）class Order&#123; boolean isMale; Boolean isFemale;&#125; ② JDK5.0之后的新特性：自动装箱（常用） 12345678910111213//针对int和Integer（其他类型用法类似）int num = 10;Integer in1 = num;Integer in2 = 20;System.out.println(in1);//10Integer in = 20;System.out.println(in.toString());//20//体现：可以直接把一个基本类型当作对象传给Object obj形参，说明存在自动装箱，自动的将int num转成了Integer num然后再传进去method(num);public void method(Object obj)&#123; System.out.println(obj);//10&#125; 二、包装类—&gt;基本数据类型 ① JDK5.0之前：调用包装类Xxx的xxxValue()（较少用） 1234//针对int和Integer（其他类型用法类似）Integer in = new Integer(12); int i = in.intValue();System.out.println(i + 1); ② JDK5.0之后：自动拆箱（常用） 123//针对int和Integer（其他类型用法类似）int num = new Integer(20);System.out.println(in)//20 自动装箱：包装类的引用，基本数据类型的数据值 —&gt; Integer in &#x3D; 20; 自动拆箱：基本数据类型的声明，包装类对象的实例 —&gt; int n &#x3D; new Integer(20); 8.2 基本类型、包装类&lt;—&gt;String类型① 字符串（String类型）—&gt;基本数据类型 通过包装类的构造器实现： 1int i = new Integer(“12”); 通过包装类的parseXxx(String s)静态方法： 12345678 Float f = Float.parseFloat(“12.1”);//自动拆箱加String类型转换int i = Integer.parseInt(&quot;1&quot;); //特殊的：boolean和Booleanboolean b1 = Boolean.parseBoolean(&quot;true1&quot;);System.out.println(b1);//false（Boolean类中对此做了优化，不会直接像其他数据类型一样抛出异常，具体见Boolean类中的paeseBoolean(String s)方法，它判断不是&quot;true&quot;和null的话就返回false） ② 基本数据类型—&gt;字符串（String类型） 调用String类重载的valueOf(Xxx xxx)方法： 1String str = String.valueOf(2.34f);//&quot;2.34&quot; 更直接的方式：连接运算 1String intStr = 5 + &quot;&quot; //&quot;5&quot; 拓展：JUnit单元测试作用： 可以单独测试一段代码是否能正常运行，不用单独的使用main方法，也不需要通过注释其他代码来使单独一段代码执行。 步骤： ① 选中当前工程 - 右键选择：build path - add libraries - JUnit 4 - 下一步 ② 或者直接在代码中输入JUnit结构，便可以根据@Test的提示导入相应的包 1234@Testpublic void testxxx()&#123; &#125; 创建Java类，进行单元测试。 此时的Java类要求：① 此类是public的 ②此类提供公共的无参的构造器 此类中声明单元测试方法。 此时的单元测试方法：方法的权限是public,没有返回值，没有形参 此单元测试方法上需要声明注解：@Test,并在单元测试类中导入：import org.junit.Test; 声明好单元测试方法以后，就可以在方法体内测试相关的代码。 写完代码以后，左键双击选中单元测试方法名，右键：run as - JUnit Test 说明： 1.如果执行结果没有任何异常：绿条 2.如果执行结果出现异常：红条 第五章&gt;&gt;&gt;面向对象高级1. static 关键字为什么要使用static关键字？ 当我们编写一个类时，其实就是在描述其对象的属性和行为，而并没有产生实质上 的对象，只有通过new关键字才会产生出对象，这时系统才会分配内存空间给对象， 其方法才可以供外部调用。我们有时候希望无论是否产生了对象或无论产生了多少 对象的情况下，某些特定的数据在内存空间里只有一份。 类属性、类方法的设计思想 类属性作为该类各个对象之间共享的变量。在设计类时**,**分析哪 些属性不因对象的不同而改变，将这些属性设置为类属性。相应 的方法设置为类方法。 如果方法与调用者无关，则这样的方法通常被声明为类方法，由于不需要创建对象就可以调用类方法，从而简化了方法的调用。 使用范围： 在Java类中，可用static修饰属性、方法、代码块、内部类 被修饰后的成员具备以下特点： 随着类的加载而加载 优先于对象存在 修饰的成员，被所有对象所共享 访问权限允许时，可不创建对象，直接被类调用 1.1 类变量(class Variable)类变量（类属性）由该类的所有实例共享 1.2 类方法(class method) 没有对象的实例时，可以用**类名.方法名()**的形式访问由static修饰的类方法。 在static方法内部只能访问类的static修饰的属性或方法，不能访问类的非static的结构。 因为不需要实例就可以访问static方法，因此static方法内部不能有this和super（有生命周期来看，static修饰的结构是随着类加载而加载的，先于对象的实例，创建对象之后才能用this和super来修饰） static修饰的方法不能被重写 static 总结： static:静态的 static可以用来修饰：属性、方法、代码块、内部类 使用static修饰属性：静态变量（或类变量） 属性，按是否使用static修饰，又分为：静态属性 vs 非静态属性(实例变量) 实例变量：我们创建了类的多个对象，每个对象都独立的拥有一套类中的非静态属性。当修改其中一个对象中的非静态属性时，不会导致其他对象中同样的属性值的修改。 静态变量：我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改过了的。 static修饰属性的其他说明： ① 静态变量随着类的加载而加载。可以通过”类.静态变量”的方式进行调用 ② 静态变量的加载要早于对象的创建。 ③ 由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中。 ​ ④ 类变量 实例变量 ​ 类 yes no ​ 对象 yes yes 静态属性举例：System.out; Math.PI; 使用static修饰方法：静态方法 ① 随着类的加载而加载，可以通过”类.静态方法”的方式进行调用 ② 静态方法 非静态方法 类 yes no 对象 yes yes ③ 静态方法中，只能调用静态的方法或属性非静态方法中，既可以调用非静态的方法或属性，也可以调用静态的方法或属性 static注意点： 在静态的方法内，不能使用this关键字、super关键字 关于静态属性和静态方法的使用，大家都从生命周期的角度去理解。 ① 开发中，如何确定一个属性是否要声明为static的？ 属性是可以被多个对象所共享的，不会随着对象的不同而不同的。 类中的常量也常常声明为static ② 开发中，如何确定一个方法是否要声明为static的？ 操作静态属性的方法，通常设置为static的 类中的方法，习惯上声明为static的。 比如：Math、Arrays、Collections 技巧：根据生命周期来判断如何使用。static修饰的结构是随着类加载而加载的，并且只加载一次；非static修饰的结构是随着对象的创建而加载的。 1.3 单例(Singleton)设计模式定义： 所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对 某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法。 步骤： ① 将类的构造器访问权限设置为private ② 类的内部提供一个当前类的的实例（也需要静态化） ③ 类的内部提供一个public的静态方法，返回当前类对象 单例模式的优点： 由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的 产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方 式来解决。 应用场景： 网站的计数器，一般也是单例模式实现，否则难以同步。 应用程序的日志应用，一般都使用单例模式实现，这一般是由于共享的日志 文件一直处于打开状态，因为只能有一个实例去操作，否则内容不好追加。 数据库连接池的设计一般也是采用单例模式，因为数据库连接是一种数据库 资源。 项目中，读取配置文件的类，一般也只有一个对象。没有必要每次使用配置文件数据，都生成一个对象去读取。 Application 也是单例的典型应用 Windows的Task Manager (任务管理器)就是很典型的单例模式 Windows的Recycle Bin (回收站)也是典型的单例应用。在整个系统运行过程 中，回收站一直维护着仅有的一个实例。 1.3.1 饿汉式 坏处：对象加载时间过长。 好处：饿汉式是线程安全的 1234567891011121314class Singleton &#123; // 1.私有化构造器 private Singleton() &#123; &#125; // 2.内部提供一个当前类的实例 // 4.此实例也必须静态化 private static Singleton single = new Singleton(); // 3.提供公共的静态的方法，返回当前类的对象 public static Singleton getInstance() &#123; return single; &#125;&#125; 1.3.2 懒汉式 好处：延迟对象的创建。 目前的写法坏处：线程不安全。---&gt;（到多线程内容时再修改） 123456789101112131415class Singleton &#123; // 1.私有化构造器 private Singleton() &#123; &#125; // 2.内部提供一个当前类的实例 // 4.此实例也必须静态化 private static Singleton single; // 3.提供公共的静态的方法，返回当前类的对象 public static Singleton getInstance() &#123; if(single == null) &#123; single = new Singleton(); &#125; return single; &#125;&#125; 2. 理解main方法的语法 由于Java虚拟机需要调用类的main()方法，所以该方法的访问权限必须是 pubic，又因为Java虚拟机在执行main()方法时不必创建对象，所以该方法必须 是static的，该方法接收一个String类型的数组参数，该数组中保存执行Java命令 时传递给所运行的类的参数。 又因为main() 方法是静态的，我们不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员，这种情况，我们在之前的例子中多次碰到。 命令行参数用法举例 1234567pubic cass CommandPara &#123; pubic static void main(String[] args) &#123; for (int i = 0; i &lt; args.ength; i++) &#123; System.out.printn(&quot;args[&quot; + i + &quot;] = &quot; + args[i]); &#125; &#125; &#125; main()方法使用说明： main()方法作为程序的入口 main()方法也是一个普通的静态方法 main()方法可以作为我们与控制台交互的方式。（之前：使用Scanner） 3. 代码块代码块(或初始化块)的作用： 对Java类或对象进行初始化 代码块(或初始化块)的分类： 一个类中代码块若有修饰符， 则只能被static修饰，称为静态代码块(static bock)；没有使用static修饰的，为非静态代码块。 static代码块通常用于初始化static的属性 1234567cass Person &#123; pubic static int tota; static &#123; total = 100;//为total赋初值 &#125; …… //其它属性或方法声明&#125; ① 静态代码块：用static 修饰的代码块 可以有输出语句。 作用：可以对类的属性、类的声明进行初始化操作。 不可以对非静态的属性初始化。即：不可以调用非静态的属性和方法。 若有多个静态的代码块，那么按照从上到下的顺序依次执行。 静态代码块的执行要先于非静态代码块。 静态代码块随着类的加载而执行，且只执行一次。 ② 非静态代码块：没有static修饰的代码块 可以有输出语句。 可以对类的属性、类的声明进行初始化操作。 除了调用非静态的结构外，还可以调用静态的变量或方法。 若有多个非静态的代码块，那么按照从上到下的顺序依次执行。 每次创建对象的时候，都会执行一次（随着类的创建而执行）。且先于构造器执行。 静态代码块可以调用静态的结构，而不能调用非静态的结构； 非静态代码块既可以调用静态的结构，又可以调用非静态的结构。 程序中成员变量赋值的执行顺序 对属性可以赋值的位置： 执行的先后顺序：① - ② &#x2F; ⑤ - ③ - ④ ①默认初始化 ②显式初始化&#x2F;⑤在代码块中赋值 ③构造器中初始化 ④有了对象以后，可以通过”对象.属性”或”对象.方法”的方式，进行赋值 4. final 关键字在Java中声明类、变量和方法时，可使用关键字final来修饰,表示“最终的”。 final标记的类不能被继承。提高安全性，提高程序的可读性。 String类、System类、StringBuffer类 final标记的方法不能被子类重写。 比如：Object类中的getClass()。 final标记的变量**(成员变量或局部变量)**即称为常量。名称大写，且只能被赋值一次。 final标记的成员变量必须在声明时或在每个构造器中或代码块中显式赋 值，然后才能使用。 ① final修饰类 12345final class A&#123;&#125;class B extends A&#123;//错误，不能被继承。&#125; ② final修饰方法 1234567891011class A &#123; public final void print() &#123; System.out.println(&quot;A&quot;); &#125;&#125;class B extends A &#123; public void print() &#123; // 错误，不能被重写。 System.out.println(&quot;尚硅谷&quot;); &#125;&#125; ③ final修饰变量——常量 补充：static final：全局常量 1234567class A &#123; private final String INFO = &quot;atguigu&quot;;//声明常量 public void print() &#123; //The final field A.INFO cannot be assigned //INFO = &quot;尚硅谷&quot;; &#125;&#125; final 总结： final可以用来修饰的结构：类、方法、变量 final 用来修饰一个类:此类不能被其他类所继承。 比如：String类、System类、StringBuffer类 final 用来修饰方法：表明此方法不可以被重写 比如：Object类中getClass(); final 用来修饰变量：此时的”变量”就称为是一个常量 final修饰属性：可以考虑赋值的位置有：显式初始化、代码块中初始化、构造器中初始化 final修饰局部变量： 尤其是使用final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。 static final 用来修饰属性：全局常量 由于final修饰的类无子类，因此要保证每一个final修饰的属性都在类内部赋上了值。（若要使用构造器对final修饰的属性进行初始化赋值则不能有多个构造器，不能在方法中对final修饰的属性赋值） 5. 抽象类与抽象方法随着继承层次中一个个新子类的定义，类变得越来越具体，而父类则更一 般，更通用。类的设计应该保证父类和子类能够共享特征。有时将一个父类设计得非常抽象，以至于它没有具体的实例，这样的类叫做抽象类。 用abstract关键字来修饰一个类，这个类叫做抽象类。 用abstract来修饰一个方法，该方法叫做抽象方法。 抽象方法：只有方法的声明，没有方法的实现，以分号结束。 比如：public abstract void talk(); 含有抽象方法的类必须被声明为抽象类。 抽象类不能被实例化。抽象类是用来被继承的，抽象类的子类必须重写父类的抽象方法，并提供方法体。若没有重写全部的抽象方法，仍为抽象类。 不能用abstract修饰变量、代码块、构造器； 不能用abstract修饰私有方法、静态方法、final的方法、final的类。 父类中声明的抽象方法在子类中必须重写，否则会报错。 5.1 匿名子类① 非匿名的类、非匿名的对象 创建有类，对象实例化的时候有显式的取对象名 1对象 = new 类名() ② 非匿名的类、匿名的对象 创建有类，对象实例化的时候没有显式的取对象名 1方法名(new 类名()) ③ 匿名的子类、非匿名的对象 没有创建子类，子类对象实例化的时候有显式的取对象名 12345对象名 = new 父类名()&#123; //子类重写父类的方法 //……(或者子类中的新方法)&#125;方法名(对象名) ④ 匿名的子类、匿名的对象 没有创建子类，对象实例化的时候没有显式的取对象名 1234方法名(new 父类名()&#123; //子类重写父类的方法 //……(或者子类中的新方法)&#125;) 12345678910111213141516171819202122232425262728293031323334method(new Student());//匿名对象① //非匿名的类、非匿名的对象Worker worker = new Worker();method(worker);② //非匿名的类、匿名的对象 method(new Worker()); ③ //创建了一匿名子类的对象：pPerson p = new Person()&#123; @Override public void eat() &#123; System.out.println(&quot;吃东西&quot;); &#125; @Override public void breath() &#123; System.out.println(&quot;好好呼吸&quot;); &#125; &#125;; method(p);④ //创建匿名子类的匿名对象method(new Person()&#123; @Override public void eat() &#123; System.out.println(&quot;吃好吃东西&quot;); &#125; @Override public void breath() &#123; System.out.println(&quot;好好呼吸新鲜空气&quot;); &#125;&#125;); abstract 总结： abstract:抽象的 abstract可以用来修饰的结构：类、方法 abstract不能用来修饰：属性、构造器等结构； abstract不能用来修饰私有方法（私有方法在子类中无法被访问，则无法重写父类声明的抽象方法）、静态方法（① 静态方法不能被重写 ② 静态方法可以直接通过类去调用，而abstract修饰的抽象方法是不能调用的）、final的方法、final的类（final修饰的类或者方法不能在子类中修改） abstract修饰类：抽象类 此类不能实例化 抽象类中一定有构造器，便于子类实例化时调用（涉及：子类对象实例化的全过程） 开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作 abstract修饰方法：抽象方法 抽象方法只有方法的声明，没有方法体 包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法的。 （*）若子类重写了父类中的所有的抽象方法后，此子类方可实例化；若子类没有重写父类中的所有的抽象方法，则此子类也是一个抽象类，需要使用abstract修饰 如果类中含有抽象方法，那么此类一定是抽象类，因为抽象类不能实例化对象，所以不能同过实例化抽象类来调用此抽象方法，因此必须将类也声明为抽象类，让子类实例化对象来调用此抽象方法。 5.1 模板方法设计模式(TempateMethod)抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象类的行为方式。 解决的问题： 当功能内部一部分实现是确定的，一部分实现是不确定的。这时可以把不确定的部分暴露出去，让子类去实现。 换句话说，在软件开发中实现一个算法时，整体步骤很固定、通用， 这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同子类实现。这就是一种模板模式。 模板方法设计模式是编程中经常用得到的模式。各个框架、类库中都有他的影子，比如常见的有： 数据库访问的封装 Junit单元测试 JavaWeb的Servet中关于doGet&#x2F;doPost方法调用 Hibernate中模板程序 Spring中JDBCTemate、HibernateTempate等 6. 接口(interface) 一方面，有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java不支持多重继承。有了接口，就可以得到多重继承的效果。 另一方面，有时必须从几个类中抽取出一些共同的行为特征，而它们之间又没有is-a的关系，仅仅是具有相同的行为特征而已。例如：鼠标、键盘、打印机、扫描仪、摄像头、充电器、MP3机、手机、数码相机、移动硬盘等都支持USB连接。 接口就是规范，定义的是一组规则，体现了现实世界中“如果你是&#x2F;要…则 必须能…”的思想。继承是一个”是不是”的关系，而接口实现则是 “能不能” 的关系。 接口的本质是契约，标准，规范，就像我们的法律一样。制定好后大家都要遵守。 接口(interface)是抽象方法和常量值定义的集合。 接口的特点： 用interface来定义。 接口中的所有成员变量都默认是由public static final修饰的。 接口中的所有抽象方法都默认是由public abstract修饰的。 接口中没有构造器。 接口采用多继承机制。 接口定义举例： 123456public interface Runner &#123; int ID = 1; void start(); public void run(); void stop();&#125; 定义Java类的语法格式：先写extends，后写implements 1class SubClass extends SuperClass implements InterfaceA&#123;&#125; 一个类可以实现多个接口，接口也可以继承其它接口。 实现接口的类中必须提供接口中所有方法的具体实现内容，方可实例化。否则，仍为抽象类。 接口的主要用途就是被实现类实现。（面向接口编程） 与继承关系类似，接口与实现类之间存在多态性 接口和类是并列关系，或者可以理解为一种特殊的类。从本质上讲， 接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义 (JDK7.0及之前)，而没有变量和方法的实现。 6.1 匿名接口实现类123456789101112131415161718192021222324252627282930313233343536373839404142434445/*Flash类--u盘Printer类--打印机Flash类和Printer类都是USB接口的实现类start()--USB接口的抽象方法stop()--USB接口的抽象方法transferData(USB usb)--Computer类中的方法，形参是USB接口的实现类*/Computer com = new Computer();//1.创建了接口的非匿名实现类的非匿名对象Flash flash = new Flash();com.transferData(flash); //2. 创建了接口的非匿名实现类的匿名对象com.transferData(new Printer()); //3. 创建了接口的匿名实现类的非匿名对象USB phone = new USB()&#123; @Override public void start() &#123; System.out.println(&quot;手机开始工作&quot;); &#125; @Override public void stop() &#123; System.out.println(&quot;手机结束工作&quot;); &#125; &#125;;com.transferData(phone); //4. 创建了接口的匿名实现类的匿名对象 com.transferData(new USB()&#123; @Override public void start() &#123; System.out.println(&quot;mp3开始工作&quot;); &#125; @Override public void stop() &#123; System.out.println(&quot;mp3结束工作&quot;); &#125;&#125;); 接口 总结： 接口使用interface来定义 Java中，接口和类是并列的两个结构 如何定义接口：定义接口中的成员 JDK7及以前：只能定义全局常量和抽象方法 全局常量：public static final的 抽象方法：public abstract的 （上述的修饰符都可以省略不写，因为接口会默认使用这些修饰符） JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法（略） 接口中不能定义构造器的！意味着接口不可以实例化 Java开发中，接口通过让类去实现(implements)的方式来使用. 如果实现类覆盖了接口中的所有抽象方法，则此实现类就可以实例化 如果实现类没有覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类 Java类可以实现多个接口 —&gt;弥补了Java单继承性的局限性 格式：class AA extends BB implements CC,DD,EE 接口与接口之间可以继承，而且可以多继承 接口的具体使用，体现多态性 接口，实际上可以看做是一种规范 类实现了接口之后，要想实例化一个类，则必须将接口中的所有抽象方法都实现才行，否则应当仍然是一个抽象类，不能实例化对象 6.2 代理模式（Proxy）概述： 代理模式是Java开发中使用较多的一种设计模式。代理设计就是为其 他对象提供一种代理以控制对这个对象的访问。 应用场景： 安全代理：屏蔽对真实角色的直接访问。 远程代理：通过代理类处理远程方法调用（RMI） 延迟加载：先加载轻量级的代理对象，真正需要再加载真实对象 （比如你要开发一个大文档查看软件，大文档中有大的图片，有可能一个图片有 100MB，在打开文件时，不可能将所有的图片都显示出来，这样就可以使用代理 模式，当需要查看图片时，用proxy来进行大图片的打开。) 分类 静态代理（静态定义代理类） 动态代理（动态生成代理类）：JDK自带的动态代理，需要反射等知识 6.3 接口和抽象类之间的对比 No. 区别点 抽象类 接口 1 定义 包含抽象方法的类 主要是抽象方法和全局常量的集合 2 组成 构造方法、抽象方法、普通方法、 常量、变量 常量、抽象方法、(jdk8.0:默认方法、静态方法) 3 使用 子类继承抽象类(extends) 子类实现接口(implements) 4 关系 抽象类可以实现多个接口 接口不能继承抽象类，但允许继承多个接口 5 常见设计模式 模板方法 简单工厂、工厂方法、代理模式 6 对象 都通过对象的多态性产生实例化对象 （同左） 7 局限 抽象类有单继承的局限 接口没有此局限 8 实际 作为一个模板 是作为一个标准或是表示一种能力 9 选择 如果抽象类和接口都可以使用的话，优先使用接口，因为避免单继承的局限 （同左） 在开发中，常看到一个类不是去继承一个已经实现好的类，而是要么继承抽象类，要么实现接口。 6.4 Java8中针对接口的改进Java 8中，你可以为接口添加静态方法和默认方法。从技术角度来说，这是完全合法的，只是它看起来违反了接口作为一个抽象定义的理念。 静态方法：使用 static 关键字修饰。可以通过接口直接调用静态方法，并执行 其方法体。我们经常在相互一起使用的类中使用静态方法。你可以在标准库中 找到像Collection&#x2F;Collections或者Path&#x2F;Paths这样成对的接口和类。 默认方法：默认方法使用 default 关键字修饰。可以通过实现类对象来调用。 我们在已有的接口中提供新方法的同时，还保持了与旧版本代码的兼容性。 比如：java 8 API中对Collection、List、Comparator等接口提供了丰富的默认 方法。 接口中的默认方法 若一个接口中定义了一个默认方法，而另外一个接口中也定义了一个同名同 参数的方法（不管此方法是否是默认方法），在实现类同时实现了这两个接 口时，会出现：接口冲突。 解决办法：实现类必须覆盖接口中同名同参数的方法，来解决冲突。 若一个接口中定义了一个默认方法，而父类中也定义了一个同名同参数的非 抽象方法，则不会出现冲突问题。因为此时遵守：类优先原则。接口中具有 相同名称和参数的默认方法会被忽略。 java8 新特性总结： 接口中定义的静态方法，只能通过接口来调用。 通过实现类的对象，可以调用接口中的默认方法。如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法 如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法。–&gt;类优先原则 如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，那么在实现类没有重写此方法的情况下，报错–&gt;接口冲突。这就需要我们必须在实现类中重写此方法 如何在子类(或实现类)的方法中调用父类、接口中被重写的方法： 12345678910111213//调用自己定义的重写的方法method();//调用的是父类中声明的super.method();//调用接口中的默认方法//如下情景是两个接口中都定义了method()默认方法，//则可以通过“接口.super.默认方法”的形式来调用Interface1.super.method();Interface2.super.method();//补充：直接通过“接口.全局变量”的方式访问接口中的全局变量 7. 内部类 当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内 部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构最好使 用内部类。 在Java中，允许一个类的定义位于另一个类的内部，前者称为内部类，后者 称为外部类。 Inner class一般用在定义它的类或语句块之内，在外部引用它时必须给出完 整的名称。 Inner class的名字不能与包含它的外部类类名相同； 分类： 成员内部类（static成员内部类和非static成员内部类） 局部内部类（不谈修饰符）、匿名内部类 成员内部类作为类的成员的角色： 和外部类不同，Inner class还可以声明为private或protected； 可以调用外部类的结构 Inner class 可以声明为static的，但此时就不能再使用外层类的非static的成员变量； 成员内部类作为类的角色： 可以在内部定义属性、方法、构造器等结构 可以声明为abstract类 ，因此可以被其它的内部类继承 可以声明为final的 编译以后生成OuterClass$InnerClass.class字节码文件（也适用于局部内部类） 【注意】 非static的成员内部类中的成员不能声明为static的，只有在外部类或static的成员内部类中才可声明static成员。 外部类访问成员内部类的成员，需要“内部类.成员”或“内部类对象.成员”的方式 成员内部类可以直接使用外部类的所有成员，包括私有的数据 当想要在外部类的静态成员部分使用内部类时，可以考虑内部类声明为静态的 7.1 局部内部类如何声明局部内部类 12345678910class 外部类&#123; 方法()&#123; class 局部内部类&#123; &#125; &#125; &#123; class 局部内部类&#123; &#125; &#125;&#125; 如何使用局部内部类 只能在声明它的方法或代码块中使用，而且是先声明后使用。除此之外的任何地方都不能使用该类 但是它的对象可以通过外部方法的返回值返回使用，返回值类型只能是局部内部类 的父类或父接口类型 局部内部类的特点 内部类仍然是一个独立的类，在编译之后内部类会被编译成独立的.class文件，但 是前面冠以外部类的类名和$符号，以及数字编号。 只能在声明它的方法或代码块中使用，而且是先声明后使用。除此之外的任何地方 都不能使用该类。 局部内部类可以使用外部类的成员，包括私有的。 局部内部类可以使用外部方法的局部变量，但是必须是final的。由局部内部类和局 部变量的声明周期不同所致。 局部内部类和局部变量地位类似，不能使用public,protected,缺省,private 局部内部类不能使用static修饰，因此也不能包含静态成员 7.2 匿名内部类匿名内部类不能定义任何静态成员、方法和类，只能创建匿名内部类的一 个实例。一个匿名内部类一定是在new的后面，用其隐含实现一个接口或实现一个类。 格式： new 父类构造器（实参列表）|实现接口(){ ​ &#x2F;&#x2F;匿名内部类的类体部分 } 匿名内部类的特点 匿名内部类必须继承父类或实现接口 匿名内部类只能有一个对象 匿名内部类对象只能使用多态形式引用 内部类 总结： Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类 内部类的分类：成员内部类（静态、非静态） vs 局部内部类(方法内、代码块内、构造器内) 成员内部类： 一方面，作为外部类的成员： 调用外部类的结构 可以被static修饰 可以被4种不同的权限修饰 另一方面，作为一个类： 类内可以定义属性、方法、构造器等 可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承 可以被abstract修饰 如何实例化成员内部类的对象 1234567891011121314/*Person类内部有Dog和Bird内部类*///创建Dog实例(静态的成员内部类):Person.Dog dog = new Person.Dog();dog.show();//创建非静态Bird实例(非静态的成员内部类):Person.Bird bird = new Person.Bird();//错误的Person p = new Person();Person.Bird bird = p.new Bird();bird.sing(); bird.display(&quot;黄鹂&quot;); 如何在成员内部类中区分调用外部类的结构 12345678910111213class Person&#123; String name = &quot;小明&quot;; class Bird&#123; String name = &quot;杜鹃&quot;; public void display(String name)&#123; System.out.println(name);//方法的形参 System.out.println(this.name);//内部类的属性 System.out.println(Person.this.name);//外部类的属性 &#125; &#125;&#125; 面向对象 总结： 第六章&gt;&gt;&gt;异常处理1. 异常处理概述与异常体系结构异常：在Java语言中，将程序执行中发生的不正常情况称为“异常”。 (开发过程中的语法错误和逻辑错误不是异常) Java程序在执行过程中所发生的异常事件可分为两类： Error：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源 耗尽等严重情况。比如：StackOverflowError和OOM。一般不编写针对性 的代码进行处理。 Exception: 其它因编程错误或偶然的外在因素导致的一般性问题，可以使 用针对性的代码进行处理。例如： 空指针访问 试图读取不存在的文件 网络连接中断 数组角标越界 对于这些错误，一般有两种解决方法：. 一是遇到错误就终止程序 的运行。另一种方法是由程序员在编写程序时，就考虑到错误的 检测、错误消息的提示，以及错误的处理。 捕获错误最理想的是在编译期间，但有的错误只有在运行时才会发生。 比如：除数为0，数组下标越界等 分类：编译时异常和运行时异常 蓝色：非受检(unchecked)异常 红色：受检(checked)异常 ① 运行时异常 是指编译器不要求强制处置的异常。一般是指编程时的逻辑错误，是程序 员应该积极避免其出现的异常。java.lang.RuntimeException类及它的子 类都是运行时异常。 对于这类异常，可以不作处理，因为这类异常很普遍，若全处理可能会对 程序的可读性和运行效率产生影响。 ② 编译时异常 是指编译器要求必须处置的异常。即程序在运行时由于外界因素造成的一 般性异常。编译器要求Java程序必须捕获或声明所有编译时异常。 对于这类异常，如果程序不处理，可能会带来意想不到的结果。 2. 常见异常 java.lang.RuntimeException CassCastException ArrayIndexOutOfBoundsException（数组角标越界） NullPointerException（空指针） ArithmeticException NumberFormatException InputMismatchException ...... java.io.IOExeption FieNotFoundException EOFException java.lang.ClassNotFoundException java.lang.InterruptedException java.io.FileNotFoundException java.sql.SQException 3. try-catch-finally Java提供的是异常处理的抓抛模型。 Java程序的执行过程中如出现异常，会生成一个异常类对象， 该异常对象将被提交给Java运行时系统，这个过程称为抛出 (throw)异常。 异常对象的生成 由虚拟机自动生成：程序运行过程中，虚拟机检测到程序发生了问题，如果在当 前代码中没有找到相应的处理程序，就会在后台自动创建一个对应异常类的实例 对象并抛出——自动抛出 由开发人员手动创建：Exception exception &#x3D; new ClassCastException();——创 建好的异常对象不抛出对程序没有任何影响，和创建一个普通对象一样 异常的抛出机制 如果一个方法内抛出异常，该异常对象会被抛给调用者方法中处理。如果异常没有在调用者方法中处理，它继续被抛给这个调用方法的上层方法。这个过程将一直继续下去，直到异常被处理。 这一过程称为捕获(catch)异常。 如果一个异常回到main()方法，并且main()也不处理，则程序运行终止。 程序员通常只能处理Exception，而对Error无能为力。 异常处理是通过try-catch-finally语句实现的。 123456789101112try&#123; ...... //可能产生异常的代码&#125;catch( ExceptionName1 e )&#123; ...... //当产生ExceptionName1型异常时的处置措施&#125;catch( ExceptionName2 e )&#123; ...... //当产生ExceptionName2型异常时的处置措施&#125;finally&#123; ...... //无论是否发生异常，都无条件执行的语句&#125; ① try 捕获异常的第一步是用try{…}语句块选定捕获异常的范围，将可能出现异常的代码放在try语句块中。 ② catch (Exceptiontype e) 在catch语句块中是对异常对象进行处理的代码。每个try语句块可以伴随 一个或多个catch语句，用于处理可能产生的不同类型的异常对象。 如果明确知道产生的是何种异常，可以用该异常类作为catch的参数；也可以用其父类作为catch的参数。 ③ finally 捕获异常的最后一步是通过finally语句为异常处理提供一个统一的出口，使得在控制流转到程序的其它部分以前，能够对程序的状态作统一的管理。 不论在try代码块中是否发生了异常事件，catch语句是否执行，catch语句是否有异常，catch语句中是否有return， finally块中的语句都会被执行。 finally语句和catch语句是任选的 捕获异常的有关信息： 与其它对象一样，可以访问一个异常对象的成员变量或调用它的方法。 getMessage() 获取异常信息，返回字符串 printStackTrace() 获取异常类名和异常信息，以及异常出现在程序中的位置。返回值void。 try-catch-finally 总结： finally是可选的。 使用try将可能出现异常代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型，去catch中进行匹配 一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常的处理。一旦处理完成，就跳出当前的try-catch结构（在没有写finally的情况）。继续执行其后的代码 catch中的异常类型如果没有子父类关系，则谁声明在上，谁声明在下无所谓。catch中的异常类型如果满足子父类关系，则要求子类一定声明在父类的上面。否则，报错 常用的异常对象处理的方式： ① String getMessage() ② printStackTrace() 在try结构中声明的变量，再出了try结构以后，就不能再被调用 try-catch-finally结构可以嵌套 体会1：使用try-catch-finally处理编译时异常，是得程序在编译时就不再报错，但是运行时仍可能报错。相当于我们使用try-catch-finally将一个编译时可能出现的异常，延迟到运行时出现。 体会2：开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally了。针对于编译时异常，我们说一定要考虑异常的处理。 4. throws声明抛出异常是Java中处理异常的第二种方式 如果一个方法(中的语句执行时)可能生成某种异常，但是并不能确定如何处理这 种异常，则此方法应显示地声明抛出异常，表明该方法将不对这些异常进行处理， 而由该方法的调用者负责处理。 在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可 以是方法中产生的异常类型，也可以是它的父类。 声明抛出异常举例： 123456public void readFile(String file) throws FileNotFoundException &#123; …… // 读文件的操作可能产生FileNotFoundException类型的异常 FileInputStream fis = new FileInputStream(file); ……&#125; 重写方法声明抛出异常的原则 重写方法不能抛出比被重写方法范围更大的异常类型。在多态的情况下， 对methodA()方法的调用-异常的捕获按父类声明的异常处理。 123456789101112131415public class A &#123; public void methodA() throws IOException &#123; …… &#125; &#125;public class B1 extends A &#123; public void methodA() throws FileNotFoundException &#123; …… &#125; &#125;public class B2 extends A &#123; public void methodA() throws Exception &#123; //报错 …… &#125; &#125; throws 总结： “throws + 异常类型“写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。一旦当方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出。异常代码后续的代码，就不再执行！ 体会： try-catch-finally：真正的将异常给处理掉了 throws的方式只是将异常抛给了方法的调用者。 并没有真正将异常处理掉。 开发中如何选择使用try-catch-finally 还是使用throws？ 如果父类中被重写的方法没有throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果子类重写的方法中有异常，必须使用try-catch-finally方式处理。 执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用throws的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理。 方法重写的规则之一： 子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型 5. 手动抛出异常Java异常类对象除在程序执行过程中出现异常时由系统自动生成并 抛出，也可根据需要使用人工创建并抛出。 首先要生成异常类对象，然后通过throw语句实现抛出操作(提交给Java运 行环境)。 12IOException e = new IOException(); throw e; 可以抛出的异常必须是Throwable或其子类的实例。下面的语句在编译时将 会产生语法错误： 1throw new String(&quot;want to throw&quot;); 6. 用户自定义异常类 一般地，用户自定义异常类都是RuntimeException的子类。 自定义异常类通常需要编写几个重载的构造器。 自定义异常需要提供serialVersionUID 自定义的异常通过throw抛出。 自定义异常最重要的是异常类的名字，当异常出现时，可以根据名字判断异常类型。 用户自定义异常类MyException，用于描述数据取值范围错误信息。用户 自己的异常类必须继承现有的异常类。 异常处理 总结： 异常处理5个关键字 throw和throws的区别： throw表示抛出一个异常类的对象，生成异常对象的过程，声明在方法体内 throws表示抓住属于异常处理的一种方式，声明在方法的声明处 throw是抛出异常，接着throws处理异常 第七章&gt;&gt;&gt;多线程1. 基本概念：程序、进程、线程程序(program)是为完成特定任务、用某种语言编写的一组指令的集合。即指一 段静态的代码，静态对象。 进程(process)是程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它自身的产生、存在和消亡的过程。——生命周期 如：运行中的QQ，运行中的MP3播放器 程序是静态的，进程是动态的 进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域 **线程(thread)**，进程可进一步细化为线程，是一个程序内部的一条执行路径。 若一个进程同一时间并行执行多个线程，就是支持多线程的 **线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器(pc)**，线程切换的开销小 一个进程中的多个线程共享相同的内存单元&#x2F;内存地址空间。它们从同一堆中分配对象，可以 访问相同的变量和对象。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资 源可能就会带来安全的隐患。 单核CPU和多核CPU的理解 单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。但是因为CPU时间单元特别短，因此感觉不出来。 如果是多核CPU的话，才能更好的发挥多线程的效率。（现在的服务器都是多核的） 一个Java应用程序java.exe，其实至少有三个线程：main()主线程，gc() 垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。 并行与并发 并行：多个CPU同时执行多个任务。比如：多个人同时做不同的事。 并发：一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事。 多线程程序的优点： 提高应用程序的响应。对图形化界面更有意义，可增强用户体验。 提高计算机系统CPU的利用率 改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解修改 何时需要用到多线程？ 程序需要同时执行两个或多个任务。 程序需要实现一些需要等待的任务时，如用户输入、文件读写操作、网络操作、搜索等。 需要一些后台运行的程序时。 基本概念 注意点： 进程可以细化为多个线程 每个线程，用于自己独立的：栈、程序计数器 多个线程共享同一个进程中的结构：方法区、堆 2. 线程的创建和使用 下面的程序可以用一条线串起来，所以属于是单线程。 线程的创建和启动 Thread类的特性 每个线程都是通过某个特定Thread对象的run()方法来完成操作的，经常把run()方法的主体称为线程体 通过该Thread对象的start()方法来启动这个线程，而非直接调用run() Thread类构造器 **Thread()**：创建新的Thread对象 Thread(String **threadname)**：创建线程并指定线程实例名 **Thread(Runnable target)**：指定创建线程的目标对象，它实现了Runnable接口中的run方法 Thread(Runnable target, String **name)**：创建新的Thread对象 2.1 API中创建线程的两种方式JDK1.5之前创建新执行线程有两种方法： 继承Thread类的方式 实现Runnable接口的方式 2.1.1 继承Thread类 定义子类继承Thread类。 子类中重写Thread类中的run方法。 创建Thread子类对象，即创建了线程对象。 调用线程对象start方法：启动线程，调用run方法。 mt子线程的创建和启动过程 12345678910111213141516171819class MyThread extends Thread&#123; pubic MyThread()&#123; super(); &#125; pubic void run()&#123; for(int i = 0;i&lt;100;i++)&#123; System,out.printIn(&quot;子线程:&quot;+i); &#125; &#125;&#125; pubic class TestThread &#123; pubic static void main(String[] args) &#123; //1.创建线程 MyThread mt = new MyThread(); //2.启动线程，并调用当前线程的run()方法。 mt.start(); &#125;&#125; 注意点： 如果自己手动调用run()方法，那么就只是普通方法，没有启动多线程模式。 run()方法由JVM调用，什么时候调用，执行的过程控制都有操作系统的CPU调度决定。 想要启动多线程，必须调用start()方法。 一个线程对象只能调用一次start()方法启动，如果重复调用了，则将抛出以上的异常IegaThreadStateException。 要想调用start()方法启动新的线程，则需要创建新的线程对象 2.1.2 实现Runnable接口 定义子类，实现Runnable接口。 子类中重写Runnable接口中的run方法。 通过Thread类含参构造器（Thread(Runnable target)）创建线程对象。 将Runnable接口的子类对象作为实际参数传递给Thread类的构造器中。 调用Thread类的start()方法：开启线程，调用Runnable子类接口的run()方法。 继承方式和实现方式的联系与区别 1pubic class Thread extends Object implements Runnable 区别 继承Thread：线程代码存放在Thread子类run方法中。 实现Runnable：线程代码存在接口的实现类的run方法。 实现方式的好处 避免了单继承的局限性 多个线程可以共享同一个接口实现类的对象，非常适合多个相同线程来处理同一份资源。 2.2 Thread类的有关方法void start(): 启动线程，并执行对象的run()方法 run(): 线程在被调度时执行的操作 String getName(): 返回线程的名称 void setName(String name):设置该线程名称 static Thread currentThread(): 返回当前线程对象。 在Thread子类中就是this，通常用于主线程和Runnable实现类 static void yield()：线程让步 暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程 若队列中没有同优先级的线程，忽略此方法 join() ：当某个程序执行流中调用其他线程的 join() 方法时，调用线程将被阻塞，直到 join() 方法加入的 join 线程执行完为止 低优先级的线程也可以获得执行 static void sleep(long millis)：(指定时间:毫秒) 令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后 重排队。 抛出InterruptedException异常 stop(): 强制线程生命期结束，不推荐使用 boolean isAlive()：返回boolean，判断线程是否还活着 线程的调度 ① 调度策略 时间片 抢占式：高优先级的线程抢占CPU ② Java的调度方法 同优先级线程组成先进先出队列（先到先服务），使用时间片策略 对高优先级，使用优先调度的抢占式策略 线程的优先级 ① 线程的优先级等级 MAX_PRIORITY：10 MIN _PRIORITY：1 NORM_PRIORITY：5 –&gt; 默认优先级 ② 涉及的方法 getPriority() ：返回线程优先值 setPriority(int newPriority) ：改变线程的优先级 ③ 说明 线程创建时继承父线程的优先级 低优先级只是获得调度的概率低，并非一定是在高优先级线程之后才被调用 （高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只有当高优先级的线程执行完以后，低优先级的线程才执行。） 补充：线程的分类 Java中的线程分为两类：一种是守护线程，一种是用户线程。 它们在几乎每个方面都是相同的，唯一的区别是判断JVM何时离开。 守护线程是用来服务用户线程的，通过在start()方法前调用thread.setDaemon(true)可以把一个用户线程变成一个守护线程。 Java垃圾回收就是一个典型的守护线程。 若JVM中都是守护线程，当前JVM将退出。 形象理解：兔死狗烹，鸟尽弓藏 线程的创建 总结： 一、注意点： 我们不能通过直接调用run()的方式启动线程。 如需再启用一个线程，我们需要重新创建一个线程的对象 二、多线程的创建 ① 方式一：继承于Thread类 创建一个继承于Thread类的子类 重写Thread类的run() –&gt; 将此线程执行的操作声明在run()中 创建Thread类的子类的对象 通过此对象调用start() 启动当前线程 调用当前线程的run()方法 ② 方式二：实现Runnable接口 创建一个实现了Runnable接口的类 实现类去实现Runnable中的抽象方法：run() 创建实现类的对象 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象 通过Thread类的对象调用start() 启动线程 调用当前线程的run()–&gt;调用了Runnable类的target的run()（参考Thread类的源码） ③ 比较创建线程的两种方式。 开发中优先选择：实现Runnable接口的方式 原因： 实现的方式没有类的单继承性的局限性，即继承的方式只能继承Thread类则不能继承其他类，而实现的方式还能实现其他接口 实现的方式更适合来处理多个线程有共享数据的情况 联系： 1public class Thread implements Runnable 相同点： 两种方式都需要重写run()，将线程要执行的逻辑声明在run()中 目前两种方式，要想启动线程，都要调用Thread类中的start()方法 3. 线程的生命周期JDK中用Thread.State类定义了线程的几种状态 要想实现多线程，必须在主线程中创建新的线程对象。Java语言使用Thread类 及其子类的对象来表示线程，在它的一个完整的生命周期中通常要经历如下的五 种状态： 新建： 当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态 就绪：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已具备了运行的条件，只是没分配到CPU资源 运行：当就绪的线程被调度并获得CPU资源时,便进入运行状态， run()方法定义了线 程的操作和功能 阻塞：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时中止自己的执行，进入阻塞状态 死亡：线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束 4. 线程的同步问题的提出 多个线程执行的不确定性引起执行结果的不稳定 多个线程对数据的共享，会造成操作的不完整性，会破坏数据。 前提：多个线程有需要共享的数据 多线程出现了安全问题 问题的原因： 当多条语句在操作同一个线程共享数据时，一个线程对多条语句只执行了一部分，还没有执行完，另一个线程参与进来执行，导致共享数据的错误。 解决办法： 对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其他线程不可以参与执行。 4.1 Synchronized的使用方法Java对于多线程的安全问题提供了专业的解决方式：同步机制 4.1.1 同步代码块123synchronized (对象)&#123; // 需要被同步的代码；&#125; 4.1.2 同步方法synchronized还可以放在方法声明中，表示整个方法为同步方法。 123pubic synchronized void show (String name)&#123; ……&#125; 同步机制中的锁 同步锁机制 在《Thinking in Java》中，是这么说的：对于并发工作，你需要某种方式来防 止两个任务访问相同的资源（其实就是共享资源竞争）。 防止这种冲突的方法 就是当资源被一个任务使用时，在其上加锁。第一个访问某项资源的任务必须 锁定这项资源，使其他任务在其被解锁之前，就无法访问它了，而在其被解锁 之时，另一个任务就可以锁定并使用它了。 synchronized的锁是什么？ 任意对象都可以作为同步锁。所有对象都自动含有单一的锁（同步监视器）。 同步方法的锁：静态方法（类名.class）、非静态方法（this） 同步代码块：自己指定，很多时候也是指定为this或类名.class 注意： 必须确保使用同一个资源的多个线程共用一把锁，这个非常重要，否则就无法保证共享资源的安全 一个线程类中的所有静态方法共用同一把锁（类名.class），所有非静态方 法共用同一把锁（this），同步代码块（指定需谨慎） 同步的范围 如何找问题，即代码是否存在线程安全？（非常重要） 明确哪些代码是多线程运行的代码 明确多个线程是否有共享数据 明确多线程运行代码中是否有多条语句操作共享数据 如何解决呢？（非常重要） 对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其 他线程不可以参与执行。 即所有操作共享数据的这些语句都要放在同步范围中 切记： 范围太小：没锁住所有有安全问题的代码 范围太大：没发挥多线程的功能。 释放锁操作 当前线程的同步方法、同步代码块执行结束。 当前线程在同步代码块、同步方法中遇到break、return终止了该代码块、 该方法的继续执行。 当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致异常结束。 当前线程在同步代码块、同步方法中执行了线程对象的wait()方法，当前线 程暂停，并释放锁。 不会释放锁的操作 线程执行同步代码块或同步方法时，程序调用Thread.sleep()、Thread.yield()方法暂停当前线程的执行 线程执行同步代码块时，其他线程调用了该线程的suspend()方法将该线程挂起，该线程不会释放锁（同步监视器）。 应尽量避免使用suspend()和resume()来控制线程 4.1.3 线程的死锁问题 死锁 不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁 出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于 阻塞状态，无法继续 解决方法 专门的算法、原则 尽量减少同步资源的定义 尽量避免嵌套同步 4.2 Lock(锁) 从JDK 5.0开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当。 java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的 工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。 ReentrantLock 类实现了 Lock ，它拥有与 synchronized 相同的并发性和 内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock，可以 显式加锁、释放锁。 123456789101112class A&#123; private final ReentrantLock lock = new ReenTrantLock(); public void m()&#123; lock.lock(); try&#123; //保证线程安全的代码; &#125; finally&#123; lock.unlock(); &#125; &#125;&#125; 注意：如果同步代码有异常，要将unlock()写入finally语句块 synchronized 与 Lock 的对比 Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是隐式锁，出了作用域自动释放 Lock只有代码块锁，synchronized有代码块锁和方法锁 使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类） 优先使用顺序： Lock –&gt; 同步代码块（已经进入了方法体，分配了相应资源） –&gt; 同步方法（在方法体之外） 线程同步 总结 一、在Java中，我们通过同步机制，来解决线程的安全问题。 ① 方式一：同步代码块 123synchronized(同步监视器)&#123; //需要被同步的代码&#125; 说明： 操作共享数据的代码，即为需要被同步的代码。 –&gt;不能包含代码多了，也不能包含代码少了。 共享数据：多个线程共同操作的变量。比如：ticket就是共享数据。 同步监视器，俗称：锁。任何一个类的对象，都可以充当锁。 要求：多个线程必须要共用同一把锁。 补充：在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。 ① 通过继承Thread的方式则可以使用当前类对象作为同步监视器，而不能使用this关键字，因为使用继承Thread类的方式要创建多个子类对象。 ② 通过实现Runnable接口的方式则可以使用this关键字指明当前类对作为同步监视器，因为使用实现Runnable接口的方式只需要创建一个接口实现类对象。 ② 方式二：同步方法 如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的。 同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。 非静态的同步方法，同步监视器是this；静态的同步方法，同步监视器是当前类本身（类名.class） ① 通过继承Thread的方式，此时方法中默认的同步监视器为 类名.class，方法需要声明为静态的，否则默认的同步监视器会变为每个子类线程实例化对象 ② 通过实现Runnable接口的方式，此时方法中默认的同步监视器为 this 二、同步方式的好处与局限性 同步的方式，解决了线程的安全问题。—好处 操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。 —局限性 三、死锁问题 情景：嵌套同步锁 线程1 在拿着 锁1 同步监视器的时候，刚好 线程2 也握住了 锁2 同步监视器，由于后续代码需要使用到 锁2；线程2 同理； 此时 线程1 还得等待 线程2 执行中的 锁2 解开之后才能执行后续的代码；线程2 还得等待 线程1 执行中的 锁1 解开之后才能执行后续的代码。最终两个线程僵持住，都在等对方的锁解开，因此出现死锁现象。 四、Lock锁 实例化 ReentrantLock–&gt;Lock接口的实现类 调用锁定方法 lock() 调用解锁方法 unlock() 5. 线程的通信 wait() 与 notify() 和 notifyAll() **wait()**：令当前线程挂起并放弃CPU、同步资源并等待，使别的线程可访问并修改共享资源，而当 前线程排队等候其他线程调用notify()或notifyAll()方法唤醒，唤醒后等待重新获得对监视器的所有 权后才能继续执行。 **notify()**：唤醒正在排队等待同步资源的线程中优先级最高者结束等待 notifyAll **()**：唤醒正在排队等待资源的所有线程结束等待. 这三个方法只有在synchronized方法或synchronized代码块中才能使用，否则会报java.lang.IllegalMonitorStateException异常。 因为这三个方法必须有锁对象调用，而任意对象都可以作为synchronized的同步锁， 因此这三个方法只能在Object类中声明。 5.1 wait() 在当前线程中调用方法： 对象名.wait() 使当前线程进入等待（某对象）状态 ，直到另一线程对该对象发出 notify(或notifyAll) 为止。 调用方法的必要条件：当前线程必须具有对该对象的监控权（加锁） 调用此方法后，当前线程将释放对象监控权 ，然后进入等待 在当前线程被notify后，要重新获得监控权，然后从断点处继续代码的执行。 5.2 notify()&#x2F;notifyAll() 在当前线程中调用方法： 对象名.notify() 功能：唤醒等待该对象监控权的一个&#x2F;所有线程。 调用方法的必要条件：当前线程必须具有对该对象的监控权（加锁） 线程通信 总结 形象理解流程：以两个线程为例 其中一个线程（此处叫线程1）先进同步代码块或者同步方法，拿着同步监视器锁上，此时线程2进不来。线程1执行完代码之后来到执行wait()方法，并且变成阻塞状态，同时释放同步监视器。此时线程2便可以拿到同步监视器，进入同步代码块或者同步方法中，并且执行notify()&#x2F;notifyAll()，然后唤醒处于阻塞状态的线程1。此时线程1无法进入同步结构中，因为线程2还没有执行完同步结构中的代码，等到线程2执行完代码并且执行到wait()释放了同步监视器之后，线程1按照线程2的流程再走一遍，如此反复，就实现了通信交互。 wait()和notify()&#x2F;notifyAll()三个方法位于同步结构中 涉及到的三个方法： wait()：一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。 notify()：一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。 notifyAll()：一旦执行此方法，就会唤醒所有被wait的线程。 说明：wait()，notify()，notifyAll()三个方法 必须使用在同步代码块或同步方法中，不能用在Lock锁的方式中。 三个方法的调用者必须是同步代码块或同步方法中的同步监视器。否则，会出现IllegalMonitorStateException异常。 调用者可以是this或者当前类对象；this可以省略，而显式的对象就不能省略，要在方法前面加上对象名。 定义在java.lang.Object类中。 面试题：sleep() 和 wait()的异同？ ① 相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。 ② 不同点： 两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait() 调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中 关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。 6. JDK5.0新增线程创建方式6.1 实现Callable接口实现Callable和Runnable接口的方式的对比： 与使用Runnable相比， Callable功能更强大些 相比run()方法，可以有返回值 方法可以抛出异常 支持泛型的返回值 需要借助FutureTask类，比如获取返回结果 Future接口 可以对具体Runnable、Callable任务的执行结果进行取消、查询是否完成、获取结果等。 FutrueTask是Futrue接口的唯一的实现类 FutureTask 同时实现了Runnable, Future接口。它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值 6.2 使用线程池背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程， 对性能影响很大。 思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。 好处： 提高响应速度（减少了创建新线程的时间） 降低资源消耗（重复利用线程池中线程，不需要每次都创建） 便于线程管理 corePoolSize：核心池的大小 maximumPoolSize：最大线程数 keepAliveTime：线程没有任务时最多保持多长时间后会终止 … 线程池相关API JDK 5.0起提供了线程池相关API：ExecutorService 和 Executors ExecutorService：真正的线程池接口。常见子类ThreadPoolExecutor void execute(Runnable command) ：执行任务&#x2F;命令，没有返回值，一般用来执行Runnable &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task)：执行任务，有返回值，一般又来执行Callable void shutdown() ：关闭连接池 Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池 Executors.newCachedThreadPool()：创建一个可根据需要创建新线程的线程池 Executors.newFixedThreadPool(n)：创建一个可重用固定线程数的线程池 Executors.newSingleThreadExecutor() ：创建一个只有一个线程的线程池 Executors.newScheduledThreadPool(n)：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。 JDK 5.0新增创建多线程方式 总结 一、实现Callable接口 创建一个实现Callable的实现类（创建实现类） 实现call()方法，将此线程需要执行的操作声明在call()中（相当于run()方法） 创建Callable接口实现类的对象（创建实现类对象） 将此Callable接口实现类的对象作为形参传递到FutureTask构造器中，创建FutureTask的对象（FutureTask类实现接口RunnableFuture继承自Runnable接口） 将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()。【构造器为：Thread(Runnable target)】 （可根据是否需要返回值来进行步骤选择）获取Callable中call()方法的返回值。get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。 二、 使用线程池的方式 提供指定线程数量的线程池 创建线程池对象：ExecutorService service = Executors.newFixedThreadPool(10); 设置线程池的属性 执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象 调用execute()和submit()，前者适用于实现Runnable接口的方式，后者均可 关闭连接池 线程池对象名.shutdown(); 第八章&gt;&gt;&gt;常用类1. 字符串相关的类1.1 String类 String类：代表字符串。Java 程序中的所有字符串字面值（如 “abc” ）都作为此类的实例实现。 String是一个final类，代表不可变的字符序列。 字符串是常量，用双引号引起来表示。它们的值在创建之后不能更改。 String对象的字符内容是存储在一个**字符数组value[]**中的。 123456789//String源码public final class String implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123; /** The value is used for character storage. */ private final char value[]; /** Cache the hash code for the string */ private int hash; // Default to 0 String内存解析 String对象的创建 字符串的字面量赋值的方式的字面量位于方法区中的常量池中 通过构造器new对象的方式的对象位于堆空间，其中的字符串参数也还是位于方法区中的常量池 如果用过String对象对原来的处于常量池中的字面量进行操作，则需要在常量池中新造一个新字面量对应的对象，不能对原来的字面量对象进行操作 12345String s1 = &quot;hello&quot;;s1 = &quot;hello java&quot;;s2 = &quot;hello&quot;;s3 = &quot;hello&quot;//&quot;hello&quot;仍然处在常量池中，s1的地址值改变，指向在常量池中新造的一个&quot;hello java”。s2、s3的地址值指向原来就存在于常量池中的&quot;hello&quot;,s2和s3共用一个常量池中的&quot;hello&quot;对象 示例： 123456789101112String str = &quot;hello&quot;;//本质上this.value = new char[0];String s1 = new String();//this.value = original.value;String s2 = new String(String original);//this.value = Arrays.copyOf(value, value.length);String s3 = new String(char[] a);String s4 = new String(char[] a,int startIndex,int count); 结论： 常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。 只要其中有一个是变量，结果就在堆中 如果拼接的结果调用intern()方法，返回值就在常量池中 1.1.1 String常用方法int length()：返回字符串的长度： return value.length char charAt(int index)： 返回某索引处的字符return value[index] boolean isEmpty()：判断是否是空字符串：return value.length &#x3D;&#x3D; 0 String toLowerCase()：使用默认语言环境，将 String 中的所有字符转换为小写 String toUpperCase()：使用默认语言环境，将 String 中的所有字符转换为大写 String trim()：返回字符串的副本，忽略前导空白和尾部空白 boolean equals(Object obj)：比较字符串的内容是否相同 boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写 String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+” int compareTo(String anotherString)：比较两个字符串的大小 String substring(int beginIndex) ： 返回一个新的字符串， 它是此字符串的从beginIndex开始截取到最后的一个子字符串。 String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字 符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。 boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束 boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始 boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始 boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 true int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引 int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出 现处的索引，从指定的索引开始 int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引 int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后 一次出现处的索引，从指定的索引开始反向搜索 indexOf和lastIndexOf方法如果未找到都是返回-1 ① 替换： String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。 String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。 String replaceAll(String regex, String replacement) ： 使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。 String replaceFirst(String regex, String replacement) ： 使用给定的replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。 ② 匹配： boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。 ③ 切片： String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。 String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。 1.1.2 Stirng与其他数据类型之间的转换① String与字符数组转换 字符数组 –&gt; 字符串 String 类的构造器：String(char[]) 和 String(char[]，int offset，int length) 分别用字符数组中的全部字符和部分字符创建字符串对象。 字符串 –&gt; 字符数组 public char[] toCharArray()：将字符串中的全部字符存放在一个字符数组中的方法。 public void getChars(int srcBegin, int srcEnd, char[] dst,int dstBegin)：提供了将指定索引范围内的字符串存放到数组中的方法。 ② String与字节数组转换 字节数组 –&gt; 字符串 String(byte[])：通过使用平台的默认字符集解码指定的 byte 数组，构 造一个新的 String。 String(byte[]，int offset，int length) ：用指定的字节数组的一部分， 即从数组起始位置offset开始取length个字节构造一个字符串对象。 字符串 –&gt; 字节数组 public byte[] getBytes() ：使用平台的默认字符集将此 String 编码为byte 序列，并将结果存储到一个新的 byte 数组中。 public byte[] getBytes(String charsetName) ：使用指定的字符集将此 String 编码到 byte 序列，并将结果存储到新的 byte 数组。 ③ String与基本数据类型转换 字符串 –&gt; 基本数据类型、包装类 Integer包装类的public static int parseInt(String s)：可以将由“数字”字 符组成的字符串转换为整型。 类似地,使用java.lang包中的Byte、Short、Long、Float、Double类调相应的类方法可以将由“数字”字符组成的字符串，转化为相应的基本数据类型。 基本数据类型、包装类 –&gt; 字符串 调用String类的public String valueOf(int n)可将int型转换为字符串 相应的valueOf(byte b)、valueOf(long )、valueOf(float f)、valueOf(doubled)、valueOf(boolean b)可由参数的相应类型到字符串的转换 1.2 StringBuffer类 java.lang.StringBuffer代表可变的字符序列，JDK1.0中声明，可以对字符 串内容进行增删，此时不会产生新的对象。 很多方法与String相同。 作为参数传递时，方法内部可以改变值。 StringBuffer类不同于String，其对象必须使用构造器生成。有三个构造器： StringBuffer()：初始容量为16的字符串缓冲区 StringBuffer(int size)：构造指定容量的字符串缓冲区 StringBuffer(String str)：将内容初始化为指定字符串内容 123String s = new String(&quot;我喜欢学习&quot;);StringBuffer buffer = new StringBuffer(&quot;我喜欢学习&quot;);buffer.append(&quot;数学&quot;); 1.2.1 StringBuffer类的常用方法StringBuffer append(xxx)：提供了很多重载的append()方法，用于进行字符串拼接 StringBuffer delete(int start,int end)：删除指定位置的内容 StringBuffer replace(int start, int end, String str)：把[start,end)位置替换为str（左闭右开） StringBuffer insert(int offset, xxx)：在指定位置插入xxx StringBuffer reverse() ：把当前字符序列逆转 public int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引 public String substring(int start,int end)：返回一个从start开始到end索引结束的左闭右开区间的子字符串 public int length()：返回字符串的长度 public char charAt(int n )：返回某索引处的字符return value[index] public void setCharAt(int n ,char ch)：改变某个索引位置的字符 1.3 StringBuilder类StringBuilder 和 StringBuffer 非常类似，均代表可变的字符序列，而且提供相关功能的方法也一样 String、StringBuffer、StringBuilder类 总结 一、面试题：对比 String、StringBuffer、StringBuilder 不同点： String(JDK1.0)：不可变字符序列 StringBuffer(JDK1.0)：可变字符序列、效率低、线程安全 StringBuilder(JDK 5.0)：可变字符序列、效率高、线程不安全 相同点：底层使用char[]存储 注意：作为参数传递的话，方法内部String不会改变其值，StringBuffer 和 StringBuilder 会改变其值。 问题： 扩容问题:如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中。 指导意义：开发中建议大家使用：StringBuffer(int capacity) 或StringBuilder(int capacity) 二、String:字符串，使用一对””引起来表示。 String声明为final的，不可被继承 String实现了Serializable接口：表示字符串是支持序列化的。实现了Comparable接口：表示String可以比较大小 String内部定义了final char[] value用于存储字符串数据 String:代表不可变的字符序列。简称：不可变性。体现： 当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值。 当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。 当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。 通过字面量的方式（区别于new）给一个字符串赋值，此时的字符串值声明在字符串常量池中。 字符串常量池中是不会存储相同内容（String类重写的equals()方法，返回true）的字符串的。 三、String的实例化方式： 方式一：通过字面量定义的方式 方式二：通过new + 构造器的方式 面试题：String s = new String(&quot;abc&quot;);方式创建对象，在内存中创建了几个对象？ 两个:一个是堆空间中new结构，另一个是char[]对应的常量池中的数据：”abc” 四、String和其他类型之间的转换 ① String 与基本数据类型、包装类之间的转换。 String –&gt; 基本数据类型、包装类：调用包装类的静态方法：parseXxx(str) 基本数据类型、包装类 –&gt; String:调用String重载的valueOf(xxx) ②String 与 char[]之间的转换 String –&gt; char[]:调用String的toCharArray() char[] –&gt; String:调用String的构造器 ③ String 与 byte[]之间的转换 编码：String –&gt; byte[]:调用String的getBytes() 解码：byte[] –&gt; String:调用String的构造器 补充： 编码：字符串 –&gt;字节 (看得懂 —&gt;看不懂的二进制数据) 解码：编码的逆过程，字节 –&gt; 字符串 （看不懂的二进制数据 —&gt; 看得懂） 说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。 五、StringBuffer和StringBulider类的常用方法总结 增：append(xxx) 删：delete(int start,int end) 改：setCharAt(int n ,char ch) &#x2F; replace(int start, int end, String str) 查：charAt(int n ) 插：insert(int offset, xxx) 长度：length(); 遍历：for() + charAt() &#x2F; toString() 2. JDK8之前日期时间API 2.1 java.lang.System类System类提供的public static long currentTimeMillis()用来返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差（时间戳）。 此方法适于计算时间差。 计算世界时间的主要标准有： UTC(Coordinated Universal Time) GMT(Greenwich Mean Time) CST(Central Standard Time) 2.2 java.util.Date类表示特定的瞬间，精确到毫秒 构造器： Date()：使用无参构造器创建的对象可以获取本地当前时间。 Date(long date)：创建指定毫秒数的Date对象 常用方法 getTime():返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。 toString():把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)，zzz是时间标准。 其它很多方法都过时了。 Date类 小结 通过构造器的方式创建Date类实例化对象 可以通过对象.getTime()的方法获得实例化的Date类对象的毫秒数 可以通过对象.toString()的方法将Date类对象转换成特定格式的String 2.3 java.text.SimpleDateFormat类Date类的API不易于国际化，大部分被废弃了，java.text.SimpleDateFormat类是一个不与语言环境有关的方式来格式化和解析日期的具体类。 它允许进行格式化：日期–&gt;文本、解析：文本–&gt;日期 格式化： SimpleDateFormat() ：默认的模式和语言环境创建对象 public SimpleDateFormat(String pattern)：该构造方法可以用参数pattern指定的格式创建一个对象，该对象调用： public String format(Date date)：方法格式化时间对象date 解析： public Date parse(String source)：从给定字符串的开始解析文本，以生成一个日期。 SimpleDateformat类 小结 实例化：创建SimpleDateFormat类的对象（可以使用默认的空参构造器，也可以使用带参的构造器传入指定格式的字符串） 格式化：（日期–&gt;字符串）通过SimpleDateFormat类的对象调用format(Data date)方法，传入一个Date对象 解析：（字符串–&gt;日期）通过SimpleDateFormat类的对象调用parse(Data date)方法，传入一个String对象 需要先实例化SimpleDateFormat类 如果是按照指定格式的构造器创建对象的话，那么格式化和解析的时候也要严格按照此指定格式。 2.4 java.util.Calendar(日历)类Calendar是一个抽象基类，主用用于完成日期字段之间相互操作的功能。 获取Calendar实例的方法 使用Calendar.getInstance()方法：实际上返回的也是子类GregorianCalendar的实例化对象 调用它的子类GregorianCalendar的构造器。 一个Calendar的实例是系统时间的抽象表示，通过方法操作时间信息。比如YEAR、MONTH、DAY_OF_WEEK、HOUR_OF_DAY 、 MINUTE、SECOND（都是Calendar类中的全局常量[static final修饰的属性]） public int get(int field) 获取想要的对象的时间信息 public void set(int field,int value) 修改对象的指定的时间信息 public void add(int field,int amount) 给对象的指定的时间信息 public final Date getTime()[日历类—&gt; Date] 将日历对象转成Date对象，返回一个Date对象 public final void setTime(Date date)[Date —&gt; 日历类]，将指定的Date对象转成日历类对象，可以使用日历类的方法对其操作 注意**:** 获取月份时：一月是0，二月是1，以此类推，12月是11 获取星期时：周日是1，周二是2 ， 。。。。周六是7 Calendar类 小结 实例化： 调用它的子类GregorianCalendar的构造器 使用Calendar.getInstance()方法 通过对象调用方法： get()、set()、add()方法，来获取想要的时间信息，传入的参数为Calendar中定义的全局常量 (日历类—&gt; Date)getTime()方法，将日历对象转成Date对象，返回一个Date对象 (Date —&gt; 日历类)setTime()方法，将指定的Date对象转成日历类对象，可以使用日历类的方法对其操作 3. JDK8中新日期时间API新日期时间API出现的背景 如果我们可以跟别人说：“我们在1502643933071见面，别晚了！”那么就再简单不 过了。但是我们希望时间与昼夜和四季有关，于是事情就变复杂了。JDK 1.0中包含了 一个java.util.Date类，但是它的大多数方法已经在JDK 1.1引入Calendar类之后被弃用了。 而Calendar并不比Date好多少。它们面临的问题是： 可变性：像日期和时间这样的类应该是不可变的。 偏移性：Date中的年份是从1900开始的，而月份都从0开始。 格式化：格式化只对Date有用，Calendar则不行。 此外，它们也不是线程安全的；不能处理闰秒等。 第三次引入的API是成功的，并且Java 8中引入的java.time API 已经纠正了过去的缺陷，将来很长一段时间内它都会为我们服务。 Java 8 吸收了 Joda-Time 的精华，以一个新的开始为 Java 创建优秀的 API。 新的 java.time 中包含了所有关于本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）、时区（ZonedDateTime）和持续时间（Duration）的类。历史悠久的 Date 类新增了 toInstant() 方法， 用于把 Date 转换成新的表示形式。这些新增的本地化时间日期 API 大大简 化了日期时间和本地化的管理。 java.time – 包含值对象的基础包 java.time.chrono – 提供对不同的日历系统的访问 java.time.format – 格式化和解析时间和日期 java.time.temporal – 包括底层框架和扩展特性 java.time.zone – 包含时区支持的类 说明：大多数开发者只会用到基础包和format包，也可能会用到temporal包。因此，尽管有68个新的公开类型，大多数开发者，大概将只会用到其中的三分之一。 3.1 LocalDate(Time)LocalDate、LocalTime、LocalDateTime 类是其中较重要的几个类，它们的实例是不可变的对象，分别表示使用 ISO-8601日历系统的日期、时间、日期和时间。它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区相关的信息。 LocalDate代表IOS格式（yyyy-MM-dd）的日期,可以存储 生日、纪念日等日期。 LocalTime表示一个时间，而不是日期。 LocalDateTime是用来表示日期和时间的，这是一个最常用的类之一。 ISO-8601日历系统是国际标准化组织制定的现代公民的日期和时间的表示 法，也就是公历。 LocalDateTime类 小结 类似于Calendar类 LocalDate：表示一个日期 LocalTime：表示一个时间 LocalDateTime：表示日期和时间 实例化：创建LocalDate、LocalTime、LocalDateTime类的对象， now()：返回一个对象 of()：设置指定的年、月、日、时、分、秒，返回一个上面创建的类对应的实例化对象。没有偏移量。 通过对象调用方法 getXxx()：获取相关的属性（比如：DayOfMonth、DayOfYear、DayOfWeek、Month、MonthValue、Year、Hour、Minute、Second） withXxx()：设置相关属性（比如：DayOfMonth、DayOfYear、Month、Year），将值传入方法的形参进行设置或者修改原来的值【不会改变原来的对象的属性，体现了不可变性】 plus()：向当前对象添加某属性数值，传入整数型作为形参 minus()：从当前对象减去某属性的数值，传入整数型作为形参 3.2 瞬时：InstantInstant：时间线上的一个瞬时点。 这可能被用来记录应用程序中的事件时间戳。 在处理时间和日期的时候，我们通常会想到年,月,日,时,分,秒。然而，这只是 时间的一个模型，是面向人类的。第二种通用模型是面向机器的，或者说是连 续的。在此模型中，时间线中的一个点表示为一个很大的数，这有利于计算机 处理。在UNIX中，这个数从1970年开始，以秒为的单位；同样的，在Java中， 也是从1970年开始，但以毫秒为单位。 java.time包通过值类型Instant提供机器视图，不提供处理人类意义上的时间 单位。Instant表示时间线上的一点，而不需要任何上下文信息，例如，时区。 概念上讲，它只是简单的表示自1970年1月1日0时0分0秒（UTC）开始的秒 数。因为java.time包是基于纳秒计算的，所以Instant的精度可以达到纳秒级。 (1 ns &#x3D; 10-9 s) 1秒 &#x3D; 1000毫秒 &#x3D;10^6微秒&#x3D;10^9纳秒 时间戳是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。 Instant 小结 类似于java.util.Date类 创建Instant对象： now()：返回一个Instant对象，获取本初子午线对应的标准时间 1Instant instant = Instant.now(); ofEpochMilli()：通过给定的毫秒数传入形参，获取一个Instant对象 （类似于：Date(long millis)） 一些相关方法： atOffset()：添加时间偏移量 1OffsetDateTime offsetDateTime = instant.atOffset(ZoneOffset.ofHours(8)); toEpochMilli()：获取时间戳 （类似于：Date类的getTime()） 3.3 格式化与解析日期或时间java.time.format.DateTimeFormatter 类：该类提供了三种格式化方法： 预定义的标准格式。如： ISO_LOCAL_DATE_TIME ISO_LOCAL_DATE ISO_LOCAL_TIME 本地化相关的格式。如：ofLocalizedDateTime(FormatStyle.LONG) 自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”) DateTimeFormatter类 小结 类似于SimpleDateFormat类 实例化：通过DateTimeFormatter类调用静态属性或方法 ① 预定义的标准格式 通过DateTimeFormatter.(标准格式) 的形式返回一个DateTimeFormatter类的对象 ② 本地化相关的格式 通过DateTimeFormatter.ofLocalizedDateTime(FormatStyle dateTimeStyle)的方式返回一个对象 通过DateTimeFormatter.ofLocalizedDate(FormatStyle dateTimeStyle)的方式返回一个对象 FormatStyle类包含：FULL、LONG、MEDIUM、SHORT，通过FoematStyle.XXX的方式就可以调用 ③ 自定义格式（重点） 通过DateTimeFormatter.ofPattern()的方式返回一个对象 通过DateTimeFormatter类的对象调用方法： 格式化：日期–&gt;字符串 format(TemporalAccessor t)，传入一个LocalDate(Time)对象 解析：字符串–&gt;日期 parse(CharSequence text)，传入一个特定格式的字符串对象 3.4 其他日期API ZoneId：该类中包含了所有的时区信息，一个时区的ID，如 Europe&#x2F;Paris ZonedDateTime：一个在ISO-8601日历系统时区的日期时间，如 2007-12- 03T10:15:30+01:00 Europe&#x2F;Paris。 其中每个时区都对应着ID，地区ID都为“{区域}&#x2F;{城市}”的格式，例如：Asia&#x2F;Shanghai等 Clock：使用时区提供对当前即时、日期和时间的访问的时钟。 持续时间：Duration，用于计算两个“时间”间隔 日期间隔：Period，用于计算两个“日期”间隔 TemporalAdjuster : 时间校正器。有时我们可能需要获取例如：将日期调整 到“下一个工作日”等操作。 TemporalAdjusters : 该类通过静态方法 (firstDayOfXxx()&#x2F;lastDayOfXxx()&#x2F;nextXxx()）提供了大量的常用 TemporalAdjuster 的实现。 3.5 与传统日期处理的转换 4. Java比较器在Java中经常会涉及到对象数组的排序问题，那么就涉及到对象之间的比较问题。 Java实现对象排序的方式有两种： 自然排序：java.lang.Comparable 定制排序：java.util.Comparator 4.1 自然排序：Comparable Comparable接口强行对实现它的每个类的对象进行整体排序。这种排序被称 为类的自然排序。 实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即 通过 compareTo(Object obj) 方法的返回值来比较大小。如果当前对象this大于形参对象obj，则返回正整数，如果当前对象this小于形参对象obj，则返回负整数，如果当前对象this等于形参对象obj，则返回零。 实现Comparable接口的对象列表（和数组）可以通过 Collections.sort 或 Arrays.sort进行自动排序。实现此接口的对象可以用作有序映射中的键或有 序集合中的元素，无需指定比较器。 对于类 C 的每一个 e1 和 e2 来说，当且仅当 e1.compareTo(e2) &#x3D;&#x3D; 0 与 e1.equals(e2) 具有相同的 boolean 值时，类 C 的自然排序才叫做与 equals 一致。建议（虽然不是必需的）最好使自然排序与 equals 一致。 Comparable 的典型实现：(默认都是从小到大排列的) String：按照字符串中字符的Unicode值进行比较 Character：按照字符的Unicode值来进行比较 数值类型对应的包装类以及BigInteger、BigDecimal：按照它们对应的数值大小进行比较 Boolean：true 对应的包装类实例大于 false 对应的包装类实例 Date、Time等：后面的日期时间比前面的日期时间大 4.2 定制排序：Comparator当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码， 或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象来排序，强行对多个对象进行整体排序的比较。 重写compare(Object o1, Object o2)方法，比较o1和o2的大小：如果方法返回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示 o1小于o2。 可以将 Comparator 传递给 sort 方法（如 Collections.sort 或 Arrays.sort）， 从而允许在排序顺序上实现精确控制。 还可以使用 Comparator 来控制某些数据结构（如有序 set或有序映射）的顺序，或者为那些没有自然顺序的对象 collection 提供排序。 Java比较器 总结 一、说明： Java中的对象，正常情况下，只能进行比较：&#x3D;&#x3D; 或 !&#x3D; 。不能使用 &gt; 或 &lt; 的。但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象的大小。 如何实现？使用两个接口中的任何一个：Comparable 或 Comparator 二、Comparable接口与Comparator的使用的对比： Comparable接口的方式一旦一定，保证Comparable接口实现类的对象在任何位置都可以比较大小。 Comparator接口属于临时性的比较。 ① Comparable接口的使用举例： 自然排序 像String、包装类等实现了Comparable接口，重写了compareTo(obj)方法，给出了比较两个对象大小的方式。 像String、包装类重写compareTo()方法以后，进行了从小到大的排列 重写compareTo(obj)的规则： - 如果当前对象this大于形参对象obj，则返回正整数， - 如果当前对象this小于形参对象obj，则返回负整数， - 如果当前对象this等于形参对象obj，则返回零。 对于自定义类来说，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo(obj)方法。在compareTo(obj)方法中指明如何排序 ② Comparator接口的使用：定制排序 背景：当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码，或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象来排序 重写compare(Object o1,Object o2)方法，比较o1和o2的大小： 如果方法返回正整数，则表示o1大于o2； 如果返回0，表示相等； 返回负整数，表示o1小于o2。 5. System类① System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。 该类位于java.lang包。 ② 由于该类的构造器是private的，所以无法创建该类的对象，也就是无法实 例化该类。其内部的成员变量和成员方法都是static的，所以也可以很方便 的进行调用。 ③ 成员变量 System类内部包含in、out和err三个成员变量，分别代表标准输入流(键盘输入)，标准输出流(显示器)和标准错误输出流(显示器)。 ④ 成员方法 native long **currentTimeMillis()**： 该方法的作用是返回当前的计算机时间，时间的表达格式为当前计算机时间和GMT时间(格林威治时间)1970年1月1号0时0分0秒所差的毫秒数。 void **exit(int status)**： 该方法的作用是退出程序。其中status的值为0代表正常退出，非零代表异常退出。使用该方法可以在图形界面编程中实现程序的退出功能等。 void **gc()**： 该方法的作用是请求系统进行垃圾回收。至于系统是否立刻回收，则 取决于系统中垃圾回收算法的实现以及系统执行时的情况。 String getProperty(String **key)**： 该方法的作用是获得系统中属性名为key的属性对应的值。系统中常见的属性名以及属性的作用如下表所示： 1234567891011121314String javaVersion = System.getProperty(&quot;java.version&quot;); System.out.println(&quot;java的version:&quot; + javaVersion);String javaHome = System.getProperty(&quot;java.home&quot;); System.out.println(&quot;java的home:&quot; + javaHome);String osName = System.getProperty(&quot;os.name&quot;);System.out.println(&quot;os的name:&quot; + osName);String osVersion = System.getProperty(&quot;os.version&quot;); System.out.println(&quot;os的version:&quot; + osVersion);String userName = System.getProperty(&quot;user.name&quot;);System.out.println(&quot;user的name:&quot; + userName);String userHome = System.getProperty(&quot;user.home&quot;); System.out.println(&quot;user的home:&quot; + userHome);String userDir = System.getProperty(&quot;user.dir&quot;); System.out.println(&quot;user的dir:&quot; + userDir); 6. Math类java.lang.Math提供了一系列静态方法用于科学计算。其方法的参数和返回值类型一般为double型。 abs 绝对值 acos,asin,atan,cos,sin,tan 三角函数 sqrt 平方根 pow(double a,doble b) a的b次幂 log 自然对数 exp e为底指数 max(double a,double b) 返回两者之中的较大者 min(double a,double b) 返回两者之中的较小者 random() 返回0.0到1.0的随机数 long round(double a) double型数据a转换为long型（四舍五入） toDegrees(double angrad) 弧度—&gt;角度 toRadians(double angdeg) 角度—&gt;弧度 7. BigInteger与BigDecimal7.1 BigInteger类 Integer类作为int的包装类，能存储的最大整型值为231-1，Long类也是有限的， 最大为263-1。如果要表示再大的整数，不管是基本数据类型还是他们的包装类 都无能为力，更不用说进行运算了。 java.math包的BigInteger可以表示不可变的任意精度的整数。BigInteger 提供所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。 另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、 位操作以及一些其他操作。 构造器 BigInteger(String val)：根据字符串构建BigInteger对象 7.2 BigDecimal类 一般的Float类和Double类可以用来做科学计算或工程计算，但在商业计算中， 要求数字精度比较高，故用到java.math.BigDecimal类。 BigDecimal类支持不可变的、任意精度的有符号十进制定点数。 构造器 public BigDecimal(double val) public BigDecimal(String val) 常用方法 public BigDecimal add(BigDecimal augend) public BigDecimal subtract(BigDecimal subtrahend) public BigDecimal multiply(BigDecimal multiplicand) public BigDecimal divide(BigDecimal divisor, int scale, int roundingMode) 1234567public void testBigInteger() &#123; BigInteger bi = new BigInteger(&quot;12433241123&quot;); BigDecimal bd = new BigDecimal(&quot;12435.351&quot;); BigDecimal bd2 = new BigDecimal(&quot;11&quot;); System.out.println(bi); // System.out.println(bd.divide(bd2)); System.out.println(bd.divide(bd2, BigDecimal.ROUND_HALF_UP)); System.out.println(bd.divide(bd2, 15, BigDecimal.ROUND_HALF_UP));&#125; 第九章&gt;&gt;&gt;枚举类与注解1. 枚举类的使用 主要内容**:** 如何自定义枚举类 如何使用关键字enum定义枚举类 Enum类的主要方法 实现接口的枚举类 类的对象只有有限个，确定的。 当需要定义一组常量时，强烈建议使用枚举类 枚举类的实现 JDK1.5之前需要自定义枚举类 JDK 1.5 新增的 enum 关键字用于定义枚举类 若枚举只有一个对象, 则可以作为一种单例模式的实现方式。 枚举类的属性 枚举类对象的属性不应允许被改动**,** 所以应该使用 private final 修饰 枚举类的使用 private final 修饰的属性应该在构造器中为其赋值 若枚举类显式的定义了带参数的构造器, 则在列出枚举值时也必须对应的传入参数 2. 自定义枚举类 私有化类的构造器，保证不能在类的外部创建其对象 在类的内部创建枚举类的实例。声明为：public static final 对象如果有实例变量，应该声明为private final，并在构造器中初始化 3. 使用enum定义枚举类 使用说明 使用 enum 定义的枚举类默认继承了 java.lang.Enum类，因此不能再继承其他类 枚举类的构造器只能使用 private 权限修饰符 枚举类的所有实例必须在枚举类中显式列出(“,” 分隔，”;”结尾）。列出的实例系统会自动添加 public static final 修饰 必须在枚举类的第一行声明枚举类对象 JDK 1.5 中可以在 switch 表达式中使用Enum定义的枚举类的对象 作为表达式, case 子句可以直接使用枚举值的名字, 无需添加枚举类作为限定。 12345678910111213141516171819public enum SeasonEnum &#123; SPRING(&quot;春天&quot;,&quot;春风又绿江南岸&quot;), SUMMER(&quot;夏天&quot;,&quot;映日荷花别样红&quot;), AUTUMN(&quot;秋天&quot;,&quot;秋水共长天一色&quot;), WINTER(&quot;冬天&quot;,&quot;窗含西岭千秋雪&quot;); private final String seasonName; private final String seasonDesc; private SeasonEnum(String seasonName, String seasonDesc) &#123; this.seasonName = seasonName; this.seasonDesc = seasonDesc; &#125; public String getSeasonName() &#123; return seasonName; &#125; public String getSeasonDesc() &#123; return seasonDesc; &#125;&#125; 使用enum关键字定义的枚举类实现接口的情况 情况一：实现接口，在enum类中实现抽象方法 情况二：让枚举类的对象分别实现接口中的抽象方法 4. Enum类的主要方法 **values()**方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。 valueOf(String **str)**：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如果不是，会有运行时异常： IllegalArgumentException。 **toString()**：返回当前枚举类对象常量的名称 说明： 和普通 Java 类一样，枚举类可以实现一个或多个接口 若每个枚举值在调用实现的接口方法呈现相同的行为方式，则只要统一实现该方法即可。 若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式,则可以让每个枚举值分别来实现该方法 1. 注解(Annotation)主要内容： 注解(Annotation)概述 常见的Annotation示例 自定义Annotation JDK中的元注解 利用反射获取注解信息（在反射部分涉及） JDK 8中注解的新特性 从 JDK 5.0 开始, Java 增加了对元数据(MetaData) 的支持, 也就是Annotation(注解) Annotation 其实就是代码里的特殊标记, 这些标记可以在编译, 类加 载, 运行时被读取, 并执行相应的处理。通过使用 Annotation, 程序员 可以在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息。代 码分析工具、开发工具和部署工具可以通过这些补充信息进行验证 或者进行部署。 Annotation 可以像修饰符一样被使用, 可用于修饰包,类, 构造器, 方法, 成员变量, 参数, 局部变量的声明, 这些信息被保存在 Annotation 的 “name&#x3D;value” 对中。 在JavaSE中，注解的使用目的比较简单，例如标记过时的功能， 忽略警告等。在JavaEE&#x2F;Android中注解占据了更重要的角色，例如 用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗代码和XML配置等。 未来的开发模式都是基于注解的，JPA是基于注解的，Spring2.5以 上都是基于注解的，Hibernate3.x以后也是基于注解的，现在的Struts2有一部分也是基于注解的了，注解是一种趋势。 一定程度上可以说：框架 &#x3D; 注解 + 反射 + 设计模式。 2. 常见的Annotation示例使用 Annotation 时要在其前面增加 @ 符号, 并把该 Annotation 当成一个修饰符使用。用于修饰它支持的程序元素 2.1 生成文档相关的注解 @author 标明开发该类模块的作者，多个作者之间使用,分割 @version 标明该类模块的版本 @see 参考转向，也就是相关主题 @since 从哪个版本开始增加的 @param 对方法中某参数的说明，如果没有参数就不能写 @return 对方法返回值的说明，如果方法的返回值类型是void就不能写 @exception 对方法可能抛出的异常进行说明，如果方法没有用throws显式抛出的异常就不能写 其中 @param @return 和 @exception 这三个标记都是只用于方法的。 @param的格式要求：@param 形参名形参类型 形参说明 @return 的格式要求：@return 返回值类型返回值说明 @exception的格式要求：@exception 异常类型 异常说明 @param和@exception可以并列多个 2.2 在编译时进行格式化检查JDK内置的三个基本注解 @Override: 限定重写父类方法, 该注解只能用于方法 @Deprecated: 用于表示所修饰的元素(类, 方法等)已过时。通常是因为所修饰的结构危险或存在更好的选择 @SuppressWarnings: 抑制编译器警告 2.3 跟踪代码依赖性，实现替代配置文件功能Servlet3.0提供了注解(annotation),使得不再需要在web.xml文件中进行Servlet的部署。 spring框架中关于“事务”的管理 3. 自定义Annotation 定义新的Annotation 类型使用 @interface 关键字 自定义注解自动继承了java.lang.annotation.Annotation接口 Annotation 的成员变量在 Annotation 定义中以无参数方法的形式来声明。其方法名和返回值定义了该成员的名字和类型。我们称为配置参数。类型只能 是八种基本数据类型、String类型、Class类型、enum类型、Annotation类型、 以上所有类型的数组。 可以在定义 Annotation 的成员变量时为其指定初始值, 指定成员变量的初始 值可使用 default 关键字 如果只有一个参数成员，建议使用参数名为value 如果定义的注解含有配置参数，那么使用时必须指定参数值，除非它有默认 值。格式是“参数名 &#x3D; 参数值”，如果只有一个参数成员，且名称为value， 可以省略“value&#x3D;” 没有成员定义的 Annotation 称为标记; 包含成员变量的 Annotation 称为元数据Annotation 自定义注解必须配上注解的信息处理流程才有意义。 4. JDK中的元注解JDK 的元Annotation 用于修饰其他Annotation 定义 JDK5.0提供了4个标准的meta-annotation类型，分别是： Retention Target Documented Inherited 元数据的理解： String name = “atguigu”; String和name是对实际数据“atguigu”的修饰，指明其数据的类型和名称 4.1 @Retention@Retention: 只能用于修饰一个 Annotation 定义, 用于指定该 Annotation 的生命 周期, @Rentention 包含一个 RetentionPolicy 类型的成员变量, 使用 @Rentention 时必须为该 value 成员变量指定值: RetentionPolicy.SOURCE：在源文件中有效（即源文件保留），编译器直接丢弃这种策略的注释 RetentionPolicy.CLASS：在class文件中有效（即class保留） ， 当运行 Java 程序时, JVM不会保留注解。 这是默认值 RetentionPolicy.RUNTIME：在运行时有效（即运行时保留），当运行 Java 程序时, JVM 会保留注释。程序可以通过反射获取该注释。 4.2 @Target@Target: 用于修饰 Annotation 定义, 用于指定被修饰的 Annotation 能用于 修饰哪些程序元素。 @Target 也包含一个名为 value 的成员变量。 4.3 @Documented @Documented: 用于指定被该元 Annotation 修饰的 Annotation 类将被javadoc 工具提取成文档。默认情况下，javadoc是不包括注解的。 定义为Documented的注解必须设置Retention值为RUNTIME。 4.4 @Inherited@Inherited: 被它修饰的 Annotation 将具有继承性。如果某个类使用了被 @Inherited 修饰的 Annotation, 则其子类将自动具有该注解。 比如：如果把标有@Inherited注解的自定义的注解标注在类级别上，子类则可以继承父类类级别的注解 5. 利用反射获取注解信息 JDK 5.0 在 java.lang.reflect 包下新增了 AnnotatedElement 接口, 该接口代 表程序中可以接受注解的程序元素 当一个 Annotation 类型被定义为运行时 Annotation 后, 该注解才是运行时 可见, 当 class 文件被载入时保存在 class 文件中的 Annotation 才会被虚拟机读取 程序可以调用 AnnotatedElement对象的如下方法来访问 Annotation 信息 6. JDK8中注解的新特性6.1 可重复注解Java 8对注解处理提供了两点改进：可重复的注解及可用于类型的注解。此外， 反射也得到了加强，在Java8中能够得到方法参数的名称。这会简化标注在方法 参数上的注解。 6.2 类型注解JDK1.8之后，关于元注解@Target的参数类型ElementType枚举值多了两个：TYPE_PARAMETER,TYPE_USE。 在Java 8之前，注解只能是在声明的地方所使用，Java8开始，注解可以应用 在任何地方。 ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中（如：泛型声明）。 ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中。 注解 总结 一、如何自定义注解：参照@SuppressWarnings定义 ① 注解声明为：@interface ② 内部定义成员，通常使用value表示 ③ 可以指定成员的默认值，使用default定义 ④ 如果自定义注解没有成员，表明是一个标识作用。 如果注解有成员，在使用注解时，需要指明成员的值。 自定义注解必须配上注解的信息处理流程(使用反射)才有意义。 自定义注解通过都会指明两个元注解：Retention、Target 二、JDK提供的4中元注解 元注解：对现有的注解进行解释说明的注解 Retention：指定所修饰的 Annotation 的生命周期：SOURCE\\CLASS（默认行为）\\RUNTIME 只有声明为RUNTIME生命周期的注解，才能通过反射获取。 Target:用于指定被修饰的 Annotation 能用于修饰哪些程序元素 Documented:表示所修饰的注解在被javadoc解析时，保留下来。 Inherited:被它修饰的 Annotation 将具有继承性。 三、JKD8中注解的新特性 可重复注解 ① 在MyAnnotation上声明@Repeatable，成员值为MyAnnotations.class ② MyAnnotation的**@Target和@Retention等元注解**与MyAnnotations相同。 类型注解（关于元注解@Target的参数类型ElementType） ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中（如：泛型声明）。 ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中。 使用某个注解的时候 如果注解的属性名为value，则value可以省略； 如果注解的属性值为数组，并且数组中只有一个元素，那么大括号也可以省略。 第十章&gt;&gt;&gt;集合1. Java集合框架概述一方面， 面向对象语言对事物的体现都是以对象的形式，为了方便对多个对象 的操作，就要对对象进行存储。另一方面，使用Array存储对象方面具有一些弊 端，而Java 集合就像一种容器，可以动态地把多个对象的引用放入容器中。 数组在内存存储方面的特点： 数组初始化以后，长度就确定了。 数组声明的类型，就决定了进行元素初始化时的类型 数组在存储数据方面的弊端： 数组初始化以后，长度就不可变了，不便于扩展 数组中提供的属性和方法少，不便于进行添加、删除、插入等操作，且效率不高。同时无法直接获取存储元素的个数 数组存储的数据是有序的、可以重复的。—-&gt; 存储数据的特点单一 Java 集合类可以用于存储数量不等的多个对象，还可用于保存具有映射关系的关联数组。 集合的使用场景 Java 集合可分为 Collection 和 Map 两种体系 Collection接口：单列数据，定义了存取一组对象的方法的集合 List：元素有序、可重复的集合 Set：元素无序、不可重复的集合 Map接口：双列数据，保存具有映射关系“key-value对”的集合 Collection接口继承树 Map接口继承树 2. Collection接口 Collection 接口是 List、Set 和 Queue 接口的父接口，该接口里定义的方法既可用于操作 Set 集合，也可用于操作 List 和 Queue 集合。 JDK不提供此接口的任何直接实现，而是提供更具体的子接口(如：Set和List)实现。 在 Java5 之前，Java 集合会丢失容器中所有对象的数据类型，把所有对象都 当成 Object 类型处理；从 JDK 5.0 增加了泛型以后，Java 集合可以记住容器中对象的数据类型。 向Collection接口的实现类的对象中添加数据obj时，要求obj所属类要重写equals()，因为此接口中的很多方法都需要调用equals()。 Collection接口方法 ① 添加 add(Object obj) addAll(Collection coll) ② 获取有效元素的个数 int size() ③ 清空集合 void clear() ④ 是否是空集合（集合的size是否为0） boolean isEmpty() ⑤ 是否包含某个元素 boolean contains(Object obj)：是通过元素的equals方法来判断是否是同一个对象（我们在判断时会调用obj对象所属类的equals()。传入的obj对象与集合中的每一个元素作比较，一旦匹配到了相同元素，就终止比较） boolean containsAll(Collection c)：也是调用元素的equals方法来比 较的。拿两个集合的元素逐个比较。 ⑥ 删除 boolean remove(Object obj) ：通过元素的equals方法判断是否是要删除的那个元素。只会删除找到的第一个元素 boolean removeAll(Collection coll)：取当前集合的差集（从当前集合中移除 coll 中与当前集合重复的所有元素。） ⑦ 取两个集合的交集 boolean retainAll(Collection c)：把交集的结果存在当前集合中，不影响c（直接对调用此方法的集合进行修改） ⑧ 集合是否相等 boolean equals(Object obj) ⑨ 转成对象数组 Object[] toArray() ⑩ 获取集合对象的哈希值 hashCode() ①① 遍历 iterator()：返回迭代器对象，用于集合遍历 Collection接口 总结 一、Collection接口的子接口及其实现类通过什么方法来进行对象的比较 List接口通过重写 equals()方法 来比较对象 HashSet类通过重写 equals() 和 hashCode() 来比较对象 TreeSet类通过 自然排序(Comparable)的compareTo() 和 定制排序(Comparator)的**compare()**来比较对象 3. Iterator迭代器接口使用 Iterator 接口遍历集合元素 Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。 GOF给迭代器模式的定义为：提供一种方法访问一个容器(container)对象中各个元素，而又不需暴露该对象的内部细节。迭代器模式，就是为容器而生。 Collection接口继承了java.lang.Iterable接口，该接口有一个iterator()方法，那么所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了 Iterator接口的对象。 Iterator 仅用于遍历集合，Iterator 本身并不提供承装对象的能力。如果需要创建Iterator 对象，则必须有一个被迭代的集合。 集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。 Iterator接口方法 **hasNext()**： 用于检测当前游标指向的下一个位置有没有元素 **next()**： 将游标往下移一个位置，然后返回此位置的元素对象 迭代器的执行原理 Iterator对象调用next()方法，指针下移，如果判断到有元素，则返回该位置的元素。 Iterator接口remove()方法 12345678910Iterator iter = coll.iterator();//回到起点while(iter.hasNext())&#123; //iter.remover() --&gt; 错误位置 Object obj = iter.next(); //判断当前位置的元素是否为某元素 if(obj.equals(&quot;Tom&quot;))&#123; iter.remove(); //iter.remover() --&gt; 错误位置 &#125;&#125; Iterator可以删除集合的元素，但是是遍历过程中通过迭代器对象的remove方法，不是集合对象的remove方法。 如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，再调用remove都会报IllegalStateException。 Iterator 总结 集合元素的遍历操作，使用迭代器Iterator接口 内部的方法：hasNext() 和 next() 集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。 内部定义了remove(),可以在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove() 3.1 foreach循环使用foreach循环遍历集合元素 foreach循环 又称 增强for循环 Java 5.0 提供了 foreach 循环迭代访问 **Collection **和 数组。 遍历操作不需获取 Collection 或 数组 的长度，无需使用索引访问元素。 遍历集合的底层调用Iterator完成操作。 foreach还可以用来遍历数组。 for(集合元素的类型 局部变量 : 集合对象)内部仍然调用了迭代器。每次循环都将集合中的每一个元素赋给局部变量。 1234567891011121314//练习：判断输出结果如何//由于是将数组str中的每一个元素赋给myStr，相当于创建了局部变量myStr，因此不会改变原来数组的元素对应的值public class ForTest &#123; public static void main(String[] args) &#123; String[] str = new String[5]; for (String myStr : str) &#123; myStr = &quot;atguigu&quot;; System.out.println(myStr); &#125; for (int i = 0; i &lt; str.length; i++) &#123; System.out.println(str[i]); &#125; &#125;&#125; 4. List接口List接口概述 鉴于Java中数组用来存储数据的局限性，我们通常使用List替代数组 List集合类中元素有序、且可重复，集合中的每个元素都有其对应的顺序索引。 List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。 JDK API中List接口的实现类常用的有：ArrayList、**LinkedList **和 Vector。 List接口方法 List除了从Collection集合继承的方法外，List 集合里添加了一些根据索引来操作集合元素的方法。 方法 说明 void add(int index, Object ele) 在index位置插入ele元素 boolean addAll(int index, Collection eles) 从index位置开始将eles中的所有元素添加进来 Object get(int index) 获取指定index位置的元素 int indexOf(Object obj) 返回obj在集合中首次出现的位置 int lastIndexOf(Object obj) 返回obj在当前集合中末次出现的位置 Object remove(int index) 移除指定index位置的元素，并返回此元素 Object set(int index, Object ele) 设置指定index位置的元素为ele List subList(int fromIndex, int toIndex) 返回从fromIndex到toIndex 4.1 ArrayList ArrayList 是 List 接口的典型实现类、主要实现类 本质上，ArrayList是对象引用的一个”变长”数组 ArrayList的JDK1.8之前与之后的实现区别？ JDK1.7：ArrayList像饿汉式，直接创建一个初始容量为10的数组 JDK1.8：ArrayList像懒汉式，一开始创建一个长度为0的数组，当添加第一个元素时再创建一个始容量为10的数组 Arrays.asList(…) 方法返回的 List 集合，既不是 ArrayList 实例，也不是Vector 实例。 Arrays.asList(…) 返回值是一个固定长度的 List 集合 4.2 LinkedList对于频繁的插入或删除元素的操作，建议使用LinkedList类，效率较高 新增方法： void addFirst(Object obj) void addLast(Object obj) Object getFirst() Object getLast() Object removeFirst() Object removeLast() LinkedList：双向链表，内部没有声明数组，而是定义了Node类型的 first 和 last， 用于记录首末元素。同时，定义内部类Node，作为LinkedList中保存数据的基本结构。Node除了保存数据，还定义了两个变量（用于存放其前后位置的引用地址）： prev变量记录前一个元素的位置 next变量记录下一个元素的位置 1234567891011//底层源码private static class Node&lt;E&gt; &#123; E item; Node&lt;E&gt; next; Node&lt;E&gt; prev; Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123; this.item = element; this.next = next; this.prev = prev; &#125;&#125; 4.3 VectorVector 是一个古老的集合，JDK1.0就有了。大多数操作与ArrayList相同，区别之处在于Vector是线程安全的。 在各种list中，最好把ArrayList作为默认选择。当插入、删除频繁时，使用LinkedList；Vector总是比ArrayList慢，所以尽量避免使用。 新增方法： void addElement(Object obj) void insertElementAt(Object obj,int index) void setElementAt(Object obj,int index) void removeElement(Object obj) void removeAllElements() List 总结 动态数组 ArrayList是List接口最典型的、使用最多的实现类，查找元素效率更高 LinkedList是在频繁插入或删除元素的操作，效率更高 Vector是线程安全的 一、面试题： ① 请问ArrayList&#x2F;LinkedList&#x2F;Vector的异同？谈谈你的理解？ArrayList底层是什么？扩容机制？Vector和ArrayList的最大区别? ② ArrayList和LinkedList的异同 12345二者都线程不安全，相对线程安全的Vector，执行效率高。此外，ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。对于随机访问get和set，ArrayList绝对优于LinkedList，因为LinkedList要移动指针。对于新增和删除操作add(特指插入)和remove，LinkedList比较占优势，因为ArrayList要移动数据，而LinkedList只需要通过双向链表的两个变量就可是实现这些操作，无需对很多个元素进行处理 ③ ArrayList和Vector的区别 12Vector和ArrayList几乎是完全相同的,唯一的区别在于Vector是同步类(synchronized)，属于强同步类。因此开销就比ArrayList要大，访问要慢。正常情况下,大多数的Java程序员使用ArrayList而不是Vector,因为同步完全可以由程序员自己来控制。Vector每次扩容请求其大小的2倍空间，而ArrayList是1.5倍。Vector还有一个子类Stack。（Collection中有一个方法可以将ArrayList转变成线程安全的） 二、List接口框架 List接口：存储有序的、可重复的数据。 –&gt;“动态”数组,替换原有的数组 ArrayList：作为List接口的主要实现类；线程不安全的，效率高；底层使用Object[] elementData存储 LinkedList：对于频繁的插入、删除操作，使用此类效率比ArrayList高；底层使用双向链表存储 Vector：作为List接口的古老实现类；线程安全的，效率低；底层使用Object[] elementData存储 三、ArrayList源码分析 ① jdk 7情况下 1234567//底层创建了长度是10的Object[]数组elementDataArrayList list = new ArrayList();list.add(123);//elementData[0] = new Integer(123);...list.add(11);//如果此次的添加导致底层elementData数组容量不够，则扩容。//默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。 结论：建议开发中使用带参的构造器：ArrayList list &#x3D; new ArrayList(int capacity)，指定要创建的数组初始长度 ② jdk 8中ArrayList的变化： 123456//底层Object[] elementData初始化为&#123;&#125;.并没有创建长度为10的数组ArrayList list = new ArrayList();list.add(123);//第一次调用add()时，底层才创建了长度10的数组，并将数据123添加到elementData[0]...//后续的添加和扩容操作与jdk 7 无异。 ③ 小结： jdk7中的ArrayList的对象的创建类似于单例的饿汉式 jdk8中的ArrayList的对象的创建类似于单例的懒汉式，延迟了数组的创建，节省内存 四、LinkedList源码分析 LinkedList list &#x3D; new LinkedList(); 内部声明了Node类型的first和last属性，默认值为null list.add(123);&#x2F;&#x2F;将123封装到Node中，创建了Node对象。 其中，Node定义为：体现了LinkedList的双向链表的说法 1234567891011private static class Node&lt;E&gt; &#123; E item; Node&lt;E&gt; next; Node&lt;E&gt; prev; Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123; this.item = element; this.next = next; this.prev = prev; &#125; &#125; 五、Vector的源码分析 jdk7和jdk8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组。在扩容方面，默认扩容为原来的数组长度的2倍。 六、List接口的常用方法 List接口在继承了接口的一些方法的同时，还新增了一些关于操作索引等的方法 123456789增：add(Object obj)删：remove(int index) / remove(Object obj)改：set(int index, Object ele)查：get(int index)插：add(int index, Object ele)长度：size()遍历：① Iterator迭代器方式 ② 增强for循环 ③ 普通的循环 5. Set接口Set接口概述 Set接口是Collection的子接口，Set接口没有提供额外的方法 Set 集合不允许包含相同的元素，如果试把两个相同的元素加入同一个Set 集合中，则添加操作失败。 Set 判断两个对象是否相同不是使用 &#x3D;&#x3D; 运算符，而是根据 equals() 方法 5.1 HashSet HashSet 是 Set 接口的典型实现，大多数时候使用 Set 集合时都使用这个实现类。 HashSet 按 Hash 算法 来存储集合中的元素，因此具有很好的存取、查找、删除性能。 Hash 算法：通过算法计算其哈希值得出对应存放在集合中的位置，根据当前位置是否有元素，进行下一步判断分析 HashSet 具有以下特点： 不能保证元素的排列顺序 HashSet 不是线程安全的 集合元素可以是 null HashSet 集合判断两个元素相等的标准：两个对象通过 hashCode() 方法比较相等，并且两个对象的 equals() 方法返回值也相等。 对于存放在Set容器中的对象，对应的类一定要重写equals()和hashCode(Object obj)方法，以实现对象相等规则。即：“相等的对象必须具有相等的散列码”。 向HashSet中添加元素的过程： 当向 HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode() 方法 来得到该对象的 hashCode 值，然后根据 hashCode 值，通过某种散列函数决定该对象 在 HashSet 底层数组中的存储位置。（这个散列函数会与底层数组的长度相计算得到在数组中的下标，并且这种散列函数计算还尽可能保证能均匀存储元素，越是散列分布，该散列函数设计的越好） 如果两个元素的hashCode()值相等，会再继续调用equals方法，如果equals方法结果为true，添加失败；如果为false，那么会保存该元素，但是该数组的位置已经有元素了， 那么会通过链表的方式继续链接。 如果两个元素的 equals() 方法返回 true，但它们的 hashCode() 返回值不相等，hashSet 将会把它们存储在不同的位置，但依然可以添加成功。【当没有重写 hashCode() 时，调用父类Object中的hashCode()，此时随机分配一个hash值，大概率上不想等，而equals()却返回的是true】 重写 hashCode() 方法的基本原则 在程序运行时，同一个对象多次调用 hashCode() 方法应该返回相同的值。 当两个对象的 equals() 方法比较返回 true 时，这两个对象的 hashCode()方法的返回值也应相等。 对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值。 重写 equals() 方法的基本原则 （以自定义的Customer类为例，何时需要重写equals()？） 当一个类有自己特有的“逻辑相等”概念,当改写equals()的时候，总是要改写hashCode()，根据一个类的equals方法（改写后），两个截然不同的实例有可能在逻辑上是相等的，但是，根据Object.hashCode()方法， 它们仅仅是两个对象。 因此，违反了“相等的对象必须具有相等的散列码”。 结论：复写equals方法的时候一般都需要同时复写hashCode方法。通常参与计算hashCode的对象的属性也应该参与到equals()中进行计算 拓展：Eclipse&#x2F;IDEA工具里hashCode()的重写 以Eclipse&#x2F;IDEA为例，在自定义类中可以调用工具自动重写equals和hashCode。问题：为什么用Eclipse&#x2F;IDEA复写hashCode方法，有31这个数字？ 选择系数的时候要选择尽量大的系数。因为如果计算出来的hash地址越大，所谓的“冲突”就越少，查找起来效率也会提高。（减少冲突） 并且31只占用5bits,相乘造成数据溢出的概率较小。 31可以 由i*31&#x3D;&#x3D; (i&lt;&lt;5)-1来表示,现在很多虚拟机里面都有做相关优化。（提高算法效率） 31是一个素数，素数作用就是如果我用一个数字来乘以这个素数，那么最终出来的结 果只能被素数本身和被乘数还有1来整除！(减少冲突) 5.2 LinkedHashSet LinkedHashSet 是 HashSet 的子类 LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置， 但它同时使用双向链表维护元素的次序，这使得元素看起来是以插入顺序保存的。 LinkedHashSet插入性能略低于 HashSet，但在迭代访问 Set 里的全部元素时有很好的性能。 LinkedHashSet 不允许集合元素重复。 LinkedHashSet底层结构 5.3 TreeSet TreeSet 是 SortedSet 接口的实现类，TreeSet 可以确保集合元素处于排序状态。 TreeSet底层使用红黑树结构存储数据 新增的方法如下： (了解) Comparator comparator() Object first() Object last() Object lower(Object e) Object higher(Object e) SortedSet subSet(fromElement, toElement) SortedSet headSet(toElement) SortedSet tailSet(fromElement) TreeSet 两种排序方法：自然排序和定制排序。默认情况下，TreeSet 采用自然排序。 5.3.1 自然排序 自然排序：TreeSet 会调用集合元素的 compareTo(Object obj) 方法来比较元素之间的大小关系，然后将集合元素按升序(默认情况)排列 如果试图把一个对象添加到 TreeSet 时，则该对象的类必须实现 Comparable接口。 实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即通过compareTo(Object obj) 方法的返回值来比较大小。 向 TreeSet 中添加元素时，只有第一个元素无须比较compareTo()方法，后面添加的所有元素都会调用compareTo()方法进行比较。 因为只有相同类的两个实例才会比较大小，所以向 TreeSet 中添加的应该是同 一个类的对象。 对于 TreeSet 集合而言，它判断两个对象是否相等的唯一标准是：两个对象通过 compareTo(Object obj) 方法比较返回值。 当需要把一个对象放入 TreeSet 中，重写该对象对应的 equals() 方法时，应保证该方法与 compareTo(Object obj) 方法有一致的结果：如果两个对象通过 equals() 方法比较返回 true，则通过 compareTo(Object obj) 方法比较应返回 0。 否则，让人难以理解。 5.3.2 定制排序 TreeSet的自然排序要求元素所属的类实现Comparable接口，如果元素所属的类没有实现Comparable接口，或不希望按照升序(默认情况)的方式排列元素或希望按照 其它属性大小进行排序，则考虑使用定制排序。定制排序，通过Comparator接口来 实现。需要重写compare(T o1, T o2)方法。 利用int compare(T o1, T o2)方法，比较o1和o2的大小：如果方法返回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示o1小于o2。 要实现定制排序，需要将实现Comparator接口的实例作为形参传递给TreeSet的构造器。 此时，仍然只能向TreeSet中添加类型相同的对象。否则发生ClassCastException异 常。 使用定制排序判断两个元素相等的标准是：通过Comparator比较两个元素返回了0。 Set接口 总结 类比于高中学的“集合” HashSet是Set接口最典型的实现类 LinkedList在迭代方面有更好的性能 TreeSet可以确保集合的元素处于排序状态，结合排序的两个接口实现 一、Set：存储无序的、不可重复的数据以HashSet为例说明： 无序性：不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的。 不可重复性：保证添加的元素按照equals()判断时，不能返回true。即：相同的元素只能添加一个。 二、添加元素的过程： 以HashSet为例： 我们向HashSet中添加元素a,首先调用元素a所在类的hashCode()方法，计算元素a的哈希值，此哈希值接着通过某种算法计算出在HashSet底层数组中的存放位置（即为：索引位置），判断数组此位置上是否已经有元素： 如果此位置上没有其他元素，则元素a添加成功。 —&gt;情况1 如果此位置上有其他元素b(或以链表形式存在的多个元素），则比较元素a与元素b的hash值： 如果hash值不相同，则元素a添加成功。—&gt;情况2 如果hash值相同，进而需要调用元素a所在类的equals()方法： equals()返回true,元素a添加失败 equals()返回false,则元素a添加成功。—&gt;情况3 对于添加成功的情况2和情况3而言：元素a 与已经存在指定索引位置上数据以链表的方式存储。 jdk 7 :元素a放到数组中，指向原来的元素。jdk 8 :原来的元素在数组中，指向元素a总结：七上八下 HashSet底层：数组+链表的结构。 三、hashCode()与equals()的联系（以Set集合为例）： 当两个对象的hash值不相等时，元素直接添加到集合； 当hash值相等时，调用对象所在类的equals() 四、LinkedHashSet的使用 LinkedHashSet作为HashSet的子类，在添加数据的同时，每个数据还维护了两个引用，记录此数据前一个数据和后一个数据。 优点：对于频繁的遍历操作，LinkedHashSet效率高于HashSet 五、TreeSet的使用 向TreeSet中添加的数据，要求是相同类的对象，此类还需是可比较的。 两种排序方式：自然排序（实现Comparable接口） 和 定制排序（Comparator） 自然排序中，调用一些方法（如：contains()）比较两个对象是否相同的标准为：compareTo()返回0，不再是equals()。 定制排序中，调用一些方法（如：contains()）比较两个对象是否相同的标准为：compare()返回0，不再是equals()。 六、Set接口使用场景 例题：在一个集合中已经有一些数据，再拿另外一些数据去跟集合中的数据去对比判断是否在其中。（Set接口和List接口的使用场景） 使用Set接口可以先通过计算哈希值直接定位到某个位置上，结合equals()便能快速比较出来结果；而使用List接口则需要拿每一个元素与集合中的每一个元素进行对比，效率较低 6. Map接口 Map接口概述 Map与Collection并列存在。用于保存具有映射关系的数据:key-value Map 中的 key 和 value 都可以是任何引用类型的数据 Map 中的 key 用Set来存放，不允许重复，即同一个 Map 对象所对应的类，须重写hashCode()和equals()方法常用String类作为Map的“键” key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到唯一的、确定的 value Map接口的常用实现类：HashMap、TreeMap、LinkedHashMap和 Properties。其中，HashMap是 Map 接口使用频率最高的实现类 Map接口常用方法 6.1 HashMap HashMap是 Map 接口使用频率最高的实现类。 允许使用null键和null值，与HashSet一样，不保证映射的顺序。 所有的key构成的集合是Set：无序的、不可重复的。所以，key所在的类要重写：equals()和hashCode() 所有的value构成的集合是Collection：无序的、可以重复的。所以，value所在的类要重写equals() 一个key-value构成一个entry 所有的entry构成的集合是Set：无序的、不可重复的 HashMap判断两个 key 相等的标准是：两个 key 通过 equals() 方法返回 true， hashCode 值也相等。 HashMap判断两个 value 相等的标准是：两个 value 通过 equals() 方法返回 true。 6.1.1 HashMap的存储结构 HashMap源码中的重要常量 JDK1.8 之前 HashMap的内部存储结构其实是数组和链表的结合。当实例化一个HashMap时， 系统会创建一个长度为Capacity的Entry数组，这个长度在哈希表中被称为容量 (Capacity)，在这个数组中可以存放元素的位置我们称之为“桶”(bucket)，每个 bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。 每个bucket中存储一个元素，即一个Entry对象，但每一个Entry对象可以带一个引 用变量，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Entry链。 而且新添加的元素作为链表的head。 添加元素的过程： 向HashMap中添加entry1(key，value)，需要首先计算entry1中key的哈希值(根据 key所在类的hashCode()计算得到)，此哈希值经过处理以后，得到在底层Entry[]数组中要存储的位置i。如果位置i上没有元素，则entry1直接添加成功。如果位置i上 已经存在entry2(或还有链表存在的entry3，entry4)，则需要通过循环的方法，依次 比较entry1中key和其他的entry。如果彼此hash值不同，则直接添加成功。如果 hash值不同，继续比较二者是否equals。如果返回值为true，则使用entry1的value 去替换equals为true的entry的value。如果遍历一遍以后，发现所有的equals返回都 为false,则entry1仍可添加成功。entry1指向原有的entry元素。 HashMap的扩容 当HashMap中的元素越来越多的时候，hash冲突的几率也就越来越高，因为数组的 长度是固定的。所以为了提高查询的效率，就要对HashMap的数组进行扩容，而在 HashMap数组扩容之后，最消耗性能的点就出现了：原数组中的数据必须重新计算 其在新数组中的位置，并放进去，这就是resize。 那么HashMap什么时候进行扩容呢？ 当HashMap 中的元素个数超过数组大小( 数组总大小length, 不是数组中个数 size)loadFactor 时 ，就会进行数组扩容 ， loadFactor 的 默认值 (DEFAULT_LOAD_FACTOR)为0.75，这是一个折中的取值。也就是说，默认情况下，数组大小(DEFAULT_INITIAL_CAPACITY)为16，那么当HashMap中元素个数 超过160.75&#x3D;12（这个值就是代码中的threshold值，也叫做临界值）的时候，就把 数组的大小扩展为 216&#x3D;32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，*所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。 JDK1.8之后 HashMap的内部存储结构其实是数组+链表+树的结合。当实例化一个 HashMap时，会初始化initialCapacity和loadFactor，在put第一对映射关系 时，系统会创建一个长度为initialCapacity的Node数组，这个长度在哈希表 中被称为容量(Capacity)，在这个数组中可以存放元素的位置我们称之为 “桶”(bucket)，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。 每个bucket中存储一个元素，即一个Node对象，但每一个Node对象可以带 一个引用变量next，用于指向下一个元素，因此，在一个桶中，就有可能 生成一个Node链。也可能是一个一个TreeNode对象，每一个TreeNode对象 可以有两个叶子结点left和right，因此，在一个桶中，就有可能生成一个 TreeNode树。而新添加的元素作为链表的last，或树的叶子结点。 那么HashMap什么时候进行扩容和树形化呢？ 当HashMap中的元素个数超过数组大小(数组总大小length,不是数组中个数 size)*loadFactor 时 ， 就 会 进 行 数 组 扩 容 ， loadFactor 的 默 认 值 (DEFAULT_LOAD_FACTOR)为0.75，这是一个折中的取值。也就是说，默认 情况下，数组大小(DEFAULT_INITIAL_CAPACITY)为16，那么当HashMap中 元素个数超过160.75&#x3D;12（这个值就是代码中的threshold值，也叫做临界值） 的时候，就把数组的大小扩展为 216&#x3D;32，即扩大一倍，然后重新计算每个元 素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知 HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。 当HashMap中的其中一个链的对象个数如果达到了8个，此时如果capacity没有 达到64，那么HashMap会先扩容解决，如果已经达到了64，那么这个链会变成 树，结点类型由Node变成TreeNode类型。当然，如果当映射关系被移除后， 下次resize方法时判断树的结点个数低于6个，也会把树再转为链表。 关于映射关系的key是否可以修改？answer：不要修改 映射关系存储到HashMap中会存储key的hash值，这样就不用在每次查找时重新计算 每一个Entry或Node（TreeNode）的hash值了，因此如果已经put到Map中的映射关 系，再修改key的属性，而这个属性又参与hashcode值的计算，那么会导致匹配不上 总结：JDK1.8相较于之前的变化： HashMap map &#x3D; new HashMap();&#x2F;&#x2F;默认情况下，先不创建长度为16的数组 当首次调用map.put()时，再创建长度为16的数组 数组为Node类型，在jdk7中称为Entry类型 形成链表结构时，新添加的key-value对在链表的尾部（七上八下） 当数组指定索引位置的链表长度&gt;8时，且map中的数组的长度&gt; 64时，此索引位置 上的所有key-value对使用红黑树进行存储。 面试题： 一、谈谈你对HashMap中put&#x2F;get方法的认识？如果了解再谈谈 HashMap的扩容机制？默认大小是多少？什么是负载因子( 或填充比)？什么是吞吐临界值(或阈值、threshold)？ 二、为什么不是与List一样，往集合添加元素的时候，当超过了集合的容量，再进行扩容，而是超过了计算得出的扩容临界值就进行扩容？ threshold(扩容临界值) &#x3D; 集合当前的容量 * 负载因子(0.75) 因为当数据超过了集合的容量再来扩容的情况下，一方面可能导致集合中某一个位置上以链表形式存储的数据过多，从而容易超过8个元素转换成使用红黑树来存储，导致结构比较复杂；另一方面会导致集合的容量得不到充分的利用，添加元素操作时，可能由于Hash计算得出的不是空元素的位置，因为从占比概率上来讲比较小，所以容易计算得出是有元素的位置，然后一直以链表的形式在某位置存储。 6.2 LinkedHashMap LinkedHashMap 是 HashMap 的子类 在HashMap存储结构的基础上，使用了一对双向链表来记录添加元素的顺序 与LinkedHashSet类似，LinkedHashMap 可以维护 Map 的迭代 顺序：迭代顺序与 Key-Value 对的插入顺序一致 HashMap中的内部类：Node 123456static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123; final int hash; final K key; V value; Node&lt;K,V&gt; next;&#125; LinkedHashMap中的内部类：Entry 123456static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; &#123; Entry&lt;K,V&gt; before, after; Entry(int hash, K key, V value, Node&lt;K,V&gt; next) &#123; super(hash, key, value, next); &#125;&#125; 6.3 TreeMapTreeMap存储 Key-Value 对时，需要根据 key-value 对进行排序。 TreeMap 可以保证所有的 Key-Value 对处于有序状态。 TreeSet底层使用红黑树结构存储数据 TreeMap 的 Key 的排序： 自然排序：TreeMap 的所有的 Key 必须实现 Comparable 接口，而且所有 的 Key 应该是同一个类的对象，否则将会抛出 ClasssCastException 定制排序：创建 TreeMap 时，传入一个 Comparator 对象，该对象负责对 TreeMap 中的所有 key 进行排序。此时不需要 Map 的 Key 实现 Comparable 接口 TreeMap判断两个key相等的标准：两个key通过compareTo()方法或者compare()方法返回0。 6.4 Hashtable Hashtable是个古老的 Map 实现类，JDK1.0就提供了。不同于HashMap， Hashtable是线程安全的。 Hashtable实现原理和HashMap相同，功能相同。底层都使用哈希表结构，查询速度快，很多情况下可以互用。 与HashMap不同，Hashtable 不允许使用 null 作为 key 和 value 与HashMap一样，Hashtable 也不能保证其中 Key-Value 对的顺序 Hashtable判断两个key相等、两个value相等的标准，与HashMap一致。 6.5 PropertiesProperties 类是 Hashtable 的子类，该对象用于处理属性文件 由于属性文件里的 key、value 都是字符串类型，所以 Properties 里的 key和 value 都是字符串类型 存取数据时，建议使用setProperty(String key,String value)方法和getProperty(String key)方法 123Properties pros = new Properties();pros.load(new FileInputStream(&quot;jdbc.properties&quot;)); String user = pros.getProperty(&quot;user&quot;); System.out.println(user); Map 总结 类似于高中的函数：y &#x3D; f(x) HashMap：Map接口最典型的实现类，使用最多 LinkedHashMap：HashMap的子类，便于迭代遍历Map集合 TreeMap：保证所有的 Key-Value 对处于有序状态。 Properties：处理属性配置文件 一、Map的实现类的结构： Map:双列数据，存储key-value对的数据 HashMap:作为Map的主要实现类；线程不安全的，效率高；存储null的key和value LinkedHashMap:保证在遍历map元素时，可以按照添加的顺序实现遍历。原因：在原有的HashMap底层结构基础上，添加了一对指针，指向前一个和后一个元素。对于频繁的遍历操作，此类执行效率高于HashMap。 TreeMap:保证按照添加的key-value对进行排序，实现排序遍历。此时考虑key的自然排序或定制排序。底层使用红黑树 Hashtable:作为古老的实现类；线程安全的，效率低；不能存储null的key和value Properties:常用来处理配置文件。key和value都是String类型 HashMap的底层：数组+链表 （jdk7及之前） 数组+链表+红黑树 （jdk 8） 二、Map结构的理解： Map中的key:无序的、不可重复的，使用Set存储所有的key —&gt; key所在的类要重写equals()和hashCode() （以HashMap为例） Map中的value:无序的、可重复的，使用Collection存储所有的value —&gt;value所在的类要重写equals() Map中的entry:无序的、不可重复的，使用Set存储所有的entry（一个键值对：key-value构成了一个Entry对象。） Entry是Map中的一个内部类 三、HashMap的底层实现原理？ ① 以jdk7为例说明： 12345HashMap map = new HashMap():在实例化以后，底层创建了长度是16的一维数组Entry[] table。...可能已经执行过多次put...map.put(key1,value1): 首先，调用key1所在类的hashCode()计算key1哈希值，此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置。 如果此位置上的数据为空，此时的key1-value1添加成功。 —-情况1 如果此位置上的数据不为空，(意味着此位置上存在一个或多个数据(以链表形式存在)),比较key1和已经存在的一个或多个数据的哈希值： 如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功。–情况2 如果key1的哈希值和已经存在的某一个数据(key2-value2)的哈希值相同，继续比较：调用key1所在类的equals(key2)方法，比较： 如果equals()返回false:此时key1-value1添加成功。—-情况3 如果equals()返回true:使用value1替换value2。 补充：关于情况2和情况3：此时key1-value1和原来的数据以链表的方式存储。 在不断的添加过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。 jdk8 相较于jdk7在底层实现方面的不同： new HashMap():底层没有创建一个长度为16的数组 jdk 8底层的数组是：Node[],而非Entry[] 首次调用put()方法时，底层创建长度为16的数组 jdk7底层结构只有：数组+链表。jdk8中底层结构：数组+链表+红黑树。 形成链表时，七上八下（jdk7:新的元素指向旧的元素。jdk8：旧的元素指向新的元素） 当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8 且当前数组的长度 &gt; 64时，此时此索引位置上的所数据改为使用红黑树存储。 DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16 DEFAULT_LOAD_FACTOR：HashMap的默认加载因子：0.75 threshold：扩容的临界值，=容量*填充因子：16 * 0.75 =&gt; 12 TREEIFY_THRESHOLD：Bucket中链表长度大于该默认值，转化为红黑树:8 MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量:64 四、LinkedHashMap的底层实现原理（了解） 1234567//源码中：static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; &#123; Entry&lt;K,V&gt; before, after;//能够记录添加的元素的先后顺序 Entry(int hash, K key, V value, Node&lt;K,V&gt; next) &#123; super(hash, key, value, next); &#125; &#125; 五、Map中定义的方法： ① 添加、删除、修改操作： Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中 void putAll(Map m)：将m中的所有key-value对存放到当前map中 Object remove(Object key)：移除指定key的key-value对，并返回value，如果key不存在则返回null void clear()：清空当前map中的所有数据，不等同于map &#x3D; null操作 ② 元素查询的操作： Object get(Object key)：获取指定key对应的value boolean containsKey(Object key)：是否包含指定的key boolean containsValue(Object value)：是否包含指定的value int size()：返回map中key-value对的个数 boolean isEmpty()：判断当前map是否为空 boolean equals(Object obj)：判断当前map和参数对象obj是否相等 ③ 元视图操作的方法： Set keySet()：返回所有key构成的Set集合 Collection values()：返回所有value构成的Collection集合 Set entrySet()：返回所有key-value对构成的Set集合 ④ 常用方法归纳： 添加：put(Object key,Object value) 删除：remove(Object key) 修改：put(Object key,Object value) 查询：get(Object key) 长度：size() 遍历：keySet() &#x2F; values() &#x2F; entrySet() 7. Collections工具类 Collections 是一个操作 Set、List 和 Map 等集合的工具类 Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法 排序操作：（均为static方法） reverse(List)：反转 List 中元素的顺序 shuffle(List)：对 List 集合元素进行随机排序 sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序 sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序 swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换 Collections常用方法 ① 查找、替换 Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素 Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素 Object min(Collection) Object min(Collection，Comparator) int frequency(Collection，Object)：返回指定集合中指定元素的出现次数 void copy(List dest,List src)：将src中的内容复制到dest中 boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值 ② 同步控制 Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集 合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全 问题 Collections 总结 reverse(List)：反转 List 中元素的顺序 shuffle(List)：对 List 集合元素进行随机排序 sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序 sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序 swap(List，int，int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换 Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素 Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素 Object min(Collection) Object min(Collection，Comparator) int frequency(Collection，Object)：返回指定集合中指定元素的出现次数 void copy(List dest,List src)：将src中的内容复制到dest中 boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值 补充：Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题 第十一章&gt;&gt;&gt;泛型1. 泛型的概述泛型：标签 举例： 中药店，每个抽屉外面贴着标签 超市购物架上很多瓶子，每个瓶子装的是什么，有标签 泛型的设计背景 集合容器类在设计阶段&#x2F;声明阶段不能确定这个容器到底实际存的是什么类型的 对象，所以在JDK1.5之前只能把元素类型设计为Object，JDK1.5之后使用泛型来解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于 这个元素如何保存，如何管理等是确定的，因此此时把元素的类型设计成一个 参数，这个类型参数叫做泛型。Collection，List，ArrayList 这个就 是类型参数，即泛型。 泛型的概念 所谓泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类 型或者是某个方法的返回值及参数类型。这个类型参数将在使用时（例如， 继承或实现这个接口，用这个类型声明变量、创建对象时）确定（即传入实 际的类型参数，也称为类型实参）。 从JDK1.5以后，Java引入了“参数化类型（Parameterized type）”的概念， 允许我们在创建集合时再指定集合元素的类型，正如：List，这表明 该List只能保存字符串类型的对象。 JDK1.5改写了集合框架中的全部接口和类，为这些接口、类增加了泛型支持， 从而可以在声明集合变量、创建集合对象时传入类型实参。 那么为什么要有泛型呢，直接Object不是也可以存储数据吗？ 解决元素存储的安全性问题，好比商品、药品标签，不会弄错。 解决获取数据元素时，需要类型强制转换的问题，好比不用每回拿商品、药 品都要辨别。 如下是在集合中没有泛型的情况 如下是在集合中有泛型的情况 Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生ClassCastException异常。同时，代码更加简洁、健壮。 2. 在集合中使用泛型123456789101112131415161718ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();//类型推断list.add(78);list.add(88);list.add(77);list.add(66);//遍历方式一：//for(Integer i : list)&#123;//不需要强转 //System.out.println(i);//&#125;//遍历方式二：Iterator&lt;Integer&gt; iterator = list.iterator();while(iterator.hasNext())&#123; System.out.println(iterator.next());&#125; 1234567891011121314151617Map&lt;String,Integer&gt; map = new HashMap&lt;String,Integer&gt;();map.put(&quot;Tom1&quot;,34);map.put(&quot;Tom2&quot;,44);map.put(&quot;Tom3&quot;,33);map.put(&quot;Tom4&quot;,32);//添加失败//map.put(33, &quot;Tom&quot;);Set&lt;Entry&lt;String,Integer&gt;&gt; entrySet = map.entrySet();Iterator&lt;Entry&lt;String,Integer&gt;&gt; iterator = entrySet.iterator();while(iterator.hasNext())&#123; Entry&lt;String,Integer&gt; entry = iterator.next(); System.out.println(entry.getKey() + &quot;---&gt;&quot; + entry.getValue());&#125; 3. 自定义泛型结构泛型的声明 interface List 和 class GenTest&lt;K,V&gt; 其中，T,K,V不代表值，而是表示类型。这里使用任意字母都可以。常用T表示，是Type的缩写。 泛型的实例化： 一定要在类名后面指定类型参数的值（类型）。如： 1List&lt;String&gt; strList = new ArrayList&lt;String&gt;(); Iterator&lt;Customer&gt; iterator = customers.iterator(); T只能是类，不能用基本数据类型填充。但可以使用包装类填充 把一个集合中的内容限制为一个特定的数据类型，这就是generics背后的核心思想 泛型类可能有多个参数，此时应将多个参数一起放在尖括号内。比如：&lt;E1,E2,E3&gt; 泛型类的构造器如下：public GenericClass()&#123;&#125;。 而下面是错误的：public GenericClass&lt;E&gt;()&#123;&#125; 实例化后，操作原来泛型位置的结构必须与指定的泛型类型一致。 泛型不同的引用不能相互赋值。 尽管在编译时ArrayList和ArrayList是两种类型，但是，在运行时只有一个ArrayList被加载到JVM中。 泛型如果不指定，将被擦除，泛型对应的类型均按照Object处理，但不等价 于Object。 经验：泛型要使用一路都用。要不用，一路都不要用。 如果泛型结构是一个接口或抽象类，则不可创建泛型类的对象。 jdk1.7，泛型的简化操作：ArrayList flist &#x3D; new ArrayList&lt;&gt;(); 泛型的指定中不能使用基本数据类型，可以使用包装类替换。 在类&#x2F;接口上声明的泛型，在本类或本接口中即代表某种类型，可以作为非静态 属性的类型、非静态方法的参数类型、非静态方法的返回值类型。但在静态方法 中不能使用类的泛型(因为泛型是类实例化对象的时候指明的)。 异常类不能是泛型的 不能使用new E[]。但是可以：E[] elements &#x3D; (E[])new Object[capacity]; 参考：ArrayList源码中声明：Object[] elementData，而非泛型参数类型数组。 父类有泛型，子类可以选择保留泛型也可以选择指定泛型类型： 子类不保留父类的泛型：按需实现 没有类型 擦除 具体类型 子类保留父类的泛型：泛型子类 全部保留 部分保留 结论：子类必须是“富二代”，子类除了指定或保留父类的泛型，还可以增加自己的泛型 12345678910111213141516class Father&lt;T1, T2&gt; &#123;&#125;// 子类不保留父类的泛型// 1)没有类型 擦除class Son1 extends Father &#123;// 等价于class Son extends Father&lt;Object,Object&gt;&#123;&#125;// 2)具体类型class Son2 extends Father&lt;Integer, String&gt; &#123;&#125;// 子类保留父类的泛型// 1)全部保留class Son3&lt;T1, T2&gt; extends Father&lt;T1, T2&gt; &#123;&#125;// 2)部分保留class Son4&lt;T2&gt; extends Father&lt;Integer, T2&gt; &#123;&#125; 1234567891011121314151617class Father&lt;T1, T2&gt; &#123;&#125;// 子类不保留父类的泛型// 1)没有类型 擦除class Son&lt;A, B&gt; extends Father&#123;//等价于class Son extends Father&lt;Object,Object&gt;&#123;&#125;// 2)具体类型class Son2&lt;A, B&gt; extends Father&lt;Integer, String&gt; &#123;&#125;// 子类保留父类的泛型// 1)全部保留class Son3&lt;T1, T2, A, B&gt; extends Father&lt;T1, T2&gt; &#123;&#125;// 2)部分保留class Son4&lt;T2, A, B&gt; extends Father&lt;Integer, T2&gt; &#123;&#125; 3.1 泛型类12345678910111213141516171819202122232425262728293031class Person&lt;T&gt; &#123; // 使用T类型定义变量 private T info; // 使用T类型定义一般方法 public T getInfo() &#123; return info; &#125; public void setInfo(T info) &#123; this.info = info; &#125; // 使用T类型定义构造器 public Person() &#123; &#125; public Person(T info) &#123; this.info = info; &#125; // static的方法中不能声明泛型 //public static void show(T t) &#123; // //&#125; // 不能在try-catch中使用泛型定义 //public void test() &#123; //try &#123; // //&#125; catch (MyException&lt;T&gt; ex) &#123; // //&#125; //&#125;&#125; 3.2 泛型方法 方法，也可以被泛型化，不管此时定义在其中的类是不是泛型类。在泛型 方法中可以定义泛型参数，此时，参数的类型就是传入数据的类型。 泛型方法的格式： [访问权限] &lt;泛型&gt; 返回类型 方法名([泛型标识 参数名称]) 抛出的异常 泛型方法声明泛型时也可以指定上限(在12.5中讲) 1234567public class DAO &#123; public &lt;E&gt; E get(int id, E e) &#123; E result = null; return result; &#125;&#125; 4. 泛型在继承上的体现如果B是A的一个子类型（子类或者子接口），而G是具有泛型声明的类或接口，G并不是G的子类型！ 比如：String是Object的子类，但是List并不是List的子类。 如果B是A的一个子类型（子类或者子接口），而G是具有泛型声明的类或接口，B是A的子类型！ 比如：LinkedHashMap是HashMap的子类，则LinkedHashMap仍然是HashMap的子类 5. 通配符的使用 使用类型通配符：？ 比如：List ，Map List&lt;?&gt;是List、List等各种泛型List的父类。 读取List&lt;?&gt;的对象list中的元素时，永远是安全的，因为不管list的真实类型 是什么，它包含的都是Object。 写入list中的元素时，不行。因为我们不知道c的元素类型，我们不能向其中 添加对象。 唯一的例外是null，它是所有类型的成员。 将任意元素加入到其中不是类型安全的： 123Collection&lt;?&gt; c = new ArrayList&lt;String&gt;(); c.add(new Object()); // 编译时错误 因为我们不知道c的元素类型，我们不能向其中添加对象。add方法有类型参数E作为集 合的元素类型。我们传给add的任何参数都必须是一个未知类型的子类。因为我们不知道那是什么类型，所以我们无法传任何东西进去。 唯一的例外的是null，它是所有类型的成员。 另一方面，我们可以调用get()方法并使用其返回值。返回值是一个未知的 类型，但是我们知道，它总是一个Object。 注意点： 1234567891011//注意点1：编译错误：不能用在泛型方法声明上，返回值类型前面&lt;&gt;不能使用?public static &lt;?&gt; void test(ArrayList&lt;?&gt; list)&#123;&#125;//注意点2：编译错误：不能用在泛型类的声明上class GenericTypeClass&lt;?&gt;&#123;&#125;//注意点3：编译错误：不能用在创建对象上，右边属于创建集合对象 ArrayList&lt;?&gt; list2 = new ArrayList&lt;?&gt;(); 有限制的通配符 &lt;?&gt; 允许所有泛型的引用调用 通配符指定上限 上限extends：使用时指定的类型必须是继承某个类，或者实现某个接口，即&lt;&#x3D; 通配符指定下限 下限super：使用时指定的类型不能小于操作的类，即&gt;&#x3D; 举例： &lt;? extends Number&gt; (无穷小 , Number] 只允许泛型为Number及Number子类的引用调用 &lt;?** **super** **Number&gt; [Number , 无穷大**)** 只允许泛型为Number及Number父类的引用调用 &lt;?** **extends** **Comparable&gt; 只允许泛型为实现Comparable接口的实现类的引用调用 泛型 总结 用于指明一个容器里面可以存放的元素类型， 泛型类：实例化泛型类的时候指明 泛型方法：泛型参数是在调用方法时确定的。并非在实例化类时确定。 泛型不同的引用不能相互赋值。 一、在集合中使用泛型 ① 集合接口或集合类在jdk5.0时都修改为带泛型的结构。 ② 在实例化集合类时，可以指明具体的泛型类型 ③ 指明完以后，在集合类或接口中凡是定义类或接口时，内部结构（比如：方法、构造器、属性等）使用到类的泛型的位置，都指定为实例化的泛型类型。比如：add(E e) —&gt;实例化以后：add(Integer e) ④ 注意点：泛型的类型必须是类，不能是基本数据类型。需要用到基本数据类型的位置，拿包装类替换 ⑤ 如果实例化时，没有指明泛型的类型。默认类型为java.lang.Object类型。 二、泛型类与泛型方法 ① 泛型类： 静态方法中不能使用类的泛型。 如果定义了泛型类，实例化没有指明类的泛型，则认为此泛型类型为Object类型 由于子类在继承带泛型的父类时，指明了泛型类型。则实例化子类对象时，不再需要指明泛型。 ② 泛型方法： 在方法中出现了泛型的结构，泛型参数与类的泛型参数没有任何关系。 换句话说，泛型方法所属的类是不是泛型类都没有关系。 泛型方法，可以声明为静态的。原因：泛型参数是在调用方法时确定的。并非在实例化类时确定。 三、泛型在继承方面的体现 虽然类A是类B的父类，但是G 和G二者不具备子父类关系，二者是并列关系。 补充：类A是类B的父类，A 是 B 的父类 四、通配符的使用 ① 通配符：? 类A是类B的父类，G和G是没有关系的，二者共同的父类是：G&lt;?&gt; 添加(写入)：对于List&lt;?&gt;就不能向其内部添加数据。（除了添加null之外。） 获取(读取)：允许读取数据，读取的数据类型为Object。 ② 有限制条件的通配符 ? extends A:G&lt;? extends A&gt; 可以作为G和G的父类，其中B是A的子类 ? super A:G&lt;? super A&gt; 可以作为G和G的父类，其中B是A的父类 第十二章&gt;&gt;&gt;IO流1. File类的使用 java.io.File类：文件和文件目录路径的抽象表示形式，与平台无关 File 能新建、删除、重命名文件和目录，但 File 不能访问文件内容本身。如果需要访问文件内容本身，则需要使用输入&#x2F;输出流。 想要在Java程序中表示一个真实存在的文件或目录，那么必须有一个File对 象，但是Java程序中的一个File对象，可能没有一个真实存在的文件或目录。 File对象可以作为参数传递给流的构造器 常用构造器 ① public File(String pathname) 以pathname为路径创建File对象，可以是绝对路径或者相对路径，如果pathname是相对路径，则默认的当前路径在系统属性user.dir中存储。 绝对路径：是一个固定的路径,从盘符开始 相对路径：是相对于某个位置开始 ② public File(String parent,String child) 以parent为父路径，child为子路径创建File对象。 ③ public File(File parent,String child) 根据一个父File对象和子文件路径创建File对象 路径中的每级目录之间用一个路径分隔符隔开。 路径分隔符和系统有关： windows和DOS系统默认使用“\\”来表示 UNIX和URL使用“&#x2F;”来表示 Java程序支持跨平台运行，因此路径分隔符要慎用。 为了解决这个隐患，File类提供了一个常量： public static final String separator。根据操作系统，动态的提供分隔符。 举例： 123File file1 = new File(&quot;d:\\\\atguigu\\\\info.txt&quot;);File file2 = new File(&quot;d:&quot; + File.separator + &quot;atguigu&quot; + File.separator + &quot;info.txt&quot;);File file3 = new File(&quot;d:/atguigu&quot;); ① File类的获取功能 public String getAbsolutePath()：获取绝对路径 public String getPath() ：获取路径 public String getName() ：获取名称 public String getParent()：获取上层文件目录路径。若无，返回null public long length() ：获取文件长度（即：字节数）。不能获取目录的长度。 public long lastModified() ：获取最后一次的修改时间，毫秒值 public String[] list() ：获取指定目录下的所有文件或者文件目录的名称数组 public File[] listFiles() ：获取指定目录下的所有文件或者文件目录的File数组 ② File类的重命名功能 public boolean renameTo(File dest):把文件重命名为指定的文件路径 ③ File类的判断功能 public boolean isDirectory()：判断是否是文件目录 public boolean isFile() ：判断是否是文件 public boolean exists() ：判断是否存在 public boolean canRead() ：判断是否可读 public boolean canWrite() ：判断是否可写 public boolean isHidden() ：判断是否隐藏 ④ File类的创建功能 public boolean createNewFile() ：创建文件。若文件存在，则不创建，返回false public boolean mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。 如果此文件目录的上层目录不存在，也不创建。 public boolean mkdirs() ：创建文件目录。如果上层文件目录不存在，一并创建 注意事项：如果你创建文件或者文件目录没有写盘符路径，那么，默认在项目路径下。 ⑤ File类的删除功能 public boolean delete()：删除文件或者文件夹 Java中的删除不走回收站。 要删除一个文件目录，请注意该文件目录内不能包含文件或者文件目录 2. IO流原理及流的分类Java IO原理 I&#x2F;O是Input&#x2F;Output的缩写， I&#x2F;O技术是非常实用的技术，用于处理设备之间的数据传输。如读&#x2F;写文件，网络通讯等。 Java程序中，对于数据的输入&#x2F;输出操作以“**流(stream)**” 的方式进行。 java.io包下提供了各种“流”类和接口，用以获取不同种类的 数据，并通过标准的方法输入或输出数据。 输入input：读取外部数据（磁 盘、光盘等存储设备的数据）到 程序（内存）中。 输出output：将程序（内存） 数据输出到磁盘、光盘等存储设 备中。 流的分类 按操作数据单位不同分为：字节流**(8** bit)，字符流(16 bit) 按数据流的流向不同分为：输入流，输出流 按流的角色的不同分为：节点流，处理流 Java的IO流共涉及40多个类，实际上非常规则，都是从如下4个抽象基类派生的。 由这四个类派生出来的子类名称都是以其父类名作为子类名后缀。 (抽象基类) 字节流 字符流 输入流 InputStream Reader 输出流 OutputStream Writer IO流体系 节点流和处理流 ① 节点流：直接从数据源或目的地读写数据 ② 处理流：不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提 供更为强大的读写功能。 处理流不一定包在节点流上，也可以是包在其他处理流上 2.1 InputStream &amp; Reader InputStream 和 Reader 是所有输入流的基类。 InputStream（典型实现：FileInputStream） int read() int read(byte[] b) int read(byte[] b, int off, int len) Reader（典型实现：FileReader） int read() int read(char [] c) int read(char [] c, int off, int len) 程序中打开的文件 IO 资源不属于内存里的资源，垃圾回收机制无法回收该资源，所以应该显式关闭文件 IO 资源。 FileInputStream 从文件系统中的某个文件中获得输入字节。 FileInputStream用于读取非文本数据之类的原始字节流。 要读取字符流，需要使用 FileReader 2.1.1 InputStream int read() 从输入流中读取数据的下一个字节。返回 0 到 255 范围内的int 字节值。如果因为已经到达流末尾而没有可用的字节，则返回值-1。 int read(byte[] b) 从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。如果因为已经到达流末尾而没有可用的字节，则返回值 -1。否则以整数形式返回实际读取的字节数。 int read(byte[] b, int off,int len) 将输入流中最多 len 个数据字节读入 byte 数组。尝试读取 len 个字节，但读取的字节也可能小于该值。以整数形式返回实际读取的字节数。如果因为流位于文件末尾而没有可用的字节，则返回值-1。 public void close() throws IOException 关闭此输入流并释放与该流关联的所有系统资源。 2.1.2 Reader int read() 读取单个字符。作为整数读取的字符，范围在 0 到 65535 之间 (0x00-0xffff)（2个字节的Unicode码），如果已到达流的末尾，则返回 -1 int read(char[] cbuf) 将字符读入数组。如果已到达流的末尾，则返回 -1。否则返回本次读取的字符数。 int read(char[] cbuf,int off,int len) 将字符读入数组的某一部分。存到数组cbuf中，从off处开始存储，最多读len个字 符。如果已到达流的末尾，则返回-1。否则返回本次读取的字符数。 public void close() throws IOException 关闭此输入流并释放与该流关联的所有系统资源。 2.2 OutputStream &amp; Writer OutputStream 和 Writer 也非常相似： void write(int b&#x2F;int c); void write(byte[] b&#x2F;char[] cbuf); void write(byte[] b&#x2F;char[] buff, int off, int len); void flush(); void close(); 需要先刷新，再关闭此流 因为字符流直接以字符作为操作单位，所以 Writer 可以用字符串来替换字符数组， 即以 String 对象作为参数 void write(String str); void write(String str, int off, int len); FileOutputStream 从文件系统中的某个文件中获得输出字节。 FileOutputStream 用于写出非文本数据之类的原始字节流。 要写出字符流，需要使用 FileWriter 2.2.1 OutputStream void write(int b) 将指定的字节写入此输出流。write 的常规协定是：向输出流写入一个字节。要写 入的字节是参数b 的八个低位。b 的 24 个高位将被忽略。 即写入0~255范围的。 void write(byte[] b) 将b.length 个字节从指定的byte 数组写入此输出流。write(b) 的常规协定是：应该 与调用write(b, 0, b.length) 的效果完全相同。 void write(byte[] b,int off,int len) 将指定byte 数组中从偏移量 off 开始的len 个字节写入此输出流。 public void flush()throws IOException 刷新此输出流并强制写出所有缓冲的输出字节，调用此方法指示应将这些字节立即写入它们预期的目标。 public void close() throws IOException 关闭此输出流并释放与该流关联的所有系统资源。 2.2.2 Writer void write(int c) 写入单个字符。要写入的字符包含在给定整数值的 16 个低位中，16 高位被忽略。 即写入0 到 65535 之间的Unicode码。 void write(char[] cbuf) 写入字符数组。 void write(char[] cbuf,int off,int len) 写入字符数组的某一部分。从off开始，写入len个字符 void write(String str) 写入字符串。 void write(String str,int off,int len) 写入字符串的某一部分。 void flush() 刷新该流的缓冲，则立即将它们写入预期目标。 public void close() throws IOException 关闭此输出流并释放与该流关联的所有系统资源。 3. 节点流(或文件流) 定义文件路径时，注意：可以用“&#x2F;”或者“\\”。 在写入一个文件时，如果使用构造器FileOutputStream(file)，则目录下有同名文件将被覆盖。 如果使用构造器FileOutputStream(file,true)，则目录下的同名文件不会被覆盖， 在文件内容末尾追加内容。 在读取文件时，必须保证该文件已存在，否则报异常。 字节流操作字节，比如：.mp3，.avi，.rmvb，mp4，.jpg，.doc，.ppt 字符流操作字符，只能操作普通文本文件。最常见的文本文件：.txt，.java，.c，.cpp 等语言的源代码。尤其注意.doc,excel,ppt这些不是文 本文件。 读取文件（FileReader（字符）、FileInputStream（字节）） 建立一个流对象，将已存在的一个文件加载进流。 FileReader fr &#x3D; new FileReader(new File(“Test.txt”)); 创建一个临时存放数据的数组。 char[] ch &#x3D; new char[1024]; 调用流对象的读取方法将流中的数据读入到数组中。 fr.read(ch); 关闭资源。 fr.close(); 写入文件（FileWriter（字符）、FileOutputStream（字节）） 创建流对象，建立数据存放文件 FileWriter fw &#x3D; new FileWriter(new File(“Test.txt”)); 调用流对象的写入方法，将数据写入流 fw.write(“atguigu-songhongkang”); 关闭流资源，并将流中的数据清空到文件中。 fw.close(); 4. 缓冲流 为了提高数据读写的速度，Java API提供了带缓冲功能的流类，在使用这些流类 时，会创建一个内部缓冲区数组，缺省使用8192个字节(8Kb)的缓冲区。 缓冲流要“套接”在相应的节点流之上，根据数据操作单位可以把缓冲流分为： BufferedInputStream 和 BufferedOutputStream BufferedReader 和 BufferedWriter 当读取数据时，数据按块读入缓冲区，其后的读操作则直接访问缓冲区 当使用BufferedInputStream读取字节文件时，BufferedInputStream会一次性从 文件中读取8192个(8Kb)，存在缓冲区中，直到缓冲区装满了，才重新从文件中 读取下一个8192个字节数组。 向流中写入字节时，不会直接写到文件，先写到缓冲区中直到缓冲区写满， BufferedOutputStream才会把缓冲区中的数据一次性写到文件里。使用方法 flush()可以强制将缓冲区的内容全部写入输出流 关闭流的顺序和打开流的顺序相反。只要关闭最外层流即可，关闭最外层流也 会相应关闭内层节点流 flush()方法的使用：手动将buffer中内容写入文件 如果是带缓冲区的流对象的close()方法，不但会关闭流，还会在关闭流之前刷 新缓冲区，关闭后不能再写出 5. 转换流 转换流提供了在字节流和字符流之间的转换 Java API提供了两个转换流： InputStreamReader：将InputStream转换为Reader OutputStreamWriter：将Writer转换为OutputStream 字节流中的数据都是字符时，转成字符流操作更高效。 很多时候我们使用转换流来处理文件乱码问题。实现编码和 解码的功能。 5.1 InputStreamReader 实现将字节的输入流按指定字符集转换为字符的输入流。 需要和InputStream“套接”。 构造器 public InputStreamReader(InputStream in) public InputSreamReader(InputStream in,String charsetName) 如： Reader isr = new InputStreamReader(System.in,”gbk”); 第二个参数为指定字符集 5.2 OutputStreamWriter 实现将字符的输出流按指定字符集转换为字节的输出流。 需要和OutputStream“套接”。 构造器 public OutputStreamWriter(OutputStream out) public OutputSreamWriter(OutputStream out,String charsetName) 5.3 补充：字符编码编码表的由来 计算机只能识别二进制数据，早期由来是电信号。为了方便应用计算机，让它可以识 别各个国家的文字。就将各个国家的文字用数字来表示，并一一对应，形成一张表。 这就是编码表。 常见的编码表 ASCII：美国标准信息交换码。 用一个字节的7位可以表示。 ISO8859-1：拉丁码表。欧洲码表 用一个字节的8位表示。 GB2312：中国的中文编码表。最多两个字节编码所有字符 GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编码 Unicode：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。 UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。 Unicode不完美，这里就有三个问题，一个是，我们已经知道，英文字母只用 一个字节表示就够了，第二个问题是如何才能区别Unicode和ASCII？计算机 怎么知道两个字节表示一个符号，而不是分别表示两个符号呢？第三个，如果 和GBK等双字节编码方式一样，用最高位是1或0表示两个字节和一个字节， 就少了很多值无法用于表示字符，不够表示所有字符。Unicode在很长一段时 间内无法推广，直到互联网的出现。 面向传输的众多 UTF（UCS Transfer Format）标准出现了，顾名思义，UTF- 8就是每次8个位传输数据，而UTF-16就是每次16个位。这是为传输而设计的 编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。 Unicode只是定义了一个庞大的、全球通用的字符集，并为每个字符规定了唯 一确定的编号，具体存储成什么样的字节流，取决于字符编码方案。推荐的 Unicode编码是UTF-8和UTF-16。 编码：字符串–&gt;字节数组 解码：字节数组–&gt;字符串 转换流的编码应用 可以将字符按指定编码格式存储 可以对文本数据按指定编码格式来解读 指定编码表的动作由构造器完成 6. 标准输入、输出流 System.in和System.out分别代表了系统标准的输入和输出设备 默认输入设备是：键盘，输出设备是：显示器 System.in的类型是InputStream System.out的类型是PrintStream，其是OutputStream的子类 FilterOutputStream 的子类 重定向：通过System类的setIn，setOut方法对默认设备进行改变。 public static void setIn(InputStream in) public static void setOut(PrintStream out) 7. 打印流 实现将基本数据类型的数据格式转化为字符串输出 打印流：PrintStream和PrintWriter 提供了一系列重载的print()和println()方法，用于多种数据类型的输出 PrintStream和PrintWriter的输出不会抛出IOException异常 PrintStream和PrintWriter有自动flush功能 PrintStream 打印的所有字符都使用平台的默认字符编码转换为字节。 在需要写入字符而不是写入字节的情况下，应该使用 PrintWriter 类。 System.out返回的是PrintStream的实例 8. 数据流 为了方便地操作Java语言的基本数据类型和String的数据，可以使用数据流。 数据流有两个类：(用于读取和写出基本数据类型、String类的数据） DataInputStream 和 DataOutputStream 分别“套接”在 InputStream 和 OutputStream 子类的流上 DataInputStream中的方法 DataOutputStream中的方法 将上述的方法的read改为相应的write即可。 9. 对象流 ObjectInputStream和OjbectOutputSteam 用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可 以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。 序列化：用ObjectOutputStream类保存基本类型数据或对象的机制 反序列化：用ObjectInputStream类读取基本类型数据或对象的机制 ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量 对象的序列化 对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从 而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传 输到另一个网络节点。&#x2F;&#x2F;当其它程序获取了这种二进制流，就可以恢复成原 来的Java对象 序列化的好处在于可将任何实现了Serializable接口的对象转化为字节数据， 使其在保存和传输时可被还原 序列化是 RMI（Remote Method Invoke – 远程方法调用）过程的参数和返 回值都必须实现的机制，而 RMI 是 JavaEE 的基础。因此序列化机制是 JavaEE 平台的基础 如果需要让某个对象支持序列化机制，则必须让对象所属的类及其属性是可 序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一。 否则，会抛出NotSerializableException异常 Serializable Externalizable 凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量： private static final long serialVersionUID; serialVersionUID用来表明类的不同版本间的兼容性。简言之，其目的是以序列化对象 进行版本控制，有关各版本反序列化时是否兼容。 如果类没有显示定义这个静态常量，它的值是Java运行时环境根据类的内部细节自 动生成的。若类的实例变量做了修改，serialVersionUID 可能发生变化。故建议， 显式声明。 简单来说，Java的序列化机制是通过在运行时判断类的serialVersionUID来验 证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的 serialVersionUID与本地相应实体类的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常。(InvalidCastException) 若某个类实现了 Serializable 接口，该类的对象就是可序列化的： 创建一个 ObjectOutputStream 调用 ObjectOutputStream 对象的 writeObject(对象) 方法输出可序列化对象 注意写出一次，操作flush()一次 反序列化 创建一个 ObjectInputStream 调用 readObject() 方法读取流中的对象 强调：如果某个类的属性不是基本数据类型或 String 类型，而是另一个 引用类型，那么这个引用类型必须是可序列化的，否则拥有该类型的 Field 的类也不能序列化 序列化：将对象写入到磁盘或者进行网络传输。（要求对象必须实现序列化） 反序列化：将磁盘中的对象数据源读出。 10. 随机存取文件流10.1 RandomAccessFile类 RandomAccessFile 声明在java.io包下，但直接继承于java.lang.Object类。并 且它实现了DataInput、DataOutput这两个接口，也就意味着这个类既可以读也 可以写。 RandomAccessFile 类支持 “随机访问” 的方式，程序可以直接跳到文件的任意地方来读、写文件 支持只访问文件的部分内容 可以向已存在的文件后追加内容 RandomAccessFile 对象包含一个记录指针，用以标示当前读写处的位置。 RandomAccessFile 类对象可以自由移动记录指针： **long getFilePointer()**：获取文件记录指针的当前位置 **void seek(long pos)**：将文件记录指针定位到 pos 位置 构造器 public RandomAccessFile(File file, String mode) public RandomAccessFile(String name, String mode) 创建 RandomAccessFile 类实例需要指定一个 mode 参数，该参数指 定 RandomAccessFile 的访问模式： r: 以只读方式打开 rw：打开以便读取和写入 **rwd:**打开以便读取和写入；同步文件内容的更新 **rws:**打开以便读取和写入；同步文件内容和元数据的更新 如果模式为只读r。则不会创建文件，而是会去读取一个已经存在的文件， 如果读取的文件不存在则会出现异常。 如果模式为rw读写。如果文件不 存在则会去创建文件，如果存在则不会创建。 RandomAccessFile类的应用场景 我们可以用RandomAccessFile这个类，来实现一个多线程断点下载的功能，用过下载工具的朋友们都知道，下载前都会建立两个临时文件，一个是与 被下载文件大小相同的空文件，另一个是记录文件指针的位置文件，每次 暂停的时候，都会保存上一次的指针，然后断点下载的时候，会继续从上 一次的地方下载，从而实现断点下载或上传的功能，有兴趣的朋友们可以 自己实现下。 11. NIO.2中Path、 Paths、Files类的使用Java NIO概述 Java NIO (New IO，Non-Blocking IO)是从Java 1.4版本开始引入的一套新 的IO API，可以替代标准的Java IO API。NIO与原来的IO有同样的作用和目 的，但是使用的方式完全不同，NIO支持面向缓冲区的(IO是面向流的)、基于 通道的IO操作。NIO将以更加高效的方式进行文件的读写操作。 Java API中提供了两套NIO，一套是针对标准输入输出NIO，另一套就是网络编程NIO。 |—–java.nio.channels.Channel |—–FileChannel:处理本地文件 |—–SocketChannel：TCP网络编程的客户端的Channel |—–ServerSocketChannel:TCP网络编程的服务器端的Channel |—–DatagramChannel：UDP网络编程中发送端和接收端的Channel NIO.2 随着 JDK 7 的发布，Java对NIO进行了极大的扩展，增强了对 文件处理和文件系统特性的支持，以至于我们称他们为 NIO.2。 因为 NIO 提供的一些功能，NIO已经成为文件处理中越来越重要 的部分。 Path、Paths和Files核心API 早期的Java只提供了一个File类来访问文件系统，但File类的功能比较有限，所 提供的方法性能也不高。而且，大多数方法在出错时仅返回失败，并不会提供异 常信息。 NIO. 2为了弥补这种不足，引入了Path接口，代表一个平台无关的平台路径，描述了目录结构中文件的位置。Path可以看成是File类的升级版本，实际引用的资 源也可以不存在。 在以前IO操作都是这样写的: import java.io.File; File file &#x3D; new File(“index.html”); 但在Java7 中，我们可以这样写： import java.nio.file.Path; import java.nio.file.Paths; Path path &#x3D; Paths.get(“index.html”); 同时，NIO.2在java.nio.file包下还提供了Files、Paths工具类，Files包含 了大量静态的工具方法来操作文件；Paths则包含了两个返回Path的静态 工厂方法。 Paths 类提供的静态 get() 方法用来获取 Path 对象： static Path get(String first, String … more) : 用于将多个字符串串连成路径 static Path get(URI uri): 返回指定uri对应的Path路径 11.1 Path接口Path常用方法 11.2 Files类 IO流 总结 流是用来处理数据的。 处理数据时，一定要先明确数据源，与数据目的地 数据源可以是文件，可以是键盘。 数据目的地可以是文件、显示器或者其他设备。 而流只是在帮助数据进行传输,并对传输的数据进行处理，比如过滤处理、 转换处理等。 一、流的分类以及常见流的体系结构 操作数据单位：字节流、字符流 数据的流向：输入流、输出流 流的角色：节点流、处理流 二、转换流的使用 转换流：属于字符流 InputStreamReader：将一个字节的输入流转换为字符的输入流 OutputStreamWriter：将一个字符的输出流转换为字节的输出流 作用：提供字节流与字符流之间的转换 解码：字节、字节数组 —&gt;字符数组、字符串 编码：字符数组、字符串 —&gt; 字节、字节数组 三、对象序列化需要满足的条件 需要实现接口：Serializable 当前类提供一个全局常量：serialVersionUID 除了当前Person类需要实现Serializable接口之外，还必须保证其内部所有属性也必须是可序列化的。（默认情况下，基本数据类型可序列化） ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量 四、输入、输出的标准化过程 输入过程 ① 创建File类的对象，指明读取的数据的来源（要求此文件一定要存在） ② 创建相应的输入流，将File类对象作为参数，传入流的构造器中 ③ 具体的读入过程：创建相应的byte[] 或 char[] ④ 关闭流资源 程序中出现的异常需要使用try-catch-finally处理 输出过程 ① 创建File类的对象，指明写出的数据的位置（不要求此文件一定要存在） ② 创建相应的输出流，将File类对象作为参数，传入流的构造器中 ③ 具体的写出过程：创建相应的byte[] 或 char[] ④ 关闭流资源 程序中出现的异常需要使用try-catch-finally处理 五、节点流和处理流 节点流可以直接作用在文件上，对数据进行读写操作；处理流包在节点流或者处理流上，对数据进行读写操作 第十三章&gt;&gt;&gt;网络编程1. 网络编程的概述Java是 Internet 上的语言，它从语言级上提供了对网络应用程 序的支持，程序员能够很容易开发常见的网络应用程序。 Java提供的网络类库，可以实现无痛的网络连接，联网的底层 细节被隐藏在 Java 的本机安装系统里，由 JVM 进行控制。并 且 Java 实现了一个跨平台的网络库，程序员面对的是一个统一 的网络编程环境。 网络基础 计算机网络： 把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规 模大、功能强的网络系统，从而使众多的计算机可以方便地互相传递信息、 共享硬件、软件、数据信息等资源。 网络编程的目的： 直接或间接地通过网络协议与其它计算机实现数据交换，进行通讯。 网络编程中有两个主要的问题： 如何准确地定位网络上一台或多台主机；定位主机上的特定的应用 找到主机后如何可靠高效地进行数据传输 2. 网络通信要素如何实现网络中的主机互相通信 通信双方地址 IP 端口号 一定的规则（即：网络通信协议。有两套参考模型） OSI参考模型：模型过于理想化，未能在因特网上进行广泛推广 TCP&#x2F;IP参考模型(或TCP&#x2F;IP协议)：事实上的国际标准。 网络通信协议 2.1 IP和端口号IP 地址：InetAddress 唯一的标识 Internet 上的计算机（通信实体） 本地回环地址(hostAddress)：127.0.0.1 主机名(hostName)：localhost IP地址分类方式1：IPV4 和 IPV6 IPV4：4个字节组成，4个0-255。大概42亿，30亿都在北美，亚洲4亿。2011年初已经用尽。以点分十进制表示，如192.168.0.1 IPV6：128位（16个字节），写成8个无符号整数，每个整数用四个十六进制位表示， 数之间用冒号（：）分开，如：3ffe:3201:1401:1280:c8ff:fe4d:db39:1984 IP地址分类方式2：公网地址(万维网使用)和私有地址(局域网使用)。192.168. 开头的就是私有址址，范围即为192.168.0.0–192.168.255.255，专门为组织机构内部使用 特点：不易记忆 端口号标识正在计算机上运行的进程（程序） 不同的进程有不同的端口号 被规定为一个 16 位的整数 0~65535。 端口分类： 公认端口：0~1023。被预先定义的服务通信占用（如：HTTP占用端口80，FTP占用端口21，Telnet占用端口23） 注册端口：1024~49151。分配给用户进程或应用程序。（如：Tomcat占用端口8080，MySQL占用端口3306，Oracle占用端口1521等）。 动态&#x2F;私有端口：49152~65535。 端口号与IP地址的组合得出一个网络套接字：Socket。 InetAddress类 Internet上的主机有两种方式表示地址： **域名(hostName)**：www.atguigu.com **IP 地址(hostAddress)**：202.108.35.210 InetAddress类主要表示IP地址，两个子类：Inet4Address、Inet6Address。 InetAddress 类对象含有一个 Internet：主机地址的域名和 IP 地址：www.atguigu.com 和 202.108.35.210。 域名容易记忆，当在连接网络时输入一个主机的域名后，域名服务器(DNS) 负责将域名转化成IP地址，这样才能和主机建立连接。 ——-域名解析 InetAddress类没有提供公共的构造器，而是提供了如下几个静态方法来获取InetAddress实例 public static InetAddress getLocalHost() public static InetAddress getByName(String host) InetAddress提供了如下几个常用的方法 public String getHostAddress()：返回 IP 地址字符串（以文本表现形式）。 public String getHostName()：获取此 IP 地址的主机名 public boolean isReachable(int timeout)：测试是否可以达到该地址 2.2 网络协议 网络通信协议 计算机网络中实现通信必须有一些约定，即通信协议，对速率、传输代码、代码结构、传输控制步骤、出错控制等制定标准。 问题：网络协议太复杂 计算机网络通信涉及内容很多，比如指定源地址和目标地址，加密解密，压缩解压缩，差错控制，流量控制，路由控制，如何实现如此复杂的网络协议呢？ 通信协议分层的思想 在制定协议时，把复杂成份分解成一些简单的成份，再将它们复合起来。最常 用的复合方式是层次方式，即同层间可以通信、上一层可以调用下一层，而与再下一层不发生关系。各层互不影响，利于系统的开发和扩展。 TCP&#x2F;IP协议簇 传输层协议中有两个非常重要的协议： 传输控制协议TCP(Transmission Control Protocol) 用户数据报协议UDP(User Datagram Protocol)。 **TCP&#x2F;IP 以其两个主要协议：传输控制协议(TCP)和网络互联协议(IP)**而得名，实际上是一组协议，包括多个具有不同功能且互为关联的协议。 IP(Internet Protocol)协议是网络层的主要协议，支持网间互连的数据通信。 TCP&#x2F;IP协议模型从更实用的角度出发，形成了高效的四层体系结构，即物理链路层、IP层、传输层和应用层。 TCP 和 UDP TCP协议： 使用TCP协议前，须先建立TCP连接，形成传输数据通道 传输前，采用“三次握手”方式，点对点通信，是可靠的 TCP协议进行通信的两个应用进程：客户端、服务端。 在连接中可进行大数据量的传输 传输完毕，需释放已建立的连接，效率低 UDP协议： 将数据、源、目的封装成数据包，不需要建立连接 每个数据报的大小限制在64K内 发送不管对方是否准备好，接收方收到也不确认，故是不可靠的 可以广播发送 发送数据结束时无需释放资源，开销小，速度快 Socket 利用套接字(Socket)开发网络应用程序早已被广泛的采用，以至于成为事实 上的标准。 网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标 识符套接字。 通信的两端都要有Socket，是两台机器间通信的端点。 网络通信其实就是Socket间的通信。 Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。 一般主动发起通信的应用程序属客户端，等待通信请求的为服务端。 Socket分类： 流套接字（stream socket）：使用TCP提供可依赖的字节流服务 数据报套接字（datagram socket）：使用UDP提供“尽力而为”的数据报服务 3. TCP网络编程 客户端Socket的工作过程包含以下四个基本的步骤： 创建 Socket：根据指定服务端的 IP 地址或端口号构造 Socket 类对象。若服务器端响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。 打开连接到 Socket 的输入**&#x2F;**出流： 使用 getInputStream()方法获得输入流，使用 getOutputStream()方法获得输出流，进行数据传输 按照一定的协议对 Socket 进行读**&#x2F;**写操作：通过输入流读取服务器放入线路的信息（但不能读取自己放入线路的信息），通过输出流将信息写入线程。 关闭 Socket：断开客户端到服务器的连接，释放线路 客户端创建Socket对象 客户端程序可以使用Socket类创建对象，创建的同时会自动向服务器方发起连接。Socket的构造器是： Socket(String host,int port)throws UnknownHostException,IOException：向服务器(域名是host。端口号为port)发起TCP连接，若成功，则创建Socket对象，否则抛出异常。 Socket(InetAddress address,int port)throws IOException：根据InetAddress对象所表示的 IP地址以及端口号port发起连接。 客户端建立socketAtClient对象的过程就是向服务器发出套接字连接请求 1234Socket s = new Socket(“192.168.40.165”,9999);OutputStream out = s.getOutputStream(); out.write(&quot; hello&quot;.getBytes());s.close(); 服务器程序的工作过程包含以下四个基本的步骤： 调用 ServerSocket(int port) ：创建一个服务器端套接字，并绑定到指定端口上。用于监听客户端的请求。 调用 **accept()**：监听连接请求，如果客户端请求连接，则接受连接，返回通信套接字对象。 调用 该Socket类对象的 getOutputStream() 和 getInputStream **()**：获取输出流和输入流，开始网络数据的发送和接收。 关闭ServerSocket和Socket对象：客户端访问结束，关闭通信套接字。 服务器建立ServerSocket对象 ServerSocket 对象负责等待客户端请求建立套接字连接，类似邮局某个窗口中的业务员。也就是说，服务器必须事先建立一个等待客户请求建立套接字连接的ServerSocket对象。 所谓“接收”客户的套接字请求，就是accept()方法会返回一个 Socket 对象 1234567ServerSocket ss = new ServerSocket(9999); Socket s = ss.accept ();InputStream in = s.getInputStream(); byte[] buf = new byte[1024];int num = in.read(buf);String str = new String(buf,0,num); System.out.println(s.getInetAddress().toString()+”:”+str); s.close();ss.close(); 客户端—服务端 客户端： 自定义 浏览器 服务端： 自定义 Tomcat服务器 4. UDP网络编程 类 DatagramSocket 和 DatagramPacket 实现了基于 UDP 协议网络程序。 UDP数据报通过数据报套接字 DatagramSocket 发送和接收，系统不保证UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。 DatagramPacket 对象封装了UDP数据报，在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号。 UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和 接收方的连接。如同发快递包裹一样。 DatagramSocket类的常用方法 UDP网络通信 流 程： 1.DatagramSocket与DatagramPacket 2.建立发送端，接收端 3.建立数据包 4.调用Socket的发送、接收方法 5.关闭Socket 发送端与接收端是两个独立的运行程序 发送端 123456789101112DatagramSocket ds = null;try &#123; ds = new DatagramSocket(); byte[] by = &quot;hello,atguigu.com&quot;.getBytes(); DatagramPacket dp = new DatagramPacket(by, 0, by.length, InetAddress.getByName(&quot;127.0.0.1&quot;), 10000); ds.send(dp);&#125; catch (Exception e) &#123; e.printStackTrace();&#125; finally &#123; if (ds != null) ds.close();&#125; 接收端 在接收端，要指定监听的端口。 1234567891011121314DatagramSocket ds = null; try &#123; ds = new DatagramSocket(10000); byte[] by = new byte[1024]; DatagramPacket dp = new DatagramPacket(by, by.length); ds.receive(dp); String str = new String(dp.getData(), 0, dp.getLength()); System.out.println(str + &quot;--&quot; + dp.getAddress());&#125; catch (Exception e) &#123; e.printStackTrace();&#125; finally &#123; if (ds != null) ds.close();&#125; 5. URL编程URL类 URL(Uniform Resource **Locator)**：统一资源定位符，它表示 Internet 上某一资源的地址。 它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。 通过 URL 我们可以访问 Internet 上的各种网络资源，比如最常见的 www，ftp站点。浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源。 URL的基本结构由5部分组成： &lt;传输协议&gt;:&#x2F;&#x2F;&lt;主机名&gt;:&lt;端口号&gt;&#x2F;&lt;文件名&gt;#片段名?参数列表 例如: http://192.168.1.100:8080/helloworld/index.jsp#a?username=shkstart&amp;password=123 #片段名：即锚点，例如看小说，直接定位到章节 参数列表格式：参数名&#x3D;参数值&amp;参数名&#x3D;参数值…. 为了表示URL，java.net 中实现了类 URL。我们可以通过下面的构造器来初始化一个 URL 对象： public URL (String **spec)**：通过一个表示URL地址的字符串可以构造一个URL对象。 例 如：URL url &#x3D; new URL (“http://www. atguigu.com&#x2F;“); public URL(URL context, String **spec)**：通过基 URL 和相对 URL 构造一个 URL 对象。 例如：URL downloadUrl &#x3D; new URL(url, “download.html”) public URL(String protocol, String host, String file); 例如：new URL(“http”, “www.atguigu.com“, “download. html”); public URL(String protocol, String host, int port, String file); 例如: URL gamelan &#x3D; newURL(“http”, “www.atguigu.com“, 80, “download.html”); URL类的构造器都声明抛出非运行时异常，必须要对这一异常进行处理，通 常是用 try-catch 语句进行捕获。 URL类的常用方法 一个URL对象生成后，其属性是不能被改变的，但可以通过它给定的方法来获取这些属性： 针对HTTP协议的URLConnection类 URL的方法 openStream()：能从网络上读取数据 若希望输出数据，例如向服务器端的 CGI （公共网关接口-Common Gateway Interface-的简称，是用户浏览器和服务器端的应用程序进行连接的接口）程序发送一 些数据，则必须先与URL建立连接，然后才能对其进行读写，此时需要使用 URLConnection 。 URLConnection：表示到URL所引用的远程对象的连接。当与一个URL建立连接时， 首先要在一个 URL 对象上通过方法 openConnection() 生成对应的 URLConnection 对象。如果连接过程失败，将产生IOException. URL netchinaren &#x3D; new URL (“http:&#x2F;&#x2F;www.atguigu.com&#x2F;index.shtml“); URLConnectonn u &#x3D; netchinaren.openConnection( ); 通过URLConnection对象获取输入流和输出流，即可以与现有CGI程序进行交互 URI、URL和URN的区别 URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个 资源。而URL是uniform resource locator，统一资源定位符，它是一种具体 的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。 而URN，uniform resource name，统一资源命名，是通过名字来标识资源， 比如mailto:&#106;&#97;&#118;&#x61;&#x2d;&#110;&#101;&#116;&#x40;&#x6a;&#x61;&#x76;&#97;&#x2e;&#x73;&#117;&#110;&#x2e;&#x63;&#111;&#x6d;。也就是说，URI是以一种抽象的，高层 次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL 和URN都是一种URI。 在Java的URI中，一个URI实例可以代表绝对的，也可以是相对的，只要它符 合URI的语法规则。而URL类则不仅符合语义，还包含了定位该资源的信息，因此它不能是相对的。 网络编程 总结 位于网络中的计算机具有唯一的IP地址，这样不同的主机可以互相区分。 客户端－服务器是一种最常见的网络应用程序模型。服务器是一个为其客户端提供某种特定 服务的硬件或软件。客户机是一个用户应用程序，用于访问某台服务器提供的服务。端口号 是对一个服务的访问场所，它用于区分同一物理计算机上的多个服务。套接字用于连接客户 端和服务器，客户端和服务器之间的每个通信会话使用一个不同的套接字。TCP协议用于实 现面向连接的会话。 Java 中有关网络方面的功能都定义在 java.net 程序包中。Java 用 InetAddress 对象表示 IP地址，该对象里有两个字段：主机名(String) 和 IP 地址(int)。 类 Socket 和 ServerSocket 实现了基于TCP协议的客户端－服务器程序。Socket是客户端 和服务器之间的一个连接，连接创建的细节被隐藏了。这个连接提供了一个安全的数据传输 通道，这是因为 TCP 协议可以解决数据在传送过程中的丢失、损坏、重复、乱序以及网络 拥挤等问题，它保证数据可靠的传送。 类 URL 和 URLConnection 提供了最高级网络应用。URL 的网络资源的位置来同一表示 Internet 上各种网络资源。通过URL对象可以创建当前应用程序和 URL 表示的网络资源之 间的连接，这样当前程序就可以读取网络资源数据，或者把自己的数据传送到网络上去。 一、网络编程中的两个主要问题及其解决方法 如何准确地定位网络上一台或多台主机；定位主机上的特定的应用 找到主机后如何可靠高效地进行数据传输 网络编程中的两个要素 对应问题一：IP和端口号 对应问题二：提供网络通信协议：TCP&#x2F;IP参考模型（应用层、传输层、网络层、物理+数据链路层） 二、IP和端口号 IP:唯一的标识 Internet 上的计算机（通信实体） 在Java中使用InetAddress类代表IP IP分类：IPv4 和 IPv6 ; 万维网 和 局域网 域名: www.baidu.com www.mi.com www.sina.com www.jd.com 本地回路地址：127.0.0.1 对应着：localhost 如何实例化InetAddress:两个方法：getByName(String host) 、 getLocalHost() 两个常用方法：getHostName() &#x2F; getHostAddress() 端口号：正在计算机上运行的进程。 要求：不同的进程有不同的端口号 范围：被规定为一个 16 位的整数 0~65535。 端口号与IP地址的组合得出一个网络套接字：Socket 三、TCP网络编程 客户端创建一个Socket类对象，指明IP地址和端口号，通过socket获取一个输入或者输出流，通过输出流将数据传输到服务端，或者通过输入流对服务端传来的数据进行操作； 服务端创建ServerSocket类对象，调用此类的accept()方法，返回一个Socket类对象，建立与客户端的连接，进而通过socket获取一个输入或者输出流，通过输入流对客户端传来的数据进行操作，或者将数据通过输出流传输到客户端。 客户端的socket指明IP地址和端口号，从而定向的传输数据；服务端的socket通过指明端口号，使用socket获取从客户端传来的数据。 客户端和服务端在传输数据时可以配合其他输入输出流对数据进行操作。 ① 客户端 创建Socket对象，指明服务器端的ip和端口号 12InetAddress inet = InetAddress.getByName(&quot;192.168.14.100&quot;);Socket socket = new Socket(inet,8899); 获取一个输出流，用于输出数据 12//使用socket的getOutputStream方法OutputStream os = socket.getOutputStream(); 写出数据的操作 12//调用OutputStream类实例化对象的write()os.write(&quot;你好，我是客户端mm&quot;.getBytes()); 资源的关闭 ② 服务端 创建服务器端的ServerSocket，指明自己的端口号 1ServerSocket ss = new ServerSocket(8899); 调用accept()表示接收来自于客户端的socket 1socket = ss.accept(); 获取输入流 1InputStream is = socket.getInputStream(); 读取输入流中的数据 12//推荐创建ByteArrayOutputStream类，不容易出现乱码ByteArrayOutputStream baos = new ByteArrayOutputStream(); 关闭资源 四、UDP协议的网络编程 发送端先创建一个DatagramSocket类对象socket，无需指明IP地址（可以指明端口号也可以不指明），将要操作的数据通过byte[]的形式传入到DatagramPacket类的构造器中创建packet对象，需要指明端口号及IP地址（如果实例化DataframSocket类的时候没有指明端口号，则需要指明），此时相当于将数据打包成数据报packet的形式，调用socket的send(DatagramPacket packet)将此套接字的数据报传输至接收端； 接收端先创建一个DatagramSocket类对象socket，无需指明IP地址，需要指明端口号，将要操作的数据通过byte[]的形式传入到DatagramPacket类的构造器中创建packet对象，将这些数据打包成数据报packet，通过socket的recieve(DatagramPacket packet)从此套接字中获取数据报，获取了从发送端传来的数据，通过packet的getData()返回一个byte[]类型的数组，可以通过此数组来对数据进行操作。 发送端的socket和packet指明一个IP地址和一个端口号，便能定向发送数据；接收端通过指明的端口号来接收packet，打包好之后通过socket获取 ① 发送端 创建socket对象（DatagramSocket类） 1DatagramSocket socket = new DatagramSocket(); 创建packet对象，指明端口号以及IP地址 12345//获取当前ip地址InetAddress inet = InetAddress.getLocalHost();//创建packet对象DatagramPacket packet = new DatagramPacket(data,0,data.length,inet,9090); 调用socket对象的send()，将packet对象作为参数传入方法 1socket.send(packet); 断开客户端到服务器的连接，释放线路 1socket.close(); ② 接收端 创建socket对象（DatagramSocket类），指明端口号，无需指明IP地址 1DatagramSocket socket = new DatagramSocket(9090); 创建packet对象 1DatagramPacket packet = new DatagramPacket(buffer,0,buffer.length); 调用socket对象的receive()，将packet对象作为参数传入方法 1socket.receive(packet); 断开客户端到服务器的连接，释放线路 1socket.close() 第十四章&gt;&gt;&gt;反射机制1. Java ReflectionReflection（反射）是被视为动态语言的关键，反射机制允许程序在执行期 借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内 部属性及方法。 加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个 类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可 以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看 到类的结构，所以，我们形象的称之为：反射。 动态语言 VS 静态语言 ① 动态语言 是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以 被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身结构。主要动态语言：Object-C、C#、JavaScript、PHP、Python、Erlang。 ② 静态语言 与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、C++。 Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动 态性，我们可以利用反射机制、字节码操作获得类似动态语言的特性。 Java的动态性让编程的时候更加灵活！ Java反射机制提供的功能 在运行时判断任意一个对象所属的类 在运行时构造任意一个类的对象 在运行时判断任意一个类所具有的成员变量和方法 在运行时获取泛型信息 在运行时调用任意一个对象的成员变量和方法 在运行时处理注解 生成动态代理 反射相关的主要API java.lang.Class:代表一个类 **java.lang.reflect.Method:**代表类的方法 **java.lang.reflect.Field:**代表类的成员变量 **java.lang.reflect.Constructor:**代表类的构造器 … … 2. Class类及获取实例Class类 在Object类中定义了以下的方法，此方法将被所有子类继承： public final Class getClass() 以上的方法返回值的类型是一个Class类， 此类是Java反射的源头，实际上所谓反射从程序的运行结果来看也很好理解，即：可以通过对象反射求出类的名称。 对象照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。一个 Class 对象包含 了特定某个结构(class&#x2F;interface&#x2F;enum&#x2F;annotation&#x2F;primitive type&#x2F;void&#x2F;[])的有关信息。 Class本身也是一个类 Class 对象只能由系统建立对象 一个加载的类在 JVM 中只会有一个Class实例 一个Class对象对应的是一个加载到JVM中的一个.class文件 每个类的实例都会记得自己是由哪个 Class 实例所生成 通过Class可以完整地得到一个类中的所有被加载的结构 Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象 获取Class类的实例（四种方法） 前提：若已知具体的类，通过类的class属性获取，该方法最为安全可靠， 程序性能最高 实例：Class clazz = String.class; 前提：已知某个类的实例，调用该实例的getClass()方法获取Class对象 实例：Class clazz = &quot;www.atguigu.com&quot;.getClass(); 前提：已知一个类的全类名，且该类在类路径下，可通过Class类的静态方 法**forName()**获取，可能抛出ClassNotFoundException 实例：Class clazz = Class.forName(“java.lang.String”); 其他方式(不做要求)：使用类的加载器 ClassLoader cl = this.getClass().getClassLoader(); Class clazz4 = cl.loadClass(“类的全类名”); 哪些类型可以作为Class类的实例对象 class： 外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类 interface：接口 []：数组 enum：枚举 annotation：注解@interface primitive type：基本数据类型 void 3. 类的加载与ClassLoader了解：类的加载过程 当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过 如下三个步骤来对该类进行初始化。 加载：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时 数据结构，然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问 入口（即引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载的 过程需要类加载器参与。 链接：将Java类的二进制代码合并到JVM的运行状态之中的过程。 验证：确保加载的类信息符合JVM规范，例如：以cafe开头，没有安全方面的问题 准备：正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存 都将在方法区中进行分配。 解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。 初始化： 执行类构造器()方法的过程。类构造器()方法是由编译期自动收集类中 所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信 息的，不是构造该类对象的构造器）。 当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。 虚拟机会保证一个类的()方法在多线程环境中被正确加锁和同步。 了解：什么时候会发生类初始化？ 类的主动引用（一定会发生类的初始化） 当虚拟机启动，先初始化main方法所在的类 new一个类的对象 调用类的静态成员（除了final常量）和静态方法 使用java.lang.reflect包的方法对类进行反射调用 当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类 类的被动引用（不会发生类的初始化） 当访问一个静态域时，只有真正声明这个域的类才会被初始化 当通过子类引用父类的静态变量，不会导致子类初始化 通过数组定义类引用，不会触发此类的初始化 引用常量不会触发此类的初始化 类加载器的作用： 类加载的作用：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为 方法区中类数据的访问入口。 类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器 中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象。 了解：ClassLoader 类加载器作用是用来把类(class)装载进内存的。JVM 规范定义了如下类型的 类的加载器。 1234567891011121314151617181920//1.获取一个系统类加载器ClassLoader classloader = ClassLoader.getSystemClassLoader();System.out.println(classloader);//2.获取系统类加载器的父类加载器，即扩展类加载器classloader = classloader.getParent();System.out.println(classloader);//3.获取扩展类加载器的父类加载器，即引导类加载器classloader = classloader.getParent();System.out.println(classloader);//4.测试当前类由哪个类加载器进行加载classloader = Class.forName(&quot;exer2.ClassloaderDemo&quot;).getClassLoader();System.out.println(classloader);//5.测试JDK提供的Object类由哪个类加载器加载classloader =Class.forName(&quot;java.lang.Object&quot;).getClassLoader();System.out.println(classloader);//*6.关于类加载器的一个主要方法：getResourceAsStream(String str):获取类路 径下的指定文件的输入流InputStream in = null;in = this.getClass().getClassLoader().getResourceAsStream(&quot;exer2\\\\test.properties&quot;);System.out.println(in); 4. 创建运行时类的对象创建类的对象：调用Class对象的newInstance()方法 要求： 类必须有一个无参数的构造器。 类的构造器的访问权限需要足够。 难道没有无参的构造器就不能创建对象了吗？ 不是！只要在操作的时候明确的调用类中的构造器，并将参数传递进去之后，才可以实例化操作。 步骤如下： 通过Class类的getDeclaredConstructor(Class … **parameterTypes)**取得本类的指定形参类 型的构造器 向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数。 通过Constructor实例化对象。 在Constructor类中存在一个方法 public T newInstance(Object... initargs) 123456//1.根据全类名获取对应的Class对象 String name = “atguigu.java.Person&quot;; Class clazz = null;clazz = Class.forName(name);//2.调用指定参数结构的构造器，生成Constructor的实例Constructor con = clazz.getConstructor(String.class,Integer.class);//3.通过Constructor的实例创建对应类的对象，并初始化类属性 Person p2 = (Person) con.newInstance(&quot;Peter&quot;,20); System.out.println(p2); 5. 获取运行时类的完整结构通过反射获取运行时类的完整结构 Field、Method、Constructor、Superclass、Interface、Annotation 实现的全部接口 所继承的父类 全部的构造器 全部的方法 全部的Field 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152//1.实现的全部接口public Class&lt;?&gt;[] getInterfaces()确定此对象所表示的类或接口实现的接口。//2.所继承的父类public Class&lt;? Super T&gt; getSuperclass()返回表示此 Class 所表示的实体（类、接口、基本类型）的父类的Class。//3.全部的构造器public Constructor&lt;T&gt;[] getConstructors()返回此 Class 对象所表示的类的所有public构造方法。public Constructor&lt;T&gt;[] getDeclaredConstructors()返回此 Class 对象表示的类声明的所有构造方法。Constructor类中：取得修饰符: public int getModifiers();取得方法名称: public String getName();取得参数的类型：public Class&lt;?&gt;[] getParameterTypes();//4.全部的方法public Method[] getDeclaredMethods()返回此Class对象所表示的类或接口的全部方法public Method[] getMethods()返回此Class对象所表示的类或接口的public的方法Method类中：public Class&lt;?&gt; getReturnType()取得全部的返回值public Class&lt;?&gt;[] getParameterTypes()取得全部的参数public int getModifiers()取得修饰符public Class&lt;?&gt;[] getExceptionTypes()取得异常信息//5.全部的Fieldpublic Field[] getFields()返回此Class对象所表示的类或接口的public的Field。public Field[] getDeclaredFields()返回此Class对象所表示的类或接口的全部Field。Field方法中：public int getModifiers() 以整数形式返回此Field的修饰符public Class&lt;?&gt; getType() 得到Field的属性类型public String getName() 返回Field的名称。//6.Annotation相关get Annotation(Class&lt;T&gt; annotationClass)getDeclaredAnnotations()//7.泛型相关获取父类泛型类型：Type getGenericSuperclass()泛型类型：ParameterizedType获取实际的泛型类型参数数组：getActualTypeArguments()//8.类所在的包 Package getPackage() 6. 调用运行时类的指定结构① 调用指定方法 通过反射，调用类中的方法，通过Method类完成。步骤： 通过Class类的getMethod(String name,Class…parameterTypes)方法取得 一个Method对象，并设置此方法操作时所需要的参数类型。 之后使用Object invoke(Object obj, Object[] args)进行调用，并向方法中传递要设置的obj对象的参数信息。 Object invoke(Object obj, Object … args) Object 对应原方法的返回值，若原方法无返回值，此时返回null 若原方法若为静态方法，此时形参Object obj可为null 若原方法形参列表为空，则Object[] args为null 若原方法声明为private,则需要在调用此invoke()方法前，显式调用 方法对象的setAccessible(true)方法，将可访问private的方法。 通过反射机制调用方法的四要素： 哪个对象 调用的方法名 方法需要传什么参数 方法的返回值类型 ② 调用指定属性 在反射机制中，可以直接通过Field类操作类中的属性，通过Field类提供的set()和get()方法就可以完成设置和取得属性内容的操作。 public Field getField(String name) 返回此Class对象表示的类或接口的指定的public的Field。 public Field getDeclaredField(String name)返回此Class对象表示的类或接口的指定的Field。 在Field中： public Object get(Object obj) 取得指定对象obj上此Field的属性内容 public void set(Object obj,Object value) 设置指定对象obj上此Field的属性内容 关于setAccessible方法的使用 Method和Field、Constructor对象都有setAccessible()方法。 setAccessible启动和禁用访问安全检查的开关。 参数值为true则指示反射的对象在使用时应该取消Java语言访问检查。 提高反射的效率。如果代码中必须用反射，而该句代码需要频繁的被 调用，那么请设置为true。 使得原本无法访问的私有成员也可以访问 参数值为false则指示反射的对象应该实施Java语言访问检查。 7. 动态代理代理设计模式的原理: 使用一个代理将对象包装起来, 然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。 之前为大家讲解过代理机制的操作，属于静态代理，特征是代理类和目标对象的类都是在编译期间确定下来，不利于程序的扩展。同时，每一个代理类只能为一个接口服务，这样一来程序开发中必然产生过多的代理。最好可以通过一个代理类完成全部的代理功能。 动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时 根据需要动态创建目标类的代理对象。 动态代理使用场合: 调试 远程方法调用 动态代理相比于静态代理的优点： 抽象角色中（接口）声明的所有方法都被转移到调用处理器一个集中的方法中 处理，这样，我们可以更加灵活和统一的处理众多的方法。 Java动态代理相关API Proxy ：专门完成代理的操作类，是所有动态代理类的父类。通过此类为一个或多个接口动态地生成实现类。 提供用于创建动态代理类和动态代理对象的静态方法 static Class&lt;?&gt; getProxyClass(ClassLoader loader, Class&lt;?&gt;... interfaces) 创建 一个动态代理类所对应的Class对象 static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) 直接创建一个动态代理对象 第一个参数：类的加载器 第二个参数：被代理类实现的全部接口，从而可以实现返回的对象是实现了同一些接口的类的对象，确保一致性 第三个参数：InvocationHandler接口的实现类实例，确保当我们哦那个过代理类的对象调用方法a时，就会自动调用InvacationHandler接口中的invoke() 动态代理 和 AOP（Aspect Orient Programming） 前面介绍的Proxy和InvocationHandler，很难看出这种动态代理的优势，下面介绍一种更实用的动态代理机制 使用Proxy生成一个动态代理时，往往并不会凭空产生一个动态代理，这样没有 太大的意义。通常都是为指定的目标对象生成动态代理 这种动态代理在AOP中被称为AOP代理，AOP代理可代替目标对象，AOP代理 包含了目标对象的全部方法。但AOP代理中的方法与目标对象的方法存在差异： AOP代理里的方法可以在执行目标方法之前、之后插入一些通用处理 反射机制 总结 一、关于java.lang.Class类的理解 ① 类的加载过程：程序经过javac.exe命令以后，会生成一个或多个字节码文件(.class结尾)。接着我们使用java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件加载到内存中。此过程就称为类的加载。加载到内存中的类，我们就称为运行时类，此运行时类，就作为Class的一个实例。 ② 换句话说，Class的实例就对应着一个运行时类。 ③ 加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式来获取此运行时类。 二、获取Class的实例 ① 调用运行时类的属性：.class 1Class clazz1 = Person.class; ② 通过运行时类的对象,调用getClass() 12Person p1 = new Person();Class clazz2 = p1.getClass(); ③ 调用Class的静态方法：forName(String classPath) 1Class clazz3 = Class.forName(&quot;com.atguigu.java.Person&quot;); ④ 使用类的加载器：ClassLoader (了解) 12ClassLoader classLoader = ReflectionTest.class.getClassLoader();Class clazz4 = classLoader.loadClass(&quot;com.atguigu.java.Person&quot;); 三、创建类的对象的方式 ① new + 构造器 ② 要创建Xxx类的对象，可以考虑：Xxx、Xxxs、XxxFactor、XxxBuilder类中查看是否有静态方法得的存在。可以调用其静态方法，创建Xxx对象。 ③ 通过反射机制 四、通过反射调用指定结构 ① 调用属性 getDeclaredField(String name)：传入指定属性名参数，返回一个Filed类对象 set()：设置属性值 get()：获取属性值 ② 调用方法 getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)：传入一个指定方法名的参数，还有对应方法的可变个数的形参列表，返回一个Method类的对象 invoke(Object obj, Object... args)：传入方法的调用对象，以及对应的可变个数的实参列表 ③ 调用构造器 getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)：参数是一个可变个数的Class类对象实例的形参列表，返回一个Constructor类的对象 newInstance()：传入一个与constructor对象对应的可变个数的实参 以上结构都需要调用setAccessible(true)，将结构设置为可访问 五、反射的应用：动态代理 需要解决的两个主要问题 ① 如何根据加载到内存中的被代理类，动态地创建一个代理类及其对象？ 通过Proxy.newProxyInstance()实现 ② 当通过代理类的对象调用方法a时，如何动态去调用被代理类中的同名方法a？ 通过InvocationHandler接口的实现类及其方法invoke() 第十五章&gt;&gt;&gt;Java8的其他新特性 速度更快 代码更少(增加了新的语法：Lambda 表达式) 强大的 Stream API 便于并行 最大化减少空指针异常：Optional Nashorn引擎，允许在JVM上运行JS应用 并行流和串行流 并行流就是把一个内容分成多个数据块，并用不同的线程分别处理每个数据块的流。相比较串行的流，并行的流可以很大程度上提高程序的执行效率。 Java 8 中将并行进行了优化，我们可以很容易的对数据进行并行操作。 Stream API 可以声明性地通过 parallel() 与 sequential() 在并行流与顺序流 之间进行切换。 1. Lambda表达式Lambda 是一个匿名函数，我们可以把 Lambda 表达式理解为是一段可以传递的代码（将代码像数据一样进行传递）。使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。 Lambda 表达式：在Java 8 语言中引入的一种新的语法元素和操作符。这个操作符为 “**-&gt;**” ， 该操作符被称为 Lambda 操作符 或 箭头操作符。它将 Lambda 分为两个部分： 左侧：指定了 Lambda 表达式需要的参数列表 右侧：指定了 Lambda 体，是抽象方法的实现逻辑，也即Lambda 表达式要执行的功能。 类型推断 上述 Lambda 表达式中的参数类型都是由编译器推断得出的。Lambda 表达式中无需指定类型，程序依然可以编译，这是因为 javac 根据程序的上下文，在后台推断出了参数的类型。Lambda 表达式的类型依赖于上下文环境，是由编译器推断出来的。这就是所谓的“类型推断”。 2. 函数式(Functional)接口什么是函数式(Functional)接口 只包含一个抽象方法的接口，称为函数式接口。 你可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda 表达式 抛出一个受检异常(即：非运行时异常)，那么该异常需要在目标接口的抽象方法上进行声明）。 我们可以在一个接口上使用 @FunctionalInterface 注解，这样做可以检 查它是否是一个函数式接口。同时 javadoc 也会包含一条声明，说明这个 接口是一个函数式接口。 在java.util.function包下定义了Java 8 的丰富的函数式接口 如何理解函数式接口 Java从诞生日起就是一直倡导“一切皆对象”，在Java里面面向对象(OOP) 编程是一切。但是随着python、scala等语言的兴起和新技术的挑战，Java不 得不做出调整以便支持更加广泛的技术要求，也即java不但可以支持OOP还 可以支持OOF（面向函数编程） 在函数式编程语言当中，函数被当做一等公民对待。在将函数作为一等公民的 编程语言中，Lambda表达式的类型是函数。但是在Java8中，有所不同。在 Java8中，Lambda表达式是对象，而不是函数，它们必须依附于一类特别的 对象类型——函数式接口。 简单的说，在Java8中，Lambda表达式就是一个函数式接口的实例。这就是 Lambda表达式和函数式接口的关系。也就是说，只要一个对象是函数式接口 的实例，那么该对象就可以用Lambda表达式来表示。 所以以前用匿名实现类表示的现在都可以用Lambda表达式来写。 作为参数传递 Lambda 表达式 作为参数传递 Lambda 表达式：为了将 Lambda 表达式作为参数传递，接收Lambda表达式的参数类型必须是与该 Lambda 表达式兼容的函数式接口的类型。 3. 方法引用和构造器引用方法引用(Method References) 当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！ 方法引用可以看做是Lambda表达式深层次的表达。换句话说，方法引用就 是Lambda表达式，也就是函数式接口的一个实例，通过方法的名字来指向 一个方法，可以认为是Lambda表达式的一个语法糖。 要求：实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的 方法的参数列表和返回值类型保持一致！ 格式：使用操作符 “**::**” 将 类(或对象) 与 方法名 分隔开来。 如下三种主要使用情况： 对象::实例方法名 类::静态方法名 类::实例方法名 当函数式接口方法的第一个参数是需要引用方法的调用者，并且第二个参数是需要引用方法的参数**(或无参数)时：ClassName::methodName** 构造器引用 格式： ClassName::new 与函数式接口相结合，自动与函数式接口中方法兼容。可以把构造器引用赋值给定义的方法，要求构造器参数列表要与接口中抽象方法的参数列表一致！且方法的返回值即为构造器对应类的对象。 数组引用 格式： type[] :: new 4. 强大的StreamAPIJava8中有两大最为重要的改变。第一个是 Lambda 表达式；另外一个则 是 Stream API。 Stream API ( java.util.stream) 把真正的函数式编程风格引入到Java中。这 是目前为止对Java类库最好的补充，因为Stream API可以极大提供Java程 序员的生产力，让程序员写出高效率、干净、简洁的代码。 Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进 行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。 使用 Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。 也可以使用 Stream API 来并行执行操作。简言之，Stream API 提供了一种 高效且易于使用的处理数据的方式。 为什么使用StreamAPI 实际开发中，项目中多数数据源都来自于Mysql，Oracle等。但现在数 据源可以更多了，有MongDB，Radis等，而这些NoSQL的数据就需要 Java层面去处理。 Stream 和 Collection 集合的区别：Collection 是一种静态的内存数据结构，而 Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。 什么是Stream 是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。 “集合讲的是数据，Stream讲的是计算！” Stream 自己不会存储元素。 Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。 Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。 Stream的操作三大步骤 创建 Stream 一个数据源（如：集合、数组），获取一个流 中间操作 一个中间操作链，对数据源的数据进行处理 终止操作(终端操作) 一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用 创建Stream方式一：通过集合 Java8 中的 Collection 接口被扩展，提供了两个获取流 的方法： default Stream stream() : 返回一个顺序流 default Stream parallelStream() : 返回一个并行流 创建Stream方式二：通过数组 Java8 中的 Arrays 的静态方法 stream() 可以获取数组流： static Stream stream(T[] array): 返回一个流 重载形式，能够处理对应基本类型的数组： public static IntStream stream(int[] array) public static LongStream stream(long[] array) public static DoubleStream stream(double[] array) 创建 Stream方式三：通过Stream的of() 可以调用Stream类静态方法 of(), 通过显示值创建一个 流。它可以接收任意数量的参数。 public static Stream of(T… values) : 返回一个流 创建 Stream方式四：创建无限流 可以使用静态方法 Stream.iterate() 和 Stream.generate()，创建无限流。 迭代 public static Stream iterate(final T seed, final UnaryOperator f) 生成 public static Stream generate(Supplier s) Stream的中间操作 多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止 操作，否则中间操作不会执行任何的处理！而在终止操作时一次性全 部处理，称为“惰性求值”。 ① 筛选与切片 ② 映射 ③ 排序 Stream的终止操作 终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void 。 流进行了终止操作后，不能再次使用。 ① 匹配与查找 ② 归约 备注：map 和 reduce 的连接通常称为 map-reduce 模式，因 Google 用它来进行网络搜索而出名。 ③ 收集 Collector 接口中方法的实现决定了如何对流执行收集的操作(如收集到 List、Set、 Map)。 另外， Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例，具体方法与实例如下表： 5. Optional类到目前为止，臭名昭著的空指针异常是导致Java应用程序失败的最常见原因。 以前，为了解决空指针异常，Google公司著名的Guava项目引入了Optional类， Guava通过使用检查空值的方式来防止代码污染，它鼓励程序员写更干净的代 码。受到Google Guava的启发，Optional类已经成为Java 8类库的一部分。 Optional 类(java.util.Optional) 是一个容器类，它可以保存类型T的值，代表 这个值存在。或者仅仅保存null，表示这个值不存在。原来用 null 表示一个值不 存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。 Optional类的Javadoc描述如下：这是一个可以为null的容器对象。如果值存在 则isPresent()方法会返回true，调用get()方法会返回该对象。 Optional提供很多有用的方法，这样我们就不用显式进行空值检测 Java其他新特性 总结 一、Lambda表达式的使用 举例： (o1,o2) -&gt; Integer.compare(o1,o2); 格式： -&gt; :lambda操作符 或 箭头操作符 -&gt;左边：lambda形参列表 （其实就是接口中的抽象方法的形参列表） -&gt;右边：lambda体 （其实就是重写的抽象方法的方法体） Lambda表达式的使用：（分为6种情况介绍） 总结为： -&gt;左边：lambda形参列表的参数类型可以省略(类型推断)；如果lambda形参列表只有一个参数，其一对()也可以省略 -&gt;右边：lambda体应该使用一对{}包裹；如果lambda体只有一条执行语句（可能是return语句），省略这一对{}和return关键字 Lambda表达式的本质：作为函数式接口的实例 如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口。我们可以在一个接口上使用 @FunctionalInterface 注解，这样做可以检查它是否是一个函数式接口。 所以以前用匿名实现类表示的现在都可以用Lambda表达式来写。 通用格式为：( object o1, object o2…) -&gt; {方法体} 二、Java内置四大函数式接口 消费型接口 Consumer void accept(T t) 供给型接口 Supplier T get() 函数型接口 Function&lt;T,R&gt; R apply(T t) 断定型接口 Predicate boolean test(T t) 三、方法引用 使用情境：当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！ 方法引用，本质上就是Lambda表达式，而Lambda表达式作为函数式接口的实例。所以方法引用，也是函数式接口的实例。 使用格式： 类(或对象) :: 方法名 具体分为如下的三种情况： 情况1 对象 :: 非静态方法 情况2 类 :: 静态方法 情况3 类 :: 非静态方法 方法引用使用的要求：要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的形参列表和返回值类型相同！（针对于情况1和情况2） 四、构造器引用和数组引用 ① 构造器引用 和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致。抽象方法的返回值类型即为构造器所属的类的类型 ② 数组引用 大家可以把数组看做是一个特殊的类，则写法与构造器引用一致。 五、StreamAPI Stream关注的是对数据的运算，与CPU打交道 集合关注的是数据的存储，与内存打交道 注意： ①Stream 自己不会存储元素。 ②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。 ③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行 Stream 执行流程 ① Stream的实例化 ② 一系列的中间操作（过滤、映射、…) ③ 终止操作 说明： 一个中间操作链，对数据源的数据进行处理 一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用 创建Stream的方式 通过集合 通过数组 通过Stream的of() 创建无限流 六、Optional类 Optional类：为了在程序中避免出现空指针异常而创建的。 常用的方法： ofNullable(T t) orElse(T t) 第十六章&gt;&gt;&gt;Java9 ~ Java11新特性1. Java9新特性 1.1 JDK 和 JRE 目录结构的改变 1.2 模块化系统 Jigsaw –&gt; Modularity 谈到 Java 9 大家往往第一个想到的就是 Jigsaw 项目。众所周知，Java 已经 发展超过 20 年（95 年最初发布），Java 和相关生态在不断丰富的同时也越 来越暴露出一些问题： Java 运行环境的膨胀和臃肿。每次JVM启动的时候，至少会有30～60MB的内存 加载，主要原因是JVM需要加载rt.jar，不管其中的类是否被classloader加载，第 一步整个jar都会被JVM加载到内存当中去（而模块化可以根据模块的需要加载程序运行需要的class） 当代码库越来越大，创建复杂，盘根错节的“意大利面条式代码”的几率呈指数级的增长。不同版本的类库交叉依赖导致让人头疼的问题，这些都阻碍了 Java 开发和运行效率的提升。 很难真正地对代码进行封装, 而系统并没有对不同部分（也就是 JAR 文件）之间 的依赖关系有个明确的概念。每一个公共类都可以被类路径之下任何其它的公共类所访问到，这样就会导致无意中使用了并不想被公开访问的API。 本质上讲也就是说，用模块来管理各个package，通过声明某个package 暴露，，模块(module)的概念，其实就是package外再裹一层，不声明默 认就是隐藏。因此，模块化使得代码组织上更安全，因为它可以指定哪 些部分可以暴露，哪些部分隐藏。 实现目标 模块化的主要目的在于减少内存的开销 只须必要模块，而非全部jdk模块，可简化各种类库和大型应用的开 发和维护 改进 Java SE 平台，使其可以适应不同大小的计算设备 改进其安全性，可维护性，提高性能 模块将由通常的类和新的模块声明文件（module-info.java）组成。该文件是位于 java代码结构的顶层，该模块描述符明确地定义了我们的模块需要什么依赖关系， 以及哪些模块被外部使用。在exports子句中未提及的所有包默认情况下将封装在模块中，不能在外部使用。 要想在java9demo模块中调用java9test模块下包中的结构，需要在java9test 的module-info.java中声明： 1234module java9test &#123; //package we export exports com.atguigui.bean;&#125; exports：控制着哪些包可以被其它模块访问到。所有不被导出的包默认 都被封装在模块里面。 对应在java 9demo 模块的src 下创建module-info.java文件： 123module java9demo &#123; requires java9test;&#125; requires：指明对其它模块的依赖。 1.3 Java得REPL工具：jShell命令产生背景 像Python 和 Scala 之类的语言早就有交互式编程环境 REPL (read - evaluate - print -loop)了，以交互式的方式对语句和表达式进行求值。开发者只需要输入一些代码， 就可以在编译前获得对程序的反馈。而之前的Java版本要想执行代码，必须创建文件、声明类、提供测试方法方可实现。 设计理念 即写即得、快速运行 实现目标 Java 9 中终于拥有了 REPL工具：jShell。让Java可以像脚本语言一样运行，从 控制台启动jShell，利用jShell在没有创建类的情况下直接声明变量，计算表达式， 执行语句。即开发时可以在命令行里直接运行Java的代码，而无需创建Java文件，无需跟人解释”public static void main(String[] args)”这句废话。 jShell也可以从文件中加载语句或者将语句保存到文件中。 jShell也可以是tab键进行自动补全和自动添加分号。 1.4 接口的私有方法 Java 8中规定接口中的方法除了抽象方法之外，还可以定义静态方法 和默认的方法。一定程度上，扩展了接口的功能，此时的接口更像是 一个抽象类。 在Java 9中，接口更加的灵活和强大，连方法的访问权限修饰符都可 以声明为private的了，此时方法将不会成为你对外暴露的API的一部分。 1.5 钻石操作符使用升级我们将能够与匿名实现类共同使用钻石操作符（diamond operator） 12345678// anonymous classes can now use type inferenceComparator&lt;Object&gt; com = new Comparator&lt;&gt;()&#123; @Override public int compare(Object o1, Object o2) &#123; return 0; &#125;&#125;; 1.6 try语句用资源语句编写try将更容易，我们可以在try子句中使用已经初始 化过的资源，此时的资源是final的 12345678InputStreamReader reader = new InputStreamReader(System.in); OutputStreamWriter writer = new OutputStreamWriter(System.out); try (reader; writer) &#123; //reader是final的，不可再被赋值 //reader = null; //具体读写操作省略&#125; catch (IOException e) &#123; e.printStackTrace();&#125; 1.7 String存储结构变更 1.8 集合工厂方法：快速创建只读集合 1.9 InputStream 加强InputStream 终于有了一个非常有用的方法：transferTo，可以用来将数据直接 传输到 OutputStream，这是在处理原始数据流时非常常见的一种用法 123456ClassLoader cl = this.getClass().getClassLoader();try (InputStream is = cl.getResourceAsStream(&quot;hello.txt&quot;); OutputStream os = new FileOutputStream(&quot;src\\\\hello1.txt&quot;)) &#123; is.transferTo(os); // 把输入流中的所有数据直接自动地复制到输出流中&#125; catch (IOException e) &#123; e.printStackTrace();&#125; 1.10 增强的Stream APIJava 的 Steam API 是java标准库最好的改进之一，让开发者能够快速运算， 从而能够有效的利用数据并行计算。Java 8 提供的 Steam 能够利用多核架构 实现声明式的数据处理。 在Java 9 中，Stream API 变得更好，Stream 接口中添加了 4 个新的方法： takeWhile, dropWhile, ofNullable，还有个 iterate 方法的新重载方法，可以 让你提供一个Predicate (判断条件)来指定什么时候结束迭代。 除了对 Stream 本身的扩展，Optional 和 Stream 之间的结合也得到了改进。 现在可以通过 Optional 的新方法 stream() 将一个 Optional 对象转换为一个 (可能是空的) Stream 对象。 takeWhile()的使用 用于从 Stream 中获取一部分数据，接收一个 Predicate 来进行选择。在有序的Stream 中，takeWhile 返回从开头开始的尽量多的元素。 123456List&lt;Integer&gt; list = Arrays.asList(45, 43, 76, 87, 42, 77, 90, 73, 67, 88); list.stream().takeWhile(x -&gt; x &lt; 50).forEach(System.out::println);System.out.println();list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8); list.stream().takeWhile(x -&gt; x &lt; 5).forEach(System.out::println); dropWhile()的使用 dropWhile 的行为与takeWhile 相反，返回剩余的元素。 1234List&lt;Integer&gt; list = Arrays.asList(45, 43, 76, 87, 42, 77, 90, 73, 67, 88); list.stream().dropWhile(x -&gt; x &lt; 50).forEach(System.out::println); System.out.println();list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8); list.stream().dropWhile(x -&gt; x &lt; 5).forEach(System.out::println); ofNullable()的使用 Java 8 中 Stream 不能完全为null，否则会报空指针异常。而 Java 9 中的ofNullable 方法允许我们创建一个单元素 Stream，可以包含一个非空元素，也可以创建一个空 Stream。 iterate()重载的使用 这个 iterate 方法的新重载方法，可以让你提供一个 Predicate (判断条件)来指定什么时候结束迭代。 1234// 原来的控制终止方式：Stream.iterate(1, i -&gt; i + 1).limit(10).forEach(System.out::println);// 现在的终止方式：Stream.iterate(1, i -&gt; i &lt; 100, i -&gt; i + 1).forEach(System.out::println); 1.11 Optional获取Stream的方法Optional类中**stream()**的使用 123456List&lt;String&gt; list = new ArrayList&lt;&gt;();list.add(&quot;Tom&quot;);list.add(&quot;Jerry&quot;);list.add(&quot;Tim&quot;);Optional&lt;List&lt;String&gt;&gt; optional = Optional.ofNullable(list); Stream&lt;List&lt;String&gt;&gt; stream = optional.stream(); stream.flatMap(x -&gt; x.stream()).forEach(System.out::println); 2. Java10新特性 2.1 局部变量类型推断产生背景 开发者经常抱怨Java中引用代码的程度。局部变量的显示类型声明，常常被认为 是不必须的，给一个好听的名字经常可以很清楚的表达出下面应该怎样继续。 好处： 减少了啰嗦和形式的代码，避免了信息冗余，而且对齐了变量名，更容易阅读！ 场景一：类实例化时 作为 Java开发者，在声明一个变量时，我们总是习惯了敲打两次变量类型，第 一次用于声明变量类型，第二次用于构造器。 1LinkedHashSet&lt;Integer&gt; set = new LinkedHashSet&lt;&gt;(); 场景二：返回值类型含复杂泛型结构 变量的声明类型书写复杂且较长，尤其是加上泛型的使用 1Iterator&lt;Map.Entry&lt;Integer, Student&gt;&gt; iterator = set.iterator(); 场景三：我们也经常声明一种变量，它只会被使用一次，而且是用在下一行代码中 123URL url = new URL(&quot;http://www.atguigu.com&quot;); URLConnection connection = url.openConnection(); Reader reader = new BufferedReader(new InputStreamReader(connection.getInputStream())); 尽管IDE可以帮我们自动完成这些代码，但当变量总是跳来跳去的时候，可读性还是会受到影响，因为变量类型的名称由各种不同长度的字符组成。而且，有时候开发人员会尽力避免声明中间变量，因为太多的类型声明只会分散注意力，不会带来额外的好处。 适用于以下情况 12345678910//1.局部变量的初始化var list = new ArrayList&lt;&gt;();//2.增强for循环中的索引for(var v : list) &#123; System.out.println(v);&#125;//3.传统for循环中for(var i = 0;i &lt; 100;i++) &#123; System.out.println(i);&#125; 在局部变量中使用时，如下情况不适用： 工作原理 在处理 var时，编译器先是查看表达式右边部分，并根据右边变量值的类型进行 推断，作为左边变量的类型，然后将该类型写入字节码当中。 注意： var不是一个关键字 你不需要担心变量名或方法名会与 var发生冲突，因为 var实际上并不是一个关键字，而是一个类型名，只有在编译器需要知道类型的地方才需要用到它。除此之外，它 就是一个普通合法的标识符。也就是说，除了不能用它作为类名，其他的都可以， 但极少人会用它作为类名。 这不JavaScript 首先我要说明的是，var并不会改变Java是一门静态类型语言的事实。编译器负责推 断出类型，并把结果写入字节码文件，就好像是开发人员自己敲入类型一样。下面是使用IntelliJ（实际上是Fernflower的反编译器）反编译器反编译出的代码： 从代码来看，就好像之前已经声明了这些类型一样。事实上，这一特性只发 生在编译阶段，与运行时无关，所以对运行时的性能不会产生任何影响。所 以请放心，这不是JavaScript。 2.2 集合新增创建不可变集合的方法自 Java 9 开始，Jdk 里面为集合（List &#x2F; Set &#x2F; Map）都添加了 **of (jdk9新增)和 copyOf (jdk10新增)**方法，它们两个都用来创建不可变的集合，来看下它们的使用和区别。 12345678//示例1：var list1 = List.of(&quot;Java&quot;, &quot;Python&quot;, &quot;C&quot;); var copy1 = List.copyOf(list1); System.out.println(list1 == copy1); // true//示例2：var list2 = new ArrayList&lt;String&gt;(); var copy2 = List.copyOf(list2);System.out.println(list2 == copy2); // false 从 源 码 分 析 ， 可 以 看 出 copyOf 方 法 会 先 判 断 来 源 集 合 是 不 是 AbstractImmutableList 类型的，如果是，就直接返回，如果不是，则调用 of 创建一个新的集合。 示例2因为用的 new 创建的集合，不属于不可变 AbstractImmutableList 类的子类，所以 copyOf 方法又创建了一个新的实例，所以为false。 使用of和copyOf创建的集合为不可变集合，不能进行添加、删除、替换、 排序等操作，不然会报 java.lang.UnsupportedOperationException 异常。 3. Java11新特性 3.1 一系列字符串处理方法 3.2 Optional加强Optional 也增加了几个非常酷的方法，现在可以很方便的将一个 Optional 转换 成一个 Stream, 或者当一个空 Optional 时给它一个替代的。 3.3 局部变量类型推断升级在var上添加注解的语法格式，在jdk10中是不能实现的。在JDK11中加入了这样的语法。 12345//错误的形式: 必须要有类型, 可以加上var//Consumer&lt;String&gt; con1 = (@Deprecated t) -&gt;System.out.println(t.toUpperCase());//正确的形式://使用var的好处是在使用lambda表达式时给参数加上注解。 Consumer&lt;String&gt; con2 = (@Deprecated var t) -&gt; System.out.println(t.toUpperCase()); 3.4 全新的HTTP客户端API HTTP，用于传输网页的协议，早在1997年就被采用在目前的1.1版本中。直 到2015年，HTTP2才成为标准。 HTTP&#x2F;1.1和HTTP&#x2F;2的主要区别是如何在客户端和服务器之间构建和传输数据。 HTTP&#x2F;1.1依赖于请求&#x2F;响应周期。 HTTP&#x2F;2允许服务器“push”数据：它可以发 送比客户端请求更多的数据。这使得它可以优先处理并发送对于首先加载 网页至关重要的数据。 这是 Java 9 开始引入的一个处理 HTTP 请求的的 HTTP Client API，该 API 支持同步和异步，而在 Java 11 中已经为正式可用状态，你可以在java.net 包中找到这个 API。 它将替代仅适用于blocking模式的HttpURLConnection（HttpURLConnection是在HTTP 1.0的时代创建的，并使用了协议无关的 方法），并提供对WebSocket 和 HTTP&#x2F;2的支持。 1234567891011121314HttpClient client = HttpClient.newHttpClient(); HttpRequest request =HttpRequest.newBuilder(URI.create(&quot;http://127.0.0.1:8080/test/&quot;)).build(); BodyHandler&lt;String&gt; responseBodyHandler = BodyHandlers.ofString(); HttpResponse&lt;String&gt; response = client.send(request, responseBodyHandler); String body = response.body();System.out.println(body);HttpClient client = HttpClient.newHttpClient();HttpRequest request = HttpRequest.newBuilder(URI.create(&quot;http://127.0.0.1:8080/test/&quot;)).build(); BodyHandler&lt;String&gt; responseBodyHandler = BodyHandlers.ofString(); CompletableFuture&lt;HttpResponse&lt;String&gt;&gt; sendAsync = client.sendAsync(request, responseBodyHandler);sendAsync.thenApply(t -&gt; t.body()).thenAccept(System.out::println);//HttpResponse&lt;String&gt; response = sendAsync.get();//String body = response.body();//System.out.println(body); 3.5 更简化的编译运行程序12345// 编译javac Javastack.java// 运行java Javastack 在我们的认知里面，要运行一个 Java 源代码必须先编译，再运行，两步执行动作。 而在未来的Java 11 版本中，通过一个 java 命令就直接搞定了，如以下所示：java Javastack.java 一个命令编译运行源代码的注意点： 执行源文件中的第一个类, 第一个类必须包含主方法。 并且不可以使用其它源文件中的自定义类, 本文件中的自定义类是可以使用的。 3.6 废弃Nashorn引擎废除Nashorn javascript引擎，在后续版本准备移除掉，有需要的可以考虑使用GraalVM。 3.7 ZGC GC是java主要优势之一。 然而, 当GC停顿太长, 就会开始影响应用的响应时 间。消除或者减少GC停顿时长, java将对更广泛的应用场景是一个更有吸引力 的平台。此外, 现代系统中可用内存不断增长,用户和程序员希望JVM能够以高 效的方式充分利用这些内存, 并且无需长时间的GC暂停时间。 ZGC, A Scalable Low-Latency Garbage Collector(Experimental)ZGC, 这应该是JDK11最为瞩目的特性, 没有之一。 但是后面带了Experimental, 说明这还不建议用到生产环境。 ZGC是一个并发, 基于region, 压缩型的垃圾收集器, 只有root扫描阶段会 STW(stop the world), 因此GC停顿时间不会随着堆的增长和存活对象的增长 而变长。 优势： GC暂停时间不会超过10ms 既能处理几百兆的小堆, 也能处理几个T的大堆(OMG) 和G1相比, 应用吞吐能力不会下降超过15% 为未来的GC功能和利用colord指针以及Load barriers优化奠定基础 初始只支持64位系统 ZGC的设计目标是：支持TB级内存容量，暂停时间低（&lt;10ms），对整个 程序吞吐量的影响小于15%。 将来还可以扩展实现机制，以支持不少令人 兴奋的功能，例如多层堆（即热对象置于DRAM和冷对象置于NVMe闪存）， 或压缩堆。 3.8 其他新特性 Unicode 10 Deprecate the Pack200 Tools and API 新的Epsilon垃圾收集器 完全支持Linux容器（包括Docker） 支持G1上的并行完全垃圾收集 最新的HTTPS安全协议TLS 1.3 Java Flight Recorder"}],"posts":[{"title":"","slug":"hexo+butterfly","date":"2023-06-19T08:15:14.198Z","updated":"2023-06-19T08:15:57.503Z","comments":true,"path":"2023/06/19/hexo+butterfly/","link":"","permalink":"http://example.com/2023/06/19/hexo+butterfly/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hexo博客搭建过程","slug":"博客搭建过程（采用hexo框架+部署到github）","date":"2023-06-19T03:43:27.271Z","updated":"2023-06-19T07:03:14.500Z","comments":true,"path":"2023/06/19/博客搭建过程（采用hexo框架+部署到github）/","link":"","permalink":"http://example.com/2023/06/19/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%EF%BC%88%E9%87%87%E7%94%A8hexo%E6%A1%86%E6%9E%B6+%E9%83%A8%E7%BD%B2%E5%88%B0github%EF%BC%89/","excerpt":"","text":"博客搭建过程（采用hexo框架+部署到github）1.前期准备1.1 注意事项 很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行 hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导 hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的 1.2 下载并安装node.js 官网下载：https://nodejs.org/en/ 安装与使用：见node笔记 安装后验证：node -v 1.3 下载并安装git 官网下载: https://git-scm.com/download/win 安装与使用：见git笔记 安装后验证：git -v 1.4 命令行安装cnpm 命令：npm install -g cnpm –registry&#x3D;&#x3D;https://registry.npm.taobao.org 安装后验证：cnpm -v 1.5 命令行安装hexo 命令：cnpm install -g hexo-cli 安装后验证：hexo -v 2.配置github2.1 在github上创建仓库创建： 新建一个名为你的用户名.github.io的仓库 比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 http://test.github.io 了，是不是很方便？由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。 注意： 注册的邮箱一定要验证，否则不会成功； 仓库名字必须是：username.github.io，其中username是你的用户名； 仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久； 创建页面如下： 创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。 2.2 绑定域名（这步可省略）当然，你不绑定域名肯定也是可以的，就用默认的 xxx.github.io 来访问，如果你想更个性一点，想拥有一个属于自己的域名，那也是OK的。 首先你要注册一个域名，域名注册以前总是推荐去godaddy，现在觉得其实国内的阿里云也挺不错的，价格也不贵，毕竟是大公司，放心！ 绑定域名分2种情况：带www和不带www的。 域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问，如下： 然后到你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名，加不加www看你自己喜好，因为经测试： 如果你填写的是没有www的，比如 mygit.me，那么无论是访问 http://www.mygit.me 还是 http://mygit.me ，都会自动跳转到 http://mygit.me 如果你填写的是带www的，比如 www.mygit.me ，那么无论是访问 http://www.mygit.me 还是 http://mygit.me ，都会自动跳转到 http://www.mygit.me 如果你填写的是其它子域名，比如 abc.mygit.me，那么访问 http://abc.mygit.me 没问题，但是访问 http://mygit.me ，不会自动跳转到 http://abc.mygit.me 另外说一句，在你绑定了新域名之后，原来的你的用户名.github.io并没有失效，而是会自动跳转到你的新域名。 3. 配置SSH免密登录为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。 操作步骤： 第一步：首先打开电脑文件夹，找到C:\\Users\\王海洋.ssh文件夹并删除 第二步：在C:\\Users\\王海洋文件夹下右键打开Git Bash Here输入命令：ssh-keygen -t rsa -C github邮件地址 生成.ssh秘钥，输入后连敲三次回车，出现下图情况代表成功 第三步：最终生成了一个新的 C:\\Users\\王海洋.ssh文件夹，打开这个文件夹，找到.ssh&#x2F;id_rsa.pub文件，记事本打开并复制里面的内容 第四步：打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key，把复制的内容粘贴进去，title随便填，保存即可，我们的公钥就添加成功了，设置好如下图： 第五步：检测是否设置成功： 输入命令： $ ssh -T &#103;&#x69;&#116;&#x40;&#x67;&#105;&#116;&#104;&#117;&#98;&#x2e;&#99;&#111;&#x6d; # 注意邮箱地址不用改 如果提示Are you sure you want to continue connecting (yes&#x2F;no)?，输入yes，然后会看到： Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access. 看到这个信息说明SSH已配置成功！ 第六步：此时你还需要配置： $ git config –global user.name “liuxianan”&#x2F;&#x2F; 你的github用户名，非昵称$ git config –global user.email “&#x78;&#x78;&#x78;&#x40;&#113;&#113;&#46;&#99;&#111;&#x6d;“&#x2F;&#x2F; 填写你的github注册邮箱 4.使用 hexo 搭建博客4.1 初始化第一步：在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是E:\\xpzsData&#x2F;hexocode，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放 第二步：在E:\\xpzsData&#x2F;hexocode文件夹下右键打开 Git Bash Here，输入hexo init 初始化 hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图： 第三步：执行以下命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的： 第四步：hexo s 是开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章https://www.runoob.com/w3cnote/windows-finds-port-usage.html 到这里初始化就完成了 4.2 将博客部署到 github 个人主页上第一步：在E:\\xpzsData&#x2F;hexocode目录下安装 hexo-deployer-git 插件 安装命令： npm install hexo-deployer-git –save 必须安装，否则执行hexo d 的话会报如下错误： 第二步：编辑E:\\xpzsData&#x2F;hexocode目录下的 _config.yml 文件, 在文件末尾添加如下内容： 注意：其中 repo 中的内容即为 github 个人主页链接地址，具体看下图： 第三步：在E:\\xpzsData&#x2F;hexocode目录下, 输入命令：hexo d 将本地 blog 推送到 github仓库, 也可能需要输入 username &amp; pwd。 推送成功后, 在浏览器中输入对应域名, 即可访问 https://reclusew.github.io/ 5. 更换主题5.1 寻找主题 既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。 这是hexo官网：https://hexo.io/themes/，可在里面下载主题，点击主题名即可跳转到github上，也可以直接在github上搜索主题 在这里我使用github上一个大佬的主题blinkfox&#x2F;hexo-theme-matery 链接：https://github.com/blinkfox/hexo-theme-matery 5.2 下载主题第一步：Git Bash Here中先cd到E:\\xpzsData&#x2F;hexocode目录 第二步：再输入命令 $ git clone 主题http链接 themes&#x2F;主题名称 注意： E:\\xpzsData&#x2F;hexocode目录下的 theme 文件夹下存放的就是博客的主题，主题是否下载成功可到该目录下查看： 5.3 使用主题 打开E:\\xpzsData&#x2F;hexocode目录下的_config.yml文件，在里面找到theme: landscape改为theme: blinkfox （blinkfox为我们要使用的主题名）,然后重新执行hexo g来重新生成。 如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再执行hexo g 和 hexo s 重新生成和发布。 再次在浏览器中输入对应域名, 即可发现主题已更换 5.4 修改主题内容在这里我使用的是blinkfox主题，后期相关修改参考这个主题文档 文档链接：https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md 注意：一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的 大致在下图的文件夹里面修改文件，记得修改后的文件需要关闭后，再在hexocode根目录右键打开Git Bash Here，输入两个命令：hexo g 重新生成，hexo s 开启本地预览服务,等修改的符合要求了，再输入 hexo d 推送到github仓库即可 这样就可以输入网址查看更改后的内容了 文档上没有提及的修改： 返回按钮样式修改：在主题下面的 blinkfox&#x2F;layout&#x2F;_partial 文件夹中的 back-top.esj 文件中修改 特别注意： 修改生成的默认页面信息，要到主题下面的_config.yml文件里面去改，而不是根目录下的_config.yml文件 要把根目录下的_config.yml文件中的这些信息替换成自己的和设置中文 5.5 blinkfox主题的相关配置问题配置音乐播放器：使用网易云音乐id不行，这里用的是QQ音乐 配置留言功能（利用Valine）： 我们的评论系统其实是放在Leancloud上的，因此首先需要去注册一个账号 注册完以后需要创建一个应用，名字可以随便起，然后 进入应用-&gt;设置-&gt;应用key，获取你的appid 和 appkey，复制到主题下面的 _config.yml 文件里面搜索 valine，填入appid 和 appkey 最后！记得在Leancloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去就可以了 主题页面显示的内容在主题下面的 layout 文件夹中的 contact.ejs 文件里面更改 6.利用Typora软件来写博客6.1 Typora介绍 Typora–一款简单高效的Markdown编辑器，保存后直接为md格式，Markdown中点击导入就可以。 Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式，其目标是实现易读易写，说人话就是删减版的HTML语言 Markdown教程：https://www.runoob.com/markdown/md-tutorial.html 6.2 安装Typora官网：https://www.typora.io/#windows 6.3 写博客的步骤第一步：创建.md文件 方法1：定位到我们的hexo根目录，Git Bash Here 中执行命令： hexo new ‘my-first-blog’ hexo会帮我们在E:\\xpzsData&#x2F;hexocode&#x2F;source&#x2F;_posts 下生成相关.md文件，用这个命令的好处是帮我们自动生成了时间，方法1默认生成如下内容： 方法2：当然你也可以直接自己打开E:\\xpzsData&#x2F;hexocode&#x2F;source&#x2F;_posts 目录新建.md文件 第二步：编写并保存 我们只需要用typora打开这个文件就可以开始写博客了，写完后Ctrl+S 保存关闭即可 第三步：清理然后再生成一下，生成后推送到远程仓库即可，hexo根目录下右键Git Bash Here 中依次输入如下命令： hexo clean hexo g hexo d 补充：hexo new page ‘postName’命令和hexo new ‘postName’的区别？ hexo new page ‘My-second-blog’最终部署时生成：hexo&#x2F;public&#x2F;my-second-blog&#x2F;index.html，但是它不会作为文章出现在博文目录。 6.4 Typora快捷键Typora中只要记住一些基本的快捷键就可以了，所有功能软件里面都有对应按钮，这点不用慌。 快捷键文章：https://blog.csdn.net/weixin_39533052/article/details/111115263 6.5 注意：所使用的主题的文章 Front-matter 语法依据使用的不同主题，一些文章功能所使用的语法可能不一样，例如写博客时给文章添加标签的语法等等，这些都要看所使用的主题的文档，例如我们这里使用的是 blinkfox 主题，打开主题文档，往下翻找到” 文章 Front-matter 介绍 “即可。 blinkfox主题文档：https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md#%E6%96%87%E7%AB%A0-front-matter-%E4%BB%8B%E7%BB%8D 示例： 6.6 YAML语法（了解）像在typora中添加tags时，可以直接用数组的写法，也可以使用YAML语法，如下： YAML教程链接：https://www.runoob.com/w3cnote/yaml-intro.html 7.如何向hexo博客中插入图片7.1 使用相对路径的方式众所周知，在md文件中插入图片的语法为。 其中方括号是图片描述，圆括号是图片路径。 一般来说有三种图片路径，分别是相对路径，绝对路径和网络路径。 所谓的网络路径就是直接引用网上的图片，直接复制图片地址，放在圆括号中就完事了。 这种方式十分的方便，但是也存在一定的问题： 图片失效导致无法加载； 打开网页后要再请求加载图片； 原网站限制，如微信公众号的图片会变得不可见等。 这种方式算是有利有弊。 绝对路径是图片在计算机中的绝对位置，相对路径是相对于当前文件的路径。 由于我们的博客是要部署在网站上，部署后会生成新的文件目录，所以我们选择使用相对路径的方式。 在hexo中使用文章资源文件夹需要在config.yaml文件中更改一下配置： post_asset_folder: true 当该配置被应用后，使用hexo new命令创建新文章时，会生成相同名字的文件夹，也就是文章资源文件夹。 由于项目会生成新的文件目录，同时会解析Markdown中的图片路径，会导致一个问题。 如在一个文件目录下，博客名为1.md，相应的存在一个1文件夹存放图片image.jpg。 在Typora编辑器中，普通的md文件使用能在编辑器中正常显示图片。 在hexo中，按理说应该是使用，但网页中却无法正常显示。 此时应该使用这样的方式来引入图片： 虽然可以正常引用图片了，但是这种引用图片的方式只有一句话能形容，wtf。 7.2 hexo-renderer-marked插件的安装与配置插件hexo-renderer-marked解决了这个问题 安装： npm install hexo-renderer-marked –save ，之后在config.yaml中更改配置即可 之后就可以在使用 的方式愉快的插入图片了。 我们做了这么多都是为了方便，那么为什么不再方便一点呢。 7.3 hexo-renderer-marked插件与Typora的完美结合如果图片数量众多的话，一张一张的放很影响效率。但是不用怕，我们有很方便的解决方法。 Typora是我非常喜欢的Markdown文本编辑器，在之前的文章中也介绍过一点。 Typora对于插入图片的支持做得非常好，在文件-&gt;偏好设置或者直接&lt;C-,&gt;进入设置。 复制网络路径的图片： 使用该配置后，可以直接复制网页中的图片地址，粘贴到Typora中后，会直接复制该图片到文章资源文件夹，同时自动更改路径。 如复制网络路径的图片https:&#x2F;&#x2F;…..&#x2F;image.jpg粘贴到Typora中叫文章名的文章后，图片会自动变为。 但我们知道部署后，文件路径是不同的，所以当我们插入完所有的图片后，我们还需要删除每个图片路径中的文件名&#x2F;。不慌，也很简单。 在Typora编辑器中，使用快捷键，将所有的文章名&#x2F;替换为空即可删除。 然后再将博客上传，图片就会随着文章一起打包。在网页中就可以看到正常显示的图片，大功告成。 8.总结这是本人搭建博客过程中遇到的一些问题和解决办法，按照我这个步骤基本就能搭建起来一个不错的博客了，文章里面省略了博客的SEO优化，比如让百度和谷歌搜索引擎收录我们的博客网站，这点大家可以去网上搜索，教程很多的，当然也欢迎大家访问我的博客，交个朋友嘿嘿！ 博客地址：https://reclusew.github.io/ 参考文献： 1：https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md 2：https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html 3：https://www.jianshu.com/p/f72aaad7b852","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2023-06-19T03:17:08.556Z","updated":"2023-06-19T03:17:08.556Z","comments":true,"path":"2023/06/19/hello-world/","link":"","permalink":"http://example.com/2023/06/19/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}